// This file is auto-generated by zod-pg. Do not edit this file directly.

import { z } from 'zod';


/**
 * Base read schema for the "public.view_user_posts" table.
 * Validates raw rows read from the database (no casing transforms applied yet).
 */
export const ViewUserPostsBaseSchema = z.object({
     /**
      * dataType: int4
      */
    user_id: z.number().int().nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: varchar
      */
    user_name: z.string().nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: int4
      */
    post_id: z.number().int().nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: text
      */
    post_title: z.string().nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: text
      */
    post_content: z.string().nullish().transform((value) => value ?? undefined).optional(),
});

/**
 * The base record type for the "public.view_user_posts" table.
 * This type represents the raw database record without case transforms.
 */
export type ViewUserPostBaseRecord = z.output<typeof ViewUserPostsBaseSchema>;

/**
 * Read transform for the "public.view_user_posts" table.
 * Maps database fields to app case properties.
 */
export const transformViewUserPostBaseRecord = (data: ViewUserPostBaseRecord): {
    userId?: ViewUserPostBaseRecord['user_id'],
    userName?: ViewUserPostBaseRecord['user_name'],
    postId?: ViewUserPostBaseRecord['post_id'],
    postTitle?: ViewUserPostBaseRecord['post_title'],
    postContent?: ViewUserPostBaseRecord['post_content'],
} => ({
    userId: data.user_id,
    userName: data.user_name,
    postId: data.post_id,
    postTitle: data.post_title,
    postContent: data.post_content,
});

/**
 * Read schema for the "public.view_user_posts" table (after casing transform).
 */
export const ViewUserPostsSchema = ViewUserPostsBaseSchema.transform(transformViewUserPostBaseRecord);

type TableReadRecord = z.output<typeof ViewUserPostsSchema>;

/**
 * Read record (casing transformed) for the "public.view_user_posts" view.
 */
export interface ViewUserPostRecord {
    /**
    */
    userId?: TableReadRecord['userId'];
    /**
    */
    userName?: TableReadRecord['userName'];
    /**
    */
    postId?: TableReadRecord['postId'];
    /**
    */
    postTitle?: TableReadRecord['postTitle'];
    /**
    */
    postContent?: TableReadRecord['postContent'];
}

