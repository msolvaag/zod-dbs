// This file is auto-generated by zod-pg. Do not edit this file directly.

import { z } from 'zod';


/**
 * The base read schema for the "public.view_user_posts" table.
 * This schema is used to validate the data read from the database without any transformations.
 */
export const ViewUserPostsReadSchema = z.object({
    /**
    * dataType: int4
    * defaultValue: 
    */
    user_id: z.number().int().nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    user_name: z.string().nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: int4
    * defaultValue: 
    */
    post_id: z.number().int().nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: text
    * defaultValue: 
    */
    post_title: z.string().nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: text
    * defaultValue: 
    */
    post_content: z.string().nullish().transform((value) => value ?? undefined).optional(),
});

/**
 * The base record type for the "public.view_user_posts" table.
 * This type represents the raw database record without any transformations.
 */
export type ViewUserPostReadBaseRecord = z.output<typeof ViewUserPostsReadSchema>;

/**
* The read transform function for the "public.view_user_posts" table.
* Maps the raw database fields to expected property names. e.g snake_case to camelCase.
*/
export const transformViewUserPostReadRecord = (data: ViewUserPostReadBaseRecord): {
    userId?: ViewUserPostReadBaseRecord['user_id'],
    userName?: ViewUserPostReadBaseRecord['user_name'],
    postId?: ViewUserPostReadBaseRecord['post_id'],
    postTitle?: ViewUserPostReadBaseRecord['post_title'],
    postContent?: ViewUserPostReadBaseRecord['post_content'],
} => ({
    userId: data.user_id,
    userName: data.user_name,
    postId: data.post_id,
    postTitle: data.post_title,
    postContent: data.post_content,
});

/**
 * The read schema for the "public.view_user_posts" table.
 * This schema is used to validate the data read from the database with transformations.
 */
export const ViewUserPostsSchema = ViewUserPostsReadSchema.transform(transformViewUserPostReadRecord);

type TableReadRecord = z.output<typeof ViewUserPostsSchema>;

/**
* Represents a database record from the "public.view_user_posts" view.
*/
export interface ViewUserPostRecord {
    /**
    */
    userId?: TableReadRecord['userId'];
    /**
    */
    userName?: TableReadRecord['userName'];
    /**
    */
    postId?: TableReadRecord['postId'];
    /**
    */
    postTitle?: TableReadRecord['postTitle'];
    /**
    */
    postContent?: TableReadRecord['postContent'];
}
