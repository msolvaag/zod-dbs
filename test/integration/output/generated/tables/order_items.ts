// This file is auto-generated by zod-pg. Do not edit this file directly.

import { z } from 'zod';


export const OrderItemsTableSchema = z.object({
    /**
    * dataType: int8
    * defaultValue: nextval('order_items_id_seq'::regclass)
    */
    id: z.int(),
    /**
    * dataType: int8
    * defaultValue: 
    */
    order_id: z.int().nullable(),
    /**
    * dataType: int4
    * defaultValue: 
    */
    product_id: z.int().nullable(),
    /**
    * dataType: int2
    * defaultValue: 
    */
    quantity: z.int(),
    /**
    * dataType: numeric
    * defaultValue: 
    */
    unit_price: z.number(),
    /**
    * dataType: numeric
    * defaultValue: 0
    */
    discount_percent: z.number().nullable(),
    /**
    * dataType: numeric
    * defaultValue: 
    */
    line_total: z.number().nullable(),
}).transform(data => ({
    id: data.id,
    orderId: data.order_id ?? undefined,
    productId: data.product_id ?? undefined,
    quantity: data.quantity,
    unitPrice: data.unit_price,
    discountPercent: data.discount_percent ?? undefined,
    lineTotal: data.line_total ?? undefined,
}));

const TableWriteSchema = z.object({
    /**
    * dataType: int8
    * defaultValue: 
    */
    orderId: z.int().nullish(),
    /**
    * dataType: int4
    * defaultValue: 
    */
    productId: z.int().nullish(),
    /**
    * dataType: int2
    * defaultValue: 
    */
    quantity: z.int(),
    /**
    * dataType: numeric
    * defaultValue: 
    */
    unitPrice: z.number(),
    /**
    * dataType: numeric
    * defaultValue: 0
    */
    discountPercent: z.number().nullish(),
    /**
    * dataType: numeric
    * defaultValue: 
    */
    lineTotal: z.number().nullish(),
});

export const OrderItemsTableInsertSchema = TableWriteSchema.transform(data => ({
    order_id: data.orderId,
    product_id: data.productId,
    quantity: data.quantity,
    unit_price: data.unitPrice,
    discount_percent: data.discountPercent,
    line_total: data.lineTotal,
}));

export const OrderItemsTableUpdateSchema = TableWriteSchema.partial().transform(data => ({
    order_id: data.orderId,
    product_id: data.productId,
    quantity: data.quantity,
    unit_price: data.unitPrice,
    discount_percent: data.discountPercent,
    line_total: data.lineTotal,
}));

type TableReadRecord = z.output<typeof OrderItemsTableSchema>;
type TableInsertRecord = z.input<typeof OrderItemsTableInsertSchema>;



/**
* Represents a database record from the "public.order_items"" table.
*/
export interface OrderItemDbRecord {
    /**
     * Primary key for order items table
     */
    id: TableReadRecord['id'];
    /**
     * ID of the order this item belongs to
     */
    orderId: TableReadRecord['orderId'];
    /**
     * ID of the product
     */
    productId: TableReadRecord['productId'];
    /**
     * Quantity of the product ordered
     */
    quantity: TableReadRecord['quantity'];
    /**
     * Price per unit
     */
    unitPrice: TableReadRecord['unitPrice'];
    /**
     * Discount percentage applied
     */
    discountPercent: TableReadRecord['discountPercent'];
    /**
     * Calculated line total
     */
    lineTotal: TableReadRecord['lineTotal'];
}

/**
* Represents an insertable database record from the "public.order_items"" table.
*/
export interface OrderItemInsertRecord {
    /**
    * ID of the order this item belongs to
    */
    orderId?: TableInsertRecord['orderId'];
    /**
    * ID of the product
    */
    productId?: TableInsertRecord['productId'];
    /**
    * Quantity of the product ordered
    */
    quantity: TableInsertRecord['quantity'];
    /**
    * Price per unit
    */
    unitPrice: TableInsertRecord['unitPrice'];
    /**
    * Discount percentage applied
    * @default: 0
    */
    discountPercent?: TableInsertRecord['discountPercent'];
    /**
    * Calculated line total
    */
    lineTotal?: TableInsertRecord['lineTotal'];
}

/**
* Represents an updateable database record from the "public.order_items"" table.
*/
export type OrderItemUpdateRecord = Partial<OrderItemInsertRecord>;
