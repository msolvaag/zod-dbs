// This file is auto-generated by zod-pg. Do not edit this file directly.

import { z } from 'zod';

export const CONSTRAINT_VARIATION_ANIMALS = ['cat', 'dog', 'bird', 'fish'] as const;
export const CONSTRAINT_VARIATION_FRUITS = ['apple', 'banana', 'orange', 'grape'] as const;
export const CONSTRAINT_VARIATION_VEHICLES = ['car', 'truck', 'motorcycle', 'bicycle'] as const;
export const CONSTRAINT_VARIATION_LANGUAGES = ['en', 'es', 'fr', 'de', 'it'] as const;
export const CONSTRAINT_VARIATION_ACTIVE_STATUSES = ['true', 'false'] as const;

/**
 * Base read schema for the "public.constraint_variations" table.
 * Validates raw rows read from the database (no casing transforms applied yet).
 */
export const ConstraintVariationsTableBaseSchema = z.object({
     /**
      * dataType: int4
      * defaultValue: nextval('constraint_variations_id_seq'::regclass)
      */
    id: z.number().int(),
     /**
      * dataType: varchar
      */
    animal: z.enum(CONSTRAINT_VARIATION_ANIMALS).nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: text
      */
    fruit: z.enum(CONSTRAINT_VARIATION_FRUITS).nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: varchar
      */
    vehicle: z.enum(CONSTRAINT_VARIATION_VEHICLES).nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: bpchar
      */
    language: z.enum(CONSTRAINT_VARIATION_LANGUAGES).nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: int2
      */
    rating: z.number().int().nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: bool
      */
    active_status: z.enum(CONSTRAINT_VARIATION_ACTIVE_STATUSES).nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: timestamptz
      * defaultValue: now()
      */
    created_at: z.date().nullish().transform((value) => value ?? undefined).optional(),
});

/**
 * The base record type for the "public.constraint_variations" table.
 * This type represents the raw database record without case transforms.
 */
export type ConstraintVariationBaseRecord = z.output<typeof ConstraintVariationsTableBaseSchema>;

/**
 * Read transform for the "public.constraint_variations" table.
 * Maps raw database snake_case fields to camelCase properties.
 */
export const transformConstraintVariationBaseRecord = (data: ConstraintVariationBaseRecord): {
    id: ConstraintVariationBaseRecord['id'],
    animal?: ConstraintVariationBaseRecord['animal'],
    fruit?: ConstraintVariationBaseRecord['fruit'],
    vehicle?: ConstraintVariationBaseRecord['vehicle'],
    language?: ConstraintVariationBaseRecord['language'],
    rating?: ConstraintVariationBaseRecord['rating'],
    activeStatus?: ConstraintVariationBaseRecord['active_status'],
    createdAt?: ConstraintVariationBaseRecord['created_at'],
} => ({
    id: data.id,
    animal: data.animal,
    fruit: data.fruit,
    vehicle: data.vehicle,
    language: data.language,
    rating: data.rating,
    activeStatus: data.active_status,
    createdAt: data.created_at,
});

/**
 * Read schema for the "public.constraint_variations" table (after casing transform).
 */
export const ConstraintVariationsTableSchema = ConstraintVariationsTableBaseSchema.transform(transformConstraintVariationBaseRecord);

/**
 * Base insert/write schema for the "public.constraint_variations" table (no casing transforms).
 */
export const ConstraintVariationsTableInsertBaseSchema = z.object({
     /**
      * dataType: varchar
      */
    animal: z.enum(CONSTRAINT_VARIATION_ANIMALS).nullish().optional(),
     /**
      * dataType: text
      */
    fruit: z.enum(CONSTRAINT_VARIATION_FRUITS).nullish().optional(),
     /**
      * dataType: varchar
      */
    vehicle: z.enum(CONSTRAINT_VARIATION_VEHICLES).nullish().optional(),
     /**
      * dataType: bpchar
      */
    language: z.enum(CONSTRAINT_VARIATION_LANGUAGES).nullish().optional(),
     /**
      * dataType: int2
      */
    rating: z.number().int().nullish().optional(),
     /**
      * dataType: bool
      */
    activeStatus: z.enum(CONSTRAINT_VARIATION_ACTIVE_STATUSES).nullish().optional(),
     /**
      * dataType: timestamptz
      * defaultValue: now()
      */
    createdAt: z.date().nullish().optional(),
});

/**
 * The base record type for the "public.constraint_variations" table.
 * This type represents an insertable database record before casing transformations are applied.
 */
export type ConstraintVariationInsertBaseRecord = z.output<typeof ConstraintVariationsTableInsertBaseSchema>;

/**
 * The base record type for the "public.constraint_variations" table.
 * This type represents an updatable database record before casing transformations are applied.
 */
export type ConstraintVariationUpdateBaseRecord = Partial<ConstraintVariationInsertBaseRecord>;

/**
 * Insert transform for the "public.constraint_variations" table.
 * Maps camelCase properties to raw database snake_case fields.
 */
export const transformConstraintVariationInsertBaseRecord = (data: ConstraintVariationInsertBaseRecord): {
    animal?: ConstraintVariationInsertBaseRecord['animal'],
    fruit?: ConstraintVariationInsertBaseRecord['fruit'],
    vehicle?: ConstraintVariationInsertBaseRecord['vehicle'],
    language?: ConstraintVariationInsertBaseRecord['language'],
    rating?: ConstraintVariationInsertBaseRecord['rating'],
    active_status?: ConstraintVariationInsertBaseRecord['activeStatus'],
    created_at?: ConstraintVariationInsertBaseRecord['createdAt'],
} => ({
    animal: data.animal,
    fruit: data.fruit,
    vehicle: data.vehicle,
    language: data.language,
    rating: data.rating,
    active_status: data.activeStatus,
    created_at: data.createdAt,
});

/**
 * Update transform for the "public.constraint_variations" table.
 * Maps camelCase properties to raw database snake_case fields.
 */
export const transformConstraintVariationUpdateBaseRecord = (data: ConstraintVariationUpdateBaseRecord): {
    animal?: ConstraintVariationUpdateBaseRecord['animal'],
    fruit?: ConstraintVariationUpdateBaseRecord['fruit'],
    vehicle?: ConstraintVariationUpdateBaseRecord['vehicle'],
    language?: ConstraintVariationUpdateBaseRecord['language'],
    rating?: ConstraintVariationUpdateBaseRecord['rating'],
    active_status?: ConstraintVariationUpdateBaseRecord['activeStatus'],
    created_at?: ConstraintVariationUpdateBaseRecord['createdAt'],
} => ({
    animal: data.animal,
    fruit: data.fruit,
    vehicle: data.vehicle,
    language: data.language,
    rating: data.rating,
    active_status: data.activeStatus,
    created_at: data.createdAt,
});

/**
 * Insert schema for the "public.constraint_variations" table (after casing transform).
 */
export const ConstraintVariationsTableInsertSchema = ConstraintVariationsTableInsertBaseSchema.transform(transformConstraintVariationInsertBaseRecord);

/**
 * Update schema for the "public.constraint_variations" table (after casing transform).
 */
export const ConstraintVariationsTableUpdateSchema = ConstraintVariationsTableInsertBaseSchema.partial().transform(transformConstraintVariationUpdateBaseRecord);

type TableInsertRecord = z.input<typeof ConstraintVariationsTableInsertSchema>;
type TableReadRecord = z.output<typeof ConstraintVariationsTableSchema>;

/**
 * Read record (casing transformed) for the "public.constraint_variations" table.
 */
export interface ConstraintVariationRecord {
    /**
    * Primary key for constraint variations table
    */
    id: TableReadRecord['id'];
    /**
    * Type of animal
    */
    animal?: TableReadRecord['animal'];
    /**
    * Type of fruit
    */
    fruit?: TableReadRecord['fruit'];
    /**
    * Type of vehicle
    */
    vehicle?: TableReadRecord['vehicle'];
    /**
    * Language code
    */
    language?: TableReadRecord['language'];
    /**
    * Rating score (1-5)
    */
    rating?: TableReadRecord['rating'];
    /**
    * Whether the item is active
    */
    activeStatus?: TableReadRecord['activeStatus'];
    /**
    * Timestamp when record was created
    */
    createdAt?: TableReadRecord['createdAt'];
}

/**
 * Insert record (casing transformed) for the "public.constraint_variations" table.
 */
export interface ConstraintVariationInsertRecord {
    /**
    * Type of animal
    * @maxLen: 20
    */
    animal?: TableInsertRecord['animal'];
    /**
    * Type of fruit
    */
    fruit?: TableInsertRecord['fruit'];
    /**
    * Type of vehicle
    * @maxLen: 15
    */
    vehicle?: TableInsertRecord['vehicle'];
    /**
    * Language code
    * @maxLen: 2
    */
    language?: TableInsertRecord['language'];
    /**
    * Rating score (1-5)
    */
    rating?: TableInsertRecord['rating'];
    /**
    * Whether the item is active
    */
    activeStatus?: TableInsertRecord['activeStatus'];
    /**
    * Timestamp when record was created
    * @default: now()
    */
    createdAt?: TableInsertRecord['createdAt'];
}

/**
 * Updatable record (casing transformed) for the "public.constraint_variations" table.
 */
export type ConstraintVariationUpdateRecord = Partial<ConstraintVariationInsertRecord>;

export type ConstraintVariationAnimal = (typeof CONSTRAINT_VARIATION_ANIMALS)[number];
export type ConstraintVariationFruit = (typeof CONSTRAINT_VARIATION_FRUITS)[number];
export type ConstraintVariationVehicle = (typeof CONSTRAINT_VARIATION_VEHICLES)[number];
export type ConstraintVariationLanguage = (typeof CONSTRAINT_VARIATION_LANGUAGES)[number];
export type ConstraintVariationActiveStatus = (typeof CONSTRAINT_VARIATION_ACTIVE_STATUSES)[number];
