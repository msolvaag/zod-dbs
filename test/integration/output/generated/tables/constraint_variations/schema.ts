// This file is auto-generated by zod-pg. Do not edit this file directly.

import { z } from 'zod';

export const CONSTRAINT_VARIATION_ANIMALS = ['cat', 'dog', 'bird', 'fish'] as const;
export const CONSTRAINT_VARIATION_FRUITS = ['apple', 'banana', 'orange', 'grape'] as const;
export const CONSTRAINT_VARIATION_VEHICLES = ['car', 'truck', 'motorcycle', 'bicycle'] as const;
export const CONSTRAINT_VARIATION_LANGUAGES = ['en', 'es', 'fr', 'de', 'it'] as const;
export const CONSTRAINT_VARIATION_ACTIVE_STATUSES = ['true', 'false'] as const;

/**
 * The base read schema for the "public.constraint_variations" table.
 * This schema is used to validate the data read from the database without any transformations.
 */
export const ConstraintVariationsTableReadSchema = z.object({
    /**
    * dataType: int4
    * defaultValue: nextval('constraint_variations_id_seq'::regclass)
    */
    id: z.number().int(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    animal: z.enum(CONSTRAINT_VARIATION_ANIMALS).nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: text
    * defaultValue: 
    */
    fruit: z.enum(CONSTRAINT_VARIATION_FRUITS).nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    vehicle: z.enum(CONSTRAINT_VARIATION_VEHICLES).nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: bpchar
    * defaultValue: 
    */
    language: z.enum(CONSTRAINT_VARIATION_LANGUAGES).nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: int2
    * defaultValue: 
    */
    rating: z.number().int().nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: bool
    * defaultValue: 
    */
    active_status: z.enum(CONSTRAINT_VARIATION_ACTIVE_STATUSES).nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: timestamptz
    * defaultValue: now()
    */
    created_at: z.date().nullish().transform((value) => value ?? undefined).optional(),
});

/**
 * The base record type for the "public.constraint_variations" table.
 * This type represents the raw database record without any transformations.
 */
export type ConstraintVariationReadBaseRecord = z.output<typeof ConstraintVariationsTableReadSchema>;

/**
* The read transform function for the "public.constraint_variations" table.
* Maps the raw database fields to expected property names. e.g snake_case to camelCase.
*/
export const transformConstraintVariationReadRecord = (data: ConstraintVariationReadBaseRecord): {
    id: ConstraintVariationReadBaseRecord['id'],
    animal?: ConstraintVariationReadBaseRecord['animal'],
    fruit?: ConstraintVariationReadBaseRecord['fruit'],
    vehicle?: ConstraintVariationReadBaseRecord['vehicle'],
    language?: ConstraintVariationReadBaseRecord['language'],
    rating?: ConstraintVariationReadBaseRecord['rating'],
    activeStatus?: ConstraintVariationReadBaseRecord['active_status'],
    createdAt?: ConstraintVariationReadBaseRecord['created_at'],
} => ({
    id: data.id,
    animal: data.animal,
    fruit: data.fruit,
    vehicle: data.vehicle,
    language: data.language,
    rating: data.rating,
    activeStatus: data.active_status,
    createdAt: data.created_at,
});

/**
 * The read schema for the "public.constraint_variations" table.
 * This schema is used to validate the data read from the database with transformations.
 */
export const ConstraintVariationsTableSchema = ConstraintVariationsTableReadSchema.transform(transformConstraintVariationReadRecord);

/**
 * The base write schema for the "public.constraint_variations" table.
 * This schema is used to validate the data before writing to the database without any transformations.
 */
export const ConstraintVariationsTableWriteSchema = z.object({
    /**
    * dataType: varchar
    * defaultValue: 
    */
    animal: z.enum(CONSTRAINT_VARIATION_ANIMALS).nullish().optional(),
    /**
    * dataType: text
    * defaultValue: 
    */
    fruit: z.enum(CONSTRAINT_VARIATION_FRUITS).nullish().optional(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    vehicle: z.enum(CONSTRAINT_VARIATION_VEHICLES).nullish().optional(),
    /**
    * dataType: bpchar
    * defaultValue: 
    */
    language: z.enum(CONSTRAINT_VARIATION_LANGUAGES).nullish().optional(),
    /**
    * dataType: int2
    * defaultValue: 
    */
    rating: z.number().int().nullish().optional(),
    /**
    * dataType: bool
    * defaultValue: 
    */
    activeStatus: z.enum(CONSTRAINT_VARIATION_ACTIVE_STATUSES).nullish().optional(),
    /**
    * dataType: timestamptz
    * defaultValue: now()
    */
    createdAt: z.date().nullish().optional(),
});

/**
 * The base record type for the "public.constraint_variations" table.
 * This type represents an insertable database record before casing transformations are applied.
 */
export type ConstraintVariationInsertBaseRecord = z.output<typeof ConstraintVariationsTableWriteSchema>;

/**
 * The base record type for the "public.constraint_variations" table.
 * This type represents an updatable database record before casing transformations are applied.
 */
export type ConstraintVariationUpdateBaseRecord = Partial<ConstraintVariationInsertBaseRecord>;

/**
 * The insert transform function for the "public.constraint_variations" table.
 * Maps the expected property names to raw database fields. e.g camelCase to snake_case.
 */
export const transformConstraintVariationInsertRecord = (data: ConstraintVariationInsertBaseRecord): {
    animal?: ConstraintVariationInsertBaseRecord['animal'],
    fruit?: ConstraintVariationInsertBaseRecord['fruit'],
    vehicle?: ConstraintVariationInsertBaseRecord['vehicle'],
    language?: ConstraintVariationInsertBaseRecord['language'],
    rating?: ConstraintVariationInsertBaseRecord['rating'],
    active_status?: ConstraintVariationInsertBaseRecord['activeStatus'],
    created_at?: ConstraintVariationInsertBaseRecord['createdAt'],
} => ({
    animal: data.animal,
    fruit: data.fruit,
    vehicle: data.vehicle,
    language: data.language,
    rating: data.rating,
    active_status: data.activeStatus,
    created_at: data.createdAt,
});

/**
 * The update transform function for the "public.constraint_variations" table.
 * Maps the expected property names to raw database fields. e.g camelCase to snake_case.
 */
export const transformConstraintVariationUpdateRecord = (data: ConstraintVariationUpdateBaseRecord): {
    animal?: ConstraintVariationUpdateBaseRecord['animal'],
    fruit?: ConstraintVariationUpdateBaseRecord['fruit'],
    vehicle?: ConstraintVariationUpdateBaseRecord['vehicle'],
    language?: ConstraintVariationUpdateBaseRecord['language'],
    rating?: ConstraintVariationUpdateBaseRecord['rating'],
    active_status?: ConstraintVariationUpdateBaseRecord['activeStatus'],
    created_at?: ConstraintVariationUpdateBaseRecord['createdAt'],
} => ({
    animal: data.animal,
    fruit: data.fruit,
    vehicle: data.vehicle,
    language: data.language,
    rating: data.rating,
    active_status: data.activeStatus,
    created_at: data.createdAt,
});

/**
 * The insert schema for the "public.constraint_variations" table.
 * This schema is used to validate and transform a record before inserting into the database.
 */
export const ConstraintVariationsTableInsertSchema = ConstraintVariationsTableWriteSchema.transform(transformConstraintVariationInsertRecord);

/**
 * The update schema for the "public.constraint_variations" table.
 * This schema is used to validate and transform a record before updating the database.
 */
export const ConstraintVariationsTableUpdateSchema = ConstraintVariationsTableWriteSchema.partial().transform(transformConstraintVariationUpdateRecord);

type TableInsertRecord = z.input<typeof ConstraintVariationsTableInsertSchema>;
type TableReadRecord = z.output<typeof ConstraintVariationsTableSchema>;
export type ConstraintVariationAnimal = (typeof CONSTRAINT_VARIATION_ANIMALS)[number];
export type ConstraintVariationFruit = (typeof CONSTRAINT_VARIATION_FRUITS)[number];
export type ConstraintVariationVehicle = (typeof CONSTRAINT_VARIATION_VEHICLES)[number];
export type ConstraintVariationLanguage = (typeof CONSTRAINT_VARIATION_LANGUAGES)[number];
export type ConstraintVariationActiveStatus = (typeof CONSTRAINT_VARIATION_ACTIVE_STATUSES)[number];

/**
* Represents a database record from the "public.constraint_variations" table.
*/
export interface ConstraintVariationRecord {
    /**
    * Primary key for constraint variations table
    */
    id: TableReadRecord['id'];
    /**
    * Type of animal
    */
    animal?: TableReadRecord['animal'];
    /**
    * Type of fruit
    */
    fruit?: TableReadRecord['fruit'];
    /**
    * Type of vehicle
    */
    vehicle?: TableReadRecord['vehicle'];
    /**
    * Language code
    */
    language?: TableReadRecord['language'];
    /**
    * Rating score (1-5)
    */
    rating?: TableReadRecord['rating'];
    /**
    * Whether the item is active
    */
    activeStatus?: TableReadRecord['activeStatus'];
    /**
    * Timestamp when record was created
    */
    createdAt?: TableReadRecord['createdAt'];
}

/**
* Represents an insertable database record from the "public.constraint_variations" table.
*/
export interface ConstraintVariationInsertRecord {
    /**
    * Type of animal
    * @maxLen: 20
    */
    animal?: TableInsertRecord['animal'];
    /**
    * Type of fruit
    */
    fruit?: TableInsertRecord['fruit'];
    /**
    * Type of vehicle
    * @maxLen: 15
    */
    vehicle?: TableInsertRecord['vehicle'];
    /**
    * Language code
    * @maxLen: 2
    */
    language?: TableInsertRecord['language'];
    /**
    * Rating score (1-5)
    */
    rating?: TableInsertRecord['rating'];
    /**
    * Whether the item is active
    */
    activeStatus?: TableInsertRecord['activeStatus'];
    /**
    * Timestamp when record was created
    * @default: now()
    */
    createdAt?: TableInsertRecord['createdAt'];
}

/**
* Represents an updateable database record from the "public.constraint_variations" table.
*/
export type ConstraintVariationUpdateRecord = Partial<ConstraintVariationInsertRecord>;
