// This file is auto-generated by zod-pg. Do not edit this file directly.

import { z } from 'zod';


/**
 * Base read schema for the "public.inventory" table.
 * Validates raw rows read from the database (no casing transforms applied yet).
 */
export const InventoryTableBaseSchema = z.object({
     /**
      * dataType: int4
      */
    product_id: z.number().int(),
     /**
      * dataType: int4
      * defaultValue: 0
      */
    stock_quantity: z.number().int(),
     /**
      * dataType: int4
      * defaultValue: 0
      */
    reserved_quantity: z.number().int().nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: int2
      * defaultValue: 10
      */
    reorder_level: z.number().int().nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: date
      */
    last_restocked: z.date().nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: jsonb
      */
    supplier_info: z.any().nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: _text
      */
    warehouse_locations: z.array(z.string()).nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: timestamptz
      * defaultValue: now()
      */
    updated_at: z.date().nullish().transform((value) => value ?? undefined).optional(),
});

/**
 * The base record type for the "public.inventory" table.
 * This type represents the raw database record without case transforms.
 */
export type InventoryBaseRecord = z.output<typeof InventoryTableBaseSchema>;

/**
 * Read transform for the "public.inventory" table.
 * Maps raw database snake_case fields to camelCase properties.
 */
export const transformInventoryBaseRecord = (data: InventoryBaseRecord): {
    productId: InventoryBaseRecord['product_id'],
    stockQuantity: InventoryBaseRecord['stock_quantity'],
    reservedQuantity?: InventoryBaseRecord['reserved_quantity'],
    reorderLevel?: InventoryBaseRecord['reorder_level'],
    lastRestocked?: InventoryBaseRecord['last_restocked'],
    supplierInfo?: InventoryBaseRecord['supplier_info'],
    warehouseLocations?: InventoryBaseRecord['warehouse_locations'],
    updatedAt?: InventoryBaseRecord['updated_at'],
} => ({
    productId: data.product_id,
    stockQuantity: data.stock_quantity,
    reservedQuantity: data.reserved_quantity,
    reorderLevel: data.reorder_level,
    lastRestocked: data.last_restocked,
    supplierInfo: data.supplier_info,
    warehouseLocations: data.warehouse_locations,
    updatedAt: data.updated_at,
});

/**
 * Read schema for the "public.inventory" table (after casing transform).
 */
export const InventoryTableSchema = InventoryTableBaseSchema.transform(transformInventoryBaseRecord);

/**
 * Base insert/write schema for the "public.inventory" table (no casing transforms).
 */
export const InventoryTableInsertBaseSchema = z.object({
     /**
      * dataType: int4
      */
    productId: z.number().int(),
     /**
      * dataType: int4
      * defaultValue: 0
      */
    stockQuantity: z.number().int(),
     /**
      * dataType: int4
      * defaultValue: 0
      */
    reservedQuantity: z.number().int().nullish().optional(),
     /**
      * dataType: int2
      * defaultValue: 10
      */
    reorderLevel: z.number().int().nullish().optional(),
     /**
      * dataType: date
      */
    lastRestocked: z.date().nullish().optional(),
     /**
      * dataType: jsonb
      */
    supplierInfo: z.any().nullish().transform((value) => value ? JSON.stringify(value) : value).optional(),
     /**
      * dataType: _text
      */
    warehouseLocations: z.array(z.string()).nullish().optional(),
     /**
      * dataType: timestamptz
      * defaultValue: now()
      */
    updatedAt: z.date().nullish().optional(),
});

/**
 * The base record type for the "public.inventory" table.
 * This type represents an insertable database record before casing transformations are applied.
 */
export type InventoryInsertBaseRecord = z.output<typeof InventoryTableInsertBaseSchema>;

/**
 * The base record type for the "public.inventory" table.
 * This type represents an updatable database record before casing transformations are applied.
 */
export type InventoryUpdateBaseRecord = Partial<InventoryInsertBaseRecord>;

/**
 * Insert transform for the "public.inventory" table.
 * Maps camelCase properties to raw database snake_case fields.
 */
export const transformInventoryInsertBaseRecord = (data: InventoryInsertBaseRecord): {
    product_id: InventoryInsertBaseRecord['productId'],
    stock_quantity: InventoryInsertBaseRecord['stockQuantity'],
    reserved_quantity?: InventoryInsertBaseRecord['reservedQuantity'],
    reorder_level?: InventoryInsertBaseRecord['reorderLevel'],
    last_restocked?: InventoryInsertBaseRecord['lastRestocked'],
    supplier_info?: InventoryInsertBaseRecord['supplierInfo'],
    warehouse_locations?: InventoryInsertBaseRecord['warehouseLocations'],
    updated_at?: InventoryInsertBaseRecord['updatedAt'],
} => ({
    product_id: data.productId,
    stock_quantity: data.stockQuantity,
    reserved_quantity: data.reservedQuantity,
    reorder_level: data.reorderLevel,
    last_restocked: data.lastRestocked,
    supplier_info: data.supplierInfo,
    warehouse_locations: data.warehouseLocations,
    updated_at: data.updatedAt,
});

/**
 * Update transform for the "public.inventory" table.
 * Maps camelCase properties to raw database snake_case fields.
 */
export const transformInventoryUpdateBaseRecord = (data: InventoryUpdateBaseRecord): {
    product_id: InventoryUpdateBaseRecord['productId'],
    stock_quantity: InventoryUpdateBaseRecord['stockQuantity'],
    reserved_quantity?: InventoryUpdateBaseRecord['reservedQuantity'],
    reorder_level?: InventoryUpdateBaseRecord['reorderLevel'],
    last_restocked?: InventoryUpdateBaseRecord['lastRestocked'],
    supplier_info?: InventoryUpdateBaseRecord['supplierInfo'],
    warehouse_locations?: InventoryUpdateBaseRecord['warehouseLocations'],
    updated_at?: InventoryUpdateBaseRecord['updatedAt'],
} => ({
    product_id: data.productId,
    stock_quantity: data.stockQuantity,
    reserved_quantity: data.reservedQuantity,
    reorder_level: data.reorderLevel,
    last_restocked: data.lastRestocked,
    supplier_info: data.supplierInfo,
    warehouse_locations: data.warehouseLocations,
    updated_at: data.updatedAt,
});

/**
 * Insert schema for the "public.inventory" table (after casing transform).
 */
export const InventoryTableInsertSchema = InventoryTableInsertBaseSchema.transform(transformInventoryInsertBaseRecord);

/**
 * Update schema for the "public.inventory" table (after casing transform).
 */
export const InventoryTableUpdateSchema = InventoryTableInsertBaseSchema.partial().transform(transformInventoryUpdateBaseRecord);

type TableInsertRecord = z.input<typeof InventoryTableInsertSchema>;
type TableReadRecord = z.output<typeof InventoryTableSchema>;

/**
 * Read record (casing transformed) for the "public.inventory" table.
 */
export interface InventoryRecord {
    /**
    * ID of the product
    */
    productId: TableReadRecord['productId'];
    /**
    * Current stock quantity
    */
    stockQuantity: TableReadRecord['stockQuantity'];
    /**
    * Quantity reserved for orders
    */
    reservedQuantity?: TableReadRecord['reservedQuantity'];
    /**
    * Minimum stock level before reorder
    */
    reorderLevel?: TableReadRecord['reorderLevel'];
    /**
    * Date when last restocked
    */
    lastRestocked?: TableReadRecord['lastRestocked'];
    /**
    * Supplier information in JSON format
    */
    supplierInfo?: TableReadRecord['supplierInfo'];
    /**
    * Array of warehouse locations
    */
    warehouseLocations?: TableReadRecord['warehouseLocations'];
    /**
    * Timestamp when inventory was last updated
    */
    updatedAt?: TableReadRecord['updatedAt'];
}

/**
 * Insert record (casing transformed) for the "public.inventory" table.
 */
export interface InventoryInsertRecord {
    /**
    * ID of the product
    */
    productId: TableInsertRecord['productId'];
    /**
    * Current stock quantity
    * @default: 0
    */
    stockQuantity: TableInsertRecord['stockQuantity'];
    /**
    * Quantity reserved for orders
    * @default: 0
    */
    reservedQuantity?: TableInsertRecord['reservedQuantity'];
    /**
    * Minimum stock level before reorder
    * @default: 10
    */
    reorderLevel?: TableInsertRecord['reorderLevel'];
    /**
    * Date when last restocked
    */
    lastRestocked?: TableInsertRecord['lastRestocked'];
    /**
    * Supplier information in JSON format
    */
    supplierInfo?: TableInsertRecord['supplierInfo'];
    /**
    * Array of warehouse locations
    */
    warehouseLocations?: TableInsertRecord['warehouseLocations'];
    /**
    * Timestamp when inventory was last updated
    * @default: now()
    */
    updatedAt?: TableInsertRecord['updatedAt'];
}

/**
 * Updatable record (casing transformed) for the "public.inventory" table.
 */
export type InventoryUpdateRecord = Partial<InventoryInsertRecord>;

