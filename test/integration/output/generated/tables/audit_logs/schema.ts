// This file is auto-generated by zod-pg. Do not edit this file directly.

import { z } from 'zod';


/**
 * The base read schema for the "public.audit_logs" table.
 * This schema is used to validate the data read from the database without any transformations.
 */
export const AuditLogsTableReadSchema = z.object({
    /**
    * dataType: int8
    * defaultValue: nextval('audit_logs_id_seq'::regclass)
    */
    id: z.number().int(),
    /**
    * dataType: int4
    * defaultValue: 
    */
    user_id: z.number().int().nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    action: z.string(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    table_name: z.string().nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: int4
    * defaultValue: 
    */
    record_id: z.number().int().nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: jsonb
    * defaultValue: 
    */
    old_values: z.any().nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: jsonb
    * defaultValue: 
    */
    new_values: z.any().nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: timestamptz
    * defaultValue: now()
    */
    created_at: z.date().nullish().transform((value) => value ?? undefined).optional(),
});

/**
 * The base record type for the "public.audit_logs" table.
 * This type represents the raw database record without any transformations.
 */
export type AuditLogReadBaseRecord = z.output<typeof AuditLogsTableReadSchema>;

/**
* The read transform function for the "public.audit_logs" table.
* Maps the raw database fields to expected property names. e.g snake_case to camelCase.
*/
export const transformAuditLogReadRecord = (data: AuditLogReadBaseRecord): {
    id: AuditLogReadBaseRecord['id'],
    userId?: AuditLogReadBaseRecord['user_id'],
    action: AuditLogReadBaseRecord['action'],
    tableName?: AuditLogReadBaseRecord['table_name'],
    recordId?: AuditLogReadBaseRecord['record_id'],
    oldValues?: AuditLogReadBaseRecord['old_values'],
    newValues?: AuditLogReadBaseRecord['new_values'],
    createdAt?: AuditLogReadBaseRecord['created_at'],
} => ({
    id: data.id,
    userId: data.user_id,
    action: data.action,
    tableName: data.table_name,
    recordId: data.record_id,
    oldValues: data.old_values,
    newValues: data.new_values,
    createdAt: data.created_at,
});

/**
 * The read schema for the "public.audit_logs" table.
 * This schema is used to validate the data read from the database with transformations.
 */
export const AuditLogsTableSchema = AuditLogsTableReadSchema.transform(transformAuditLogReadRecord);

/**
 * The base write schema for the "public.audit_logs" table.
 * This schema is used to validate the data before writing to the database without any transformations.
 */
export const AuditLogsTableWriteSchema = z.object({
    /**
    * dataType: int4
    * defaultValue: 
    */
    userId: z.number().int().nullish().optional(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    action: z.string().max(50),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    tableName: z.string().max(50).nullish().optional(),
    /**
    * dataType: int4
    * defaultValue: 
    */
    recordId: z.number().int().nullish().optional(),
    /**
    * dataType: jsonb
    * defaultValue: 
    */
    oldValues: z.any().nullish().transform((value) => value ? JSON.stringify(value) : value).optional(),
    /**
    * dataType: jsonb
    * defaultValue: 
    */
    newValues: z.any().nullish().transform((value) => value ? JSON.stringify(value) : value).optional(),
    /**
    * dataType: timestamptz
    * defaultValue: now()
    */
    createdAt: z.date().nullish().optional(),
});

/**
 * The base record type for the "public.audit_logs" table.
 * This type represents an insertable database record before casing transformations are applied.
 */
export type AuditLogInsertBaseRecord = z.output<typeof AuditLogsTableWriteSchema>;

/**
 * The base record type for the "public.audit_logs" table.
 * This type represents an updatable database record before casing transformations are applied.
 */
export type AuditLogUpdateBaseRecord = Partial<AuditLogInsertBaseRecord>;

/**
 * The insert transform function for the "public.audit_logs" table.
 * Maps the expected property names to raw database fields. e.g camelCase to snake_case.
 */
export const transformAuditLogInsertRecord = (data: AuditLogInsertBaseRecord): {
    user_id?: AuditLogInsertBaseRecord['userId'],
    action: AuditLogInsertBaseRecord['action'],
    table_name?: AuditLogInsertBaseRecord['tableName'],
    record_id?: AuditLogInsertBaseRecord['recordId'],
    old_values?: AuditLogInsertBaseRecord['oldValues'],
    new_values?: AuditLogInsertBaseRecord['newValues'],
    created_at?: AuditLogInsertBaseRecord['createdAt'],
} => ({
    user_id: data.userId,
    action: data.action,
    table_name: data.tableName,
    record_id: data.recordId,
    old_values: data.oldValues,
    new_values: data.newValues,
    created_at: data.createdAt,
});

/**
 * The update transform function for the "public.audit_logs" table.
 * Maps the expected property names to raw database fields. e.g camelCase to snake_case.
 */
export const transformAuditLogUpdateRecord = (data: AuditLogUpdateBaseRecord): {
    user_id?: AuditLogUpdateBaseRecord['userId'],
    action: AuditLogUpdateBaseRecord['action'],
    table_name?: AuditLogUpdateBaseRecord['tableName'],
    record_id?: AuditLogUpdateBaseRecord['recordId'],
    old_values?: AuditLogUpdateBaseRecord['oldValues'],
    new_values?: AuditLogUpdateBaseRecord['newValues'],
    created_at?: AuditLogUpdateBaseRecord['createdAt'],
} => ({
    user_id: data.userId,
    action: data.action,
    table_name: data.tableName,
    record_id: data.recordId,
    old_values: data.oldValues,
    new_values: data.newValues,
    created_at: data.createdAt,
});

/**
 * The insert schema for the "public.audit_logs" table.
 * This schema is used to validate and transform a record before inserting into the database.
 */
export const AuditLogsTableInsertSchema = AuditLogsTableWriteSchema.transform(transformAuditLogInsertRecord);

/**
 * The update schema for the "public.audit_logs" table.
 * This schema is used to validate and transform a record before updating the database.
 */
export const AuditLogsTableUpdateSchema = AuditLogsTableWriteSchema.partial().transform(transformAuditLogUpdateRecord);

type TableInsertRecord = z.input<typeof AuditLogsTableInsertSchema>;
type TableReadRecord = z.output<typeof AuditLogsTableSchema>;

/**
* Represents a database record from the "public.audit_logs" table.
*/
export interface AuditLogRecord {
    /**
    * Primary key for audit logs table
    */
    id: TableReadRecord['id'];
    /**
    * ID of the user who performed the action
    */
    userId?: TableReadRecord['userId'];
    /**
    * Type of action performed
    */
    action: TableReadRecord['action'];
    /**
    * Name of the table affected
    */
    tableName?: TableReadRecord['tableName'];
    /**
    * ID of the record affected
    */
    recordId?: TableReadRecord['recordId'];
    /**
    * Previous values before the change
    */
    oldValues?: TableReadRecord['oldValues'];
    /**
    * New values after the change
    */
    newValues?: TableReadRecord['newValues'];
    /**
    * Timestamp when the action was performed
    */
    createdAt?: TableReadRecord['createdAt'];
}

/**
* Represents an insertable database record from the "public.audit_logs" table.
*/
export interface AuditLogInsertRecord {
    /**
    * ID of the user who performed the action
    */
    userId?: TableInsertRecord['userId'];
    /**
    * Type of action performed
    * @maxLen: 50
    */
    action: TableInsertRecord['action'];
    /**
    * Name of the table affected
    * @maxLen: 50
    */
    tableName?: TableInsertRecord['tableName'];
    /**
    * ID of the record affected
    */
    recordId?: TableInsertRecord['recordId'];
    /**
    * Previous values before the change
    */
    oldValues?: TableInsertRecord['oldValues'];
    /**
    * New values after the change
    */
    newValues?: TableInsertRecord['newValues'];
    /**
    * Timestamp when the action was performed
    * @default: now()
    */
    createdAt?: TableInsertRecord['createdAt'];
}

/**
* Represents an updateable database record from the "public.audit_logs" table.
*/
export type AuditLogUpdateRecord = Partial<AuditLogInsertRecord>;
