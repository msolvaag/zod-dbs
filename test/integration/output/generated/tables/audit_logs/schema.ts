// This file is auto-generated by zod-pg. Do not edit this file directly.

import { z } from 'zod';


/**
 * Base read schema for the "public.audit_logs" table.
 * Validates raw rows read from the database (no casing transforms applied yet).
 */
export const AuditLogsTableBaseSchema = z.object({
     /**
      * dataType: int8
      * defaultValue: nextval('audit_logs_id_seq'::regclass)
      */
    id: z.number().int(),
     /**
      * dataType: int4
      */
    user_id: z.number().int().nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: varchar
      */
    action: z.string(),
     /**
      * dataType: varchar
      */
    table_name: z.string().nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: int4
      */
    record_id: z.number().int().nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: jsonb
      */
    old_values: z.any().nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: jsonb
      */
    new_values: z.any().nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: timestamptz
      * defaultValue: now()
      */
    created_at: z.coerce.date().nullish().transform((value) => value ?? undefined).optional(),
});

/**
 * The base record type for the "public.audit_logs" table.
 * This type represents the raw database record without case transforms.
 */
export type AuditLogBaseRecord = z.output<typeof AuditLogsTableBaseSchema>;

/**
 * Read transform for the "public.audit_logs" table.
 * Maps database fields to app case properties.
 */
export const transformAuditLogBaseRecord = (data: AuditLogBaseRecord): {
    id: AuditLogBaseRecord['id'],
    userId?: AuditLogBaseRecord['user_id'],
    action: AuditLogBaseRecord['action'],
    tableName?: AuditLogBaseRecord['table_name'],
    recordId?: AuditLogBaseRecord['record_id'],
    oldValues?: AuditLogBaseRecord['old_values'],
    newValues?: AuditLogBaseRecord['new_values'],
    createdAt?: AuditLogBaseRecord['created_at'],
} => ({
    id: data.id,
    userId: data.user_id,
    action: data.action,
    tableName: data.table_name,
    recordId: data.record_id,
    oldValues: data.old_values,
    newValues: data.new_values,
    createdAt: data.created_at,
});

/**
 * Read schema for the "public.audit_logs" table (after casing transform).
 */
export const AuditLogsTableSchema = AuditLogsTableBaseSchema.transform(transformAuditLogBaseRecord);

/**
 * Base insert/write schema for the "public.audit_logs" table (no casing transforms).
 */
export const AuditLogsTableInsertBaseSchema = z.object({
     /**
      * dataType: int4
      */
    userId: z.number().int().nullish().optional(),
     /**
      * dataType: varchar
      */
    action: z.string().max(50),
     /**
      * dataType: varchar
      */
    tableName: z.string().max(50).nullish().optional(),
     /**
      * dataType: int4
      */
    recordId: z.number().int().nullish().optional(),
     /**
      * dataType: jsonb
      */
    oldValues: z.any().nullish().transform((value) => value ? JSON.stringify(value) : value).optional(),
     /**
      * dataType: jsonb
      */
    newValues: z.any().nullish().transform((value) => value ? JSON.stringify(value) : value).optional(),
     /**
      * dataType: timestamptz
      * defaultValue: now()
      */
    createdAt: z.date().nullish().optional(),
});

/**
 * The base record type for the "public.audit_logs" table.
 * This type represents an insertable database record before casing transformations are applied.
 */
export type AuditLogInsertBaseRecord = z.output<typeof AuditLogsTableInsertBaseSchema>;

/**
 * The base record type for the "public.audit_logs" table.
 * This type represents an updatable database record before casing transformations are applied.
 */
export type AuditLogUpdateBaseRecord = Partial<AuditLogInsertBaseRecord>;

/**
 * Insert transform for the "public.audit_logs" table.
 * Maps app cased properties to database fields.
 */
export const transformAuditLogInsertBaseRecord = (data: AuditLogInsertBaseRecord): {
    user_id?: AuditLogInsertBaseRecord['userId'],
    action: AuditLogInsertBaseRecord['action'],
    table_name?: AuditLogInsertBaseRecord['tableName'],
    record_id?: AuditLogInsertBaseRecord['recordId'],
    old_values?: AuditLogInsertBaseRecord['oldValues'],
    new_values?: AuditLogInsertBaseRecord['newValues'],
    created_at?: AuditLogInsertBaseRecord['createdAt'],
} => ({
    user_id: data.userId,
    action: data.action,
    table_name: data.tableName,
    record_id: data.recordId,
    old_values: data.oldValues,
    new_values: data.newValues,
    created_at: data.createdAt,
});

/**
 * Update transform for the "public.audit_logs" table.
 * Maps app cased properties to database fields.
 */
export const transformAuditLogUpdateBaseRecord = (data: AuditLogUpdateBaseRecord): {
    user_id?: AuditLogUpdateBaseRecord['userId'],
    action: AuditLogUpdateBaseRecord['action'],
    table_name?: AuditLogUpdateBaseRecord['tableName'],
    record_id?: AuditLogUpdateBaseRecord['recordId'],
    old_values?: AuditLogUpdateBaseRecord['oldValues'],
    new_values?: AuditLogUpdateBaseRecord['newValues'],
    created_at?: AuditLogUpdateBaseRecord['createdAt'],
} => ({
    user_id: data.userId,
    action: data.action,
    table_name: data.tableName,
    record_id: data.recordId,
    old_values: data.oldValues,
    new_values: data.newValues,
    created_at: data.createdAt,
});

/**
 * Insert schema for the "public.audit_logs" table (after casing transform).
 */
export const AuditLogsTableInsertSchema = AuditLogsTableInsertBaseSchema.transform(transformAuditLogInsertBaseRecord);

/**
 * Update schema for the "public.audit_logs" table (after casing transform).
 */
export const AuditLogsTableUpdateSchema = AuditLogsTableInsertBaseSchema.partial().transform(transformAuditLogUpdateBaseRecord);

type TableInsertRecord = z.input<typeof AuditLogsTableInsertSchema>;
type TableReadRecord = z.output<typeof AuditLogsTableSchema>;

/**
 * Read record (casing transformed) for the "public.audit_logs" table.
 */
export interface AuditLogRecord {
    /**
    * Primary key for audit logs table
    */
    id: TableReadRecord['id'];
    /**
    * ID of the user who performed the action
    */
    userId?: TableReadRecord['userId'];
    /**
    * Type of action performed
    */
    action: TableReadRecord['action'];
    /**
    * Name of the table affected
    */
    tableName?: TableReadRecord['tableName'];
    /**
    * ID of the record affected
    */
    recordId?: TableReadRecord['recordId'];
    /**
    * Previous values before the change
    */
    oldValues?: TableReadRecord['oldValues'];
    /**
    * New values after the change
    */
    newValues?: TableReadRecord['newValues'];
    /**
    * Timestamp when the action was performed
    */
    createdAt?: TableReadRecord['createdAt'];
}

/**
 * Insert record (casing transformed) for the "public.audit_logs" table.
 */
export interface AuditLogInsertRecord {
    /**
    * ID of the user who performed the action
    */
    userId?: TableInsertRecord['userId'];
    /**
    * Type of action performed
    * @maxLen: 50
    */
    action: TableInsertRecord['action'];
    /**
    * Name of the table affected
    * @maxLen: 50
    */
    tableName?: TableInsertRecord['tableName'];
    /**
    * ID of the record affected
    */
    recordId?: TableInsertRecord['recordId'];
    /**
    * Previous values before the change
    */
    oldValues?: TableInsertRecord['oldValues'];
    /**
    * New values after the change
    */
    newValues?: TableInsertRecord['newValues'];
    /**
    * Timestamp when the action was performed
    * @default: now()
    */
    createdAt?: TableInsertRecord['createdAt'];
}

/**
 * Updatable record (casing transformed) for the "public.audit_logs" table.
 */
export type AuditLogUpdateRecord = Partial<AuditLogInsertRecord>;

