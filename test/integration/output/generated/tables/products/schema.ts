// This file is auto-generated by zod-pg. Do not edit this file directly.

import { z } from 'zod';


/**
 * The base read schema for the "public.products" table.
 * This schema is used to validate the data read from the database without any transformations.
 */
export const ProductsTableReadSchema = z.object({
    /**
    * dataType: int4
    * defaultValue: nextval('products_id_seq'::regclass)
    */
    id: z.number().int(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    name: z.string(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    sku: z.string(),
    /**
    * dataType: numeric
    * defaultValue: 
    */
    price: z.number(),
    /**
    * dataType: numeric
    * defaultValue: 
    */
    cost: z.number().nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: float4
    * defaultValue: 
    */
    weight: z.number().nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: point
    * defaultValue: 
    */
    dimensions: z.string().nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: bool
    * defaultValue: true
    */
    is_active: z.boolean().nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: bpchar
    * defaultValue: 
    */
    barcode: z.string().nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: text
    * defaultValue: 
    */
    description: z.string().nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: timestamptz
    * defaultValue: now()
    */
    created_at: z.date().nullish().transform((value) => value ?? undefined).optional(),
});

/**
 * The base record type for the "public.products" table.
 * This type represents the raw database record without any transformations.
 */
export type ProductReadBaseRecord = z.output<typeof ProductsTableReadSchema>;

/**
* The read transform function for the "public.products" table.
* Maps the raw database fields to expected property names. e.g snake_case to camelCase.
*/
export const transformProductReadRecord = (data: ProductReadBaseRecord): {
    id: ProductReadBaseRecord['id'],
    name: ProductReadBaseRecord['name'],
    sku: ProductReadBaseRecord['sku'],
    price: ProductReadBaseRecord['price'],
    cost?: ProductReadBaseRecord['cost'],
    weight?: ProductReadBaseRecord['weight'],
    dimensions?: ProductReadBaseRecord['dimensions'],
    isActive?: ProductReadBaseRecord['is_active'],
    barcode?: ProductReadBaseRecord['barcode'],
    description?: ProductReadBaseRecord['description'],
    createdAt?: ProductReadBaseRecord['created_at'],
} => ({
    id: data.id,
    name: data.name,
    sku: data.sku,
    price: data.price,
    cost: data.cost,
    weight: data.weight,
    dimensions: data.dimensions,
    isActive: data.is_active,
    barcode: data.barcode,
    description: data.description,
    createdAt: data.created_at,
});

/**
 * The read schema for the "public.products" table.
 * This schema is used to validate the data read from the database with transformations.
 */
export const ProductsTableSchema = ProductsTableReadSchema.transform(transformProductReadRecord);

/**
 * The base write schema for the "public.products" table.
 * This schema is used to validate the data before writing to the database without any transformations.
 */
export const ProductsTableWriteSchema = z.object({
    /**
    * dataType: varchar
    * defaultValue: 
    */
    name: z.string().max(255),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    sku: z.string().max(50),
    /**
    * dataType: numeric
    * defaultValue: 
    */
    price: z.number().max(655362),
    /**
    * dataType: numeric
    * defaultValue: 
    */
    cost: z.number().max(655362).nullish().optional(),
    /**
    * dataType: float4
    * defaultValue: 
    */
    weight: z.number().nullish().optional(),
    /**
    * dataType: point
    * defaultValue: 
    */
    dimensions: z.string().nullish().optional(),
    /**
    * dataType: bool
    * defaultValue: true
    */
    isActive: z.boolean().nullish().optional(),
    /**
    * dataType: bpchar
    * defaultValue: 
    */
    barcode: z.string().max(13).nullish().optional(),
    /**
    * dataType: text
    * defaultValue: 
    */
    description: z.string().nullish().optional(),
    /**
    * dataType: timestamptz
    * defaultValue: now()
    */
    createdAt: z.date().nullish().optional(),
});

/**
 * The base record type for the "public.products" table.
 * This type represents an insertable database record before casing transformations are applied.
 */
export type ProductInsertBaseRecord = z.output<typeof ProductsTableWriteSchema>;

/**
 * The base record type for the "public.products" table.
 * This type represents an updatable database record before casing transformations are applied.
 */
export type ProductUpdateBaseRecord = Partial<ProductInsertBaseRecord>;

/**
 * The insert transform function for the "public.products" table.
 * Maps the expected property names to raw database fields. e.g camelCase to snake_case.
 */
export const transformProductInsertRecord = (data: ProductInsertBaseRecord): {
    name: ProductInsertBaseRecord['name'],
    sku: ProductInsertBaseRecord['sku'],
    price: ProductInsertBaseRecord['price'],
    cost?: ProductInsertBaseRecord['cost'],
    weight?: ProductInsertBaseRecord['weight'],
    dimensions?: ProductInsertBaseRecord['dimensions'],
    is_active?: ProductInsertBaseRecord['isActive'],
    barcode?: ProductInsertBaseRecord['barcode'],
    description?: ProductInsertBaseRecord['description'],
    created_at?: ProductInsertBaseRecord['createdAt'],
} => ({
    name: data.name,
    sku: data.sku,
    price: data.price,
    cost: data.cost,
    weight: data.weight,
    dimensions: data.dimensions,
    is_active: data.isActive,
    barcode: data.barcode,
    description: data.description,
    created_at: data.createdAt,
});

/**
 * The update transform function for the "public.products" table.
 * Maps the expected property names to raw database fields. e.g camelCase to snake_case.
 */
export const transformProductUpdateRecord = (data: ProductUpdateBaseRecord): {
    name: ProductUpdateBaseRecord['name'],
    sku: ProductUpdateBaseRecord['sku'],
    price: ProductUpdateBaseRecord['price'],
    cost?: ProductUpdateBaseRecord['cost'],
    weight?: ProductUpdateBaseRecord['weight'],
    dimensions?: ProductUpdateBaseRecord['dimensions'],
    is_active?: ProductUpdateBaseRecord['isActive'],
    barcode?: ProductUpdateBaseRecord['barcode'],
    description?: ProductUpdateBaseRecord['description'],
    created_at?: ProductUpdateBaseRecord['createdAt'],
} => ({
    name: data.name,
    sku: data.sku,
    price: data.price,
    cost: data.cost,
    weight: data.weight,
    dimensions: data.dimensions,
    is_active: data.isActive,
    barcode: data.barcode,
    description: data.description,
    created_at: data.createdAt,
});

/**
 * The insert schema for the "public.products" table.
 * This schema is used to validate and transform a record before inserting into the database.
 */
export const ProductsTableInsertSchema = ProductsTableWriteSchema.transform(transformProductInsertRecord);

/**
 * The update schema for the "public.products" table.
 * This schema is used to validate and transform a record before updating the database.
 */
export const ProductsTableUpdateSchema = ProductsTableWriteSchema.partial().transform(transformProductUpdateRecord);

type TableInsertRecord = z.input<typeof ProductsTableInsertSchema>;
type TableReadRecord = z.output<typeof ProductsTableSchema>;

/**
* Represents a database record from the "public.products" table.
*/
export interface ProductRecord {
    /**
    * Primary key for products table
    */
    id: TableReadRecord['id'];
    /**
    * Product name
    */
    name: TableReadRecord['name'];
    /**
    * Stock keeping unit identifier
    */
    sku: TableReadRecord['sku'];
    /**
    * Product price with 2 decimal precision
    */
    price: TableReadRecord['price'];
    /**
    * Product cost with 2 decimal precision
    */
    cost?: TableReadRecord['cost'];
    /**
    * Product weight in kilograms
    */
    weight?: TableReadRecord['weight'];
    /**
    * Product dimensions as geometric point
    */
    dimensions?: TableReadRecord['dimensions'];
    /**
    * Whether the product is active
    */
    isActive?: TableReadRecord['isActive'];
    /**
    * Product barcode (13 characters)
    */
    barcode?: TableReadRecord['barcode'];
    /**
    * Product description
    */
    description?: TableReadRecord['description'];
    /**
    * Timestamp when product was created
    */
    createdAt?: TableReadRecord['createdAt'];
}

/**
* Represents an insertable database record from the "public.products" table.
*/
export interface ProductInsertRecord {
    /**
    * Product name
    * @maxLen: 255
    */
    name: TableInsertRecord['name'];
    /**
    * Stock keeping unit identifier
    * @maxLen: 50
    */
    sku: TableInsertRecord['sku'];
    /**
    * Product price with 2 decimal precision
    * @maxLen: 655362
    */
    price: TableInsertRecord['price'];
    /**
    * Product cost with 2 decimal precision
    * @maxLen: 655362
    */
    cost?: TableInsertRecord['cost'];
    /**
    * Product weight in kilograms
    */
    weight?: TableInsertRecord['weight'];
    /**
    * Product dimensions as geometric point
    */
    dimensions?: TableInsertRecord['dimensions'];
    /**
    * Whether the product is active
    * @default: true
    */
    isActive?: TableInsertRecord['isActive'];
    /**
    * Product barcode (13 characters)
    * @maxLen: 13
    */
    barcode?: TableInsertRecord['barcode'];
    /**
    * Product description
    */
    description?: TableInsertRecord['description'];
    /**
    * Timestamp when product was created
    * @default: now()
    */
    createdAt?: TableInsertRecord['createdAt'];
}

/**
* Represents an updateable database record from the "public.products" table.
*/
export type ProductUpdateRecord = Partial<ProductInsertRecord>;
