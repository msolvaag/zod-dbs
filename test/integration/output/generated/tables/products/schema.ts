// This file is auto-generated by zod-pg. Do not edit this file directly.

import { z } from 'zod';


/**
 * Base read schema for the "public.products" table.
 * Validates raw rows read from the database (no casing transforms applied yet).
 */
export const ProductsTableBaseSchema = z.object({
     /**
      * dataType: int4
      * defaultValue: nextval('products_id_seq'::regclass)
      */
    id: z.number().int(),
     /**
      * dataType: varchar
      */
    name: z.string(),
     /**
      * dataType: varchar
      */
    sku: z.string(),
     /**
      * dataType: numeric
      */
    price: z.number(),
     /**
      * dataType: numeric
      */
    cost: z.number().nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: float4
      */
    weight: z.number().nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: point
      */
    dimensions: z.string().nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: bool
      * defaultValue: true
      */
    is_active: z.boolean().nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: bpchar
      */
    barcode: z.string().nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: text
      */
    description: z.string().nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: timestamptz
      * defaultValue: now()
      */
    created_at: z.coerce.date().nullish().transform((value) => value ?? undefined).optional(),
});

/**
 * The base record type for the "public.products" table.
 * This type represents the raw database record without case transforms.
 */
export type ProductBaseRecord = z.output<typeof ProductsTableBaseSchema>;

/**
 * Read transform for the "public.products" table.
 * Maps database fields to app case properties.
 */
export const transformProductBaseRecord = (data: ProductBaseRecord): {
    id: ProductBaseRecord['id'],
    name: ProductBaseRecord['name'],
    sku: ProductBaseRecord['sku'],
    price: ProductBaseRecord['price'],
    cost?: ProductBaseRecord['cost'],
    weight?: ProductBaseRecord['weight'],
    dimensions?: ProductBaseRecord['dimensions'],
    isActive?: ProductBaseRecord['is_active'],
    barcode?: ProductBaseRecord['barcode'],
    description?: ProductBaseRecord['description'],
    createdAt?: ProductBaseRecord['created_at'],
} => ({
    id: data.id,
    name: data.name,
    sku: data.sku,
    price: data.price,
    cost: data.cost,
    weight: data.weight,
    dimensions: data.dimensions,
    isActive: data.is_active,
    barcode: data.barcode,
    description: data.description,
    createdAt: data.created_at,
});

/**
 * Read schema for the "public.products" table (after casing transform).
 */
export const ProductsTableSchema = ProductsTableBaseSchema.transform(transformProductBaseRecord);

/**
 * Base insert/write schema for the "public.products" table (no casing transforms).
 */
export const ProductsTableInsertBaseSchema = z.object({
     /**
      * dataType: varchar
      */
    name: z.string().max(255),
     /**
      * dataType: varchar
      */
    sku: z.string().max(50),
     /**
      * dataType: numeric
      */
    price: z.number().max(655362),
     /**
      * dataType: numeric
      */
    cost: z.number().max(655362).nullish().optional(),
     /**
      * dataType: float4
      */
    weight: z.number().nullish().optional(),
     /**
      * dataType: point
      */
    dimensions: z.string().nullish().optional(),
     /**
      * dataType: bool
      * defaultValue: true
      */
    isActive: z.boolean().nullish().optional(),
     /**
      * dataType: bpchar
      */
    barcode: z.string().max(13).nullish().optional(),
     /**
      * dataType: text
      */
    description: z.string().nullish().optional(),
     /**
      * dataType: timestamptz
      * defaultValue: now()
      */
    createdAt: z.date().nullish().optional(),
});

/**
 * The base record type for the "public.products" table.
 * This type represents an insertable database record before casing transformations are applied.
 */
export type ProductInsertBaseRecord = z.output<typeof ProductsTableInsertBaseSchema>;

/**
 * The base record type for the "public.products" table.
 * This type represents an updatable database record before casing transformations are applied.
 */
export type ProductUpdateBaseRecord = Partial<ProductInsertBaseRecord>;

/**
 * Insert transform for the "public.products" table.
 * Maps app cased properties to database fields.
 */
export const transformProductInsertBaseRecord = (data: ProductInsertBaseRecord): {
    name: ProductInsertBaseRecord['name'],
    sku: ProductInsertBaseRecord['sku'],
    price: ProductInsertBaseRecord['price'],
    cost?: ProductInsertBaseRecord['cost'],
    weight?: ProductInsertBaseRecord['weight'],
    dimensions?: ProductInsertBaseRecord['dimensions'],
    is_active?: ProductInsertBaseRecord['isActive'],
    barcode?: ProductInsertBaseRecord['barcode'],
    description?: ProductInsertBaseRecord['description'],
    created_at?: ProductInsertBaseRecord['createdAt'],
} => ({
    name: data.name,
    sku: data.sku,
    price: data.price,
    cost: data.cost,
    weight: data.weight,
    dimensions: data.dimensions,
    is_active: data.isActive,
    barcode: data.barcode,
    description: data.description,
    created_at: data.createdAt,
});

/**
 * Update transform for the "public.products" table.
 * Maps app cased properties to database fields.
 */
export const transformProductUpdateBaseRecord = (data: ProductUpdateBaseRecord): {
    name: ProductUpdateBaseRecord['name'],
    sku: ProductUpdateBaseRecord['sku'],
    price: ProductUpdateBaseRecord['price'],
    cost?: ProductUpdateBaseRecord['cost'],
    weight?: ProductUpdateBaseRecord['weight'],
    dimensions?: ProductUpdateBaseRecord['dimensions'],
    is_active?: ProductUpdateBaseRecord['isActive'],
    barcode?: ProductUpdateBaseRecord['barcode'],
    description?: ProductUpdateBaseRecord['description'],
    created_at?: ProductUpdateBaseRecord['createdAt'],
} => ({
    name: data.name,
    sku: data.sku,
    price: data.price,
    cost: data.cost,
    weight: data.weight,
    dimensions: data.dimensions,
    is_active: data.isActive,
    barcode: data.barcode,
    description: data.description,
    created_at: data.createdAt,
});

/**
 * Insert schema for the "public.products" table (after casing transform).
 */
export const ProductsTableInsertSchema = ProductsTableInsertBaseSchema.transform(transformProductInsertBaseRecord);

/**
 * Update schema for the "public.products" table (after casing transform).
 */
export const ProductsTableUpdateSchema = ProductsTableInsertBaseSchema.partial().transform(transformProductUpdateBaseRecord);

type TableInsertRecord = z.input<typeof ProductsTableInsertSchema>;
type TableReadRecord = z.output<typeof ProductsTableSchema>;

/**
 * Read record (casing transformed) for the "public.products" table.
 */
export interface ProductRecord {
    /**
    * Primary key for products table
    */
    id: TableReadRecord['id'];
    /**
    * Product name
    */
    name: TableReadRecord['name'];
    /**
    * Stock keeping unit identifier
    */
    sku: TableReadRecord['sku'];
    /**
    * Product price with 2 decimal precision
    */
    price: TableReadRecord['price'];
    /**
    * Product cost with 2 decimal precision
    */
    cost?: TableReadRecord['cost'];
    /**
    * Product weight in kilograms
    */
    weight?: TableReadRecord['weight'];
    /**
    * Product dimensions as geometric point
    */
    dimensions?: TableReadRecord['dimensions'];
    /**
    * Whether the product is active
    */
    isActive?: TableReadRecord['isActive'];
    /**
    * Product barcode (13 characters)
    */
    barcode?: TableReadRecord['barcode'];
    /**
    * Product description
    */
    description?: TableReadRecord['description'];
    /**
    * Timestamp when product was created
    */
    createdAt?: TableReadRecord['createdAt'];
}

/**
 * Insert record (casing transformed) for the "public.products" table.
 */
export interface ProductInsertRecord {
    /**
    * Product name
    * @maxLen: 255
    */
    name: TableInsertRecord['name'];
    /**
    * Stock keeping unit identifier
    * @maxLen: 50
    */
    sku: TableInsertRecord['sku'];
    /**
    * Product price with 2 decimal precision
    * @maxLen: 655362
    */
    price: TableInsertRecord['price'];
    /**
    * Product cost with 2 decimal precision
    * @maxLen: 655362
    */
    cost?: TableInsertRecord['cost'];
    /**
    * Product weight in kilograms
    */
    weight?: TableInsertRecord['weight'];
    /**
    * Product dimensions as geometric point
    */
    dimensions?: TableInsertRecord['dimensions'];
    /**
    * Whether the product is active
    * @default: true
    */
    isActive?: TableInsertRecord['isActive'];
    /**
    * Product barcode (13 characters)
    * @maxLen: 13
    */
    barcode?: TableInsertRecord['barcode'];
    /**
    * Product description
    */
    description?: TableInsertRecord['description'];
    /**
    * Timestamp when product was created
    * @default: now()
    */
    createdAt?: TableInsertRecord['createdAt'];
}

/**
 * Updatable record (casing transformed) for the "public.products" table.
 */
export type ProductUpdateRecord = Partial<ProductInsertRecord>;

