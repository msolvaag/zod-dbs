// This file is auto-generated by zod-pg. Do not edit this file directly.

import { z } from 'zod';


export const TimeSeriesTableSchema = z.object({
    /**
    * dataType: int8
    * defaultValue: nextval('time_series_id_seq'::regclass)
    */
    id: z.int(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    sensor_id: z.string(),
    /**
    * dataType: timestamptz
    * defaultValue: 
    */
    timestamp: z.date(),
    /**
    * dataType: numeric
    * defaultValue: 
    */
    temperature: z.number().nullable(),
    /**
    * dataType: numeric
    * defaultValue: 
    */
    humidity: z.number().nullable(),
    /**
    * dataType: numeric
    * defaultValue: 
    */
    pressure: z.number().nullable(),
    /**
    * dataType: _numeric
    * defaultValue: 
    */
    readings: z.array(z.number()).nullable(),
    /**
    * dataType: bool
    * defaultValue: false
    */
    anomaly_detected: z.boolean().nullable(),
    /**
    * dataType: int2
    * defaultValue: 
    */
    data_quality: z.int().nullable(),
    /**
    * dataType: timestamptz
    * defaultValue: now()
    */
    created_at: z.date().nullable(),
}).transform(data => ({
    id: data.id,
    sensorId: data.sensor_id,
    timestamp: data.timestamp,
    temperature: data.temperature ?? undefined,
    humidity: data.humidity ?? undefined,
    pressure: data.pressure ?? undefined,
    readings: data.readings ?? undefined,
    anomalyDetected: data.anomaly_detected ?? undefined,
    dataQuality: data.data_quality ?? undefined,
    createdAt: data.created_at ?? undefined,
}));

const TableWriteSchema = z.object({
    /**
    * dataType: varchar
    * defaultValue: 
    */
    sensorId: z.string().max(50),
    /**
    * dataType: timestamptz
    * defaultValue: 
    */
    timestamp: z.date(),
    /**
    * dataType: numeric
    * defaultValue: 
    */
    temperature: z.number().nullish(),
    /**
    * dataType: numeric
    * defaultValue: 
    */
    humidity: z.number().nullish(),
    /**
    * dataType: numeric
    * defaultValue: 
    */
    pressure: z.number().nullish(),
    /**
    * dataType: _numeric
    * defaultValue: 
    */
    readings: z.array(z.number()).nullish(),
    /**
    * dataType: bool
    * defaultValue: false
    */
    anomalyDetected: z.boolean().nullish(),
    /**
    * dataType: int2
    * defaultValue: 
    */
    dataQuality: z.int().nullish(),
    /**
    * dataType: timestamptz
    * defaultValue: now()
    */
    createdAt: z.date().nullish(),
});

export const TimeSeriesTableInsertSchema = TableWriteSchema.transform(data => ({
    sensor_id: data.sensorId,
    timestamp: data.timestamp,
    temperature: data.temperature,
    humidity: data.humidity,
    pressure: data.pressure,
    readings: data.readings,
    anomaly_detected: data.anomalyDetected,
    data_quality: data.dataQuality,
    created_at: data.createdAt,
}));

export const TimeSeriesTableUpdateSchema = TableWriteSchema.partial().transform(data => ({
    sensor_id: data.sensorId,
    timestamp: data.timestamp,
    temperature: data.temperature,
    humidity: data.humidity,
    pressure: data.pressure,
    readings: data.readings,
    anomaly_detected: data.anomalyDetected,
    data_quality: data.dataQuality,
    created_at: data.createdAt,
}));

type TableReadRecord = z.output<typeof TimeSeriesTableSchema>;
type TableInsertRecord = z.input<typeof TimeSeriesTableInsertSchema>;



/**
* Represents a database record from the "public.time_series" table.
*/
export interface TimeSeryRecord {
    /**
     * Primary key for time series table
     */
    id: TableReadRecord['id'];
    /**
     * Identifier of the sensor
     */
    sensorId: TableReadRecord['sensorId'];
    /**
     * Timestamp of the reading
     */
    timestamp: TableReadRecord['timestamp'];
    /**
     * Temperature reading
     */
    temperature: TableReadRecord['temperature'];
    /**
     * Humidity reading
     */
    humidity: TableReadRecord['humidity'];
    /**
     * Pressure reading
     */
    pressure: TableReadRecord['pressure'];
    /**
     * Array of numeric readings
     */
    readings: TableReadRecord['readings'];
    /**
     * Whether an anomaly was detected
     */
    anomalyDetected: TableReadRecord['anomalyDetected'];
    /**
     * Data quality score (1-10)
     */
    dataQuality: TableReadRecord['dataQuality'];
    /**
     * Timestamp when record was created
     */
    createdAt: TableReadRecord['createdAt'];
}

/**
* Represents an insertable database record from the "public.time_series" table.
*/
export interface TimeSeryInsertRecord {
    /**
    * Identifier of the sensor
    * @maxLen: 50
    */
    sensorId: TableInsertRecord['sensorId'];
    /**
    * Timestamp of the reading
    */
    timestamp: TableInsertRecord['timestamp'];
    /**
    * Temperature reading
    */
    temperature?: TableInsertRecord['temperature'];
    /**
    * Humidity reading
    */
    humidity?: TableInsertRecord['humidity'];
    /**
    * Pressure reading
    */
    pressure?: TableInsertRecord['pressure'];
    /**
    * Array of numeric readings
    */
    readings?: TableInsertRecord['readings'];
    /**
    * Whether an anomaly was detected
    * @default: false
    */
    anomalyDetected?: TableInsertRecord['anomalyDetected'];
    /**
    * Data quality score (1-10)
    */
    dataQuality?: TableInsertRecord['dataQuality'];
    /**
    * Timestamp when record was created
    * @default: now()
    */
    createdAt?: TableInsertRecord['createdAt'];
}

/**
* Represents an updateable database record from the "public.time_series" table.
*/
export type TimeSeryUpdateRecord = Partial<TimeSeryInsertRecord>;
