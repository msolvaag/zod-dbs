// This file is auto-generated by zod-pg. Do not edit this file directly.

import { z } from 'zod';


/**
 * Base read schema for the "public.files" table.
 * Validates raw rows read from the database (no casing transforms applied yet).
 */
export const FilesTableBaseSchema = z.object({
     /**
      * dataType: uuid
      * defaultValue: gen_random_uuid()
      */
    id: z.string().uuid(),
     /**
      * dataType: varchar
      */
    filename: z.string(),
     /**
      * dataType: text
      */
    file_path: z.string(),
     /**
      * dataType: int8
      */
    file_size: z.number().int(),
     /**
      * dataType: varchar
      */
    mime_type: z.string().nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: bpchar
      */
    checksum: z.string().nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: bytea
      */
    binary_data: z.string().nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: bool
      * defaultValue: false
      */
    is_encrypted: z.boolean().nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: timestamptz
      * defaultValue: now()
      */
    upload_time: z.date().nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: timestamptz
      */
    expiry_date: z.date().nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: jsonb
      */
    metadata: z.any().nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: _text
      */
    tags: z.array(z.string()).nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: int4
      * defaultValue: 0
      */
    access_count: z.number().int().nullish().transform((value) => value ?? undefined).optional(),
});

/**
 * The base record type for the "public.files" table.
 * This type represents the raw database record without case transforms.
 */
export type FileBaseRecord = z.output<typeof FilesTableBaseSchema>;

/**
 * Read transform for the "public.files" table.
 * Maps raw database snake_case fields to camelCase properties.
 */
export const transformFileBaseRecord = (data: FileBaseRecord): {
    id: FileBaseRecord['id'],
    filename: FileBaseRecord['filename'],
    filePath: FileBaseRecord['file_path'],
    fileSize: FileBaseRecord['file_size'],
    mimeType?: FileBaseRecord['mime_type'],
    checksum?: FileBaseRecord['checksum'],
    binaryData?: FileBaseRecord['binary_data'],
    isEncrypted?: FileBaseRecord['is_encrypted'],
    uploadTime?: FileBaseRecord['upload_time'],
    expiryDate?: FileBaseRecord['expiry_date'],
    metadata?: FileBaseRecord['metadata'],
    tags?: FileBaseRecord['tags'],
    accessCount?: FileBaseRecord['access_count'],
} => ({
    id: data.id,
    filename: data.filename,
    filePath: data.file_path,
    fileSize: data.file_size,
    mimeType: data.mime_type,
    checksum: data.checksum,
    binaryData: data.binary_data,
    isEncrypted: data.is_encrypted,
    uploadTime: data.upload_time,
    expiryDate: data.expiry_date,
    metadata: data.metadata,
    tags: data.tags,
    accessCount: data.access_count,
});

/**
 * Read schema for the "public.files" table (after casing transform).
 */
export const FilesTableSchema = FilesTableBaseSchema.transform(transformFileBaseRecord);

/**
 * Base insert/write schema for the "public.files" table (no casing transforms).
 */
export const FilesTableInsertBaseSchema = z.object({
     /**
      * dataType: uuid
      * defaultValue: gen_random_uuid()
      */
    id: z.string().uuid(),
     /**
      * dataType: varchar
      */
    filename: z.string().max(255),
     /**
      * dataType: text
      */
    filePath: z.string(),
     /**
      * dataType: int8
      */
    fileSize: z.number().int(),
     /**
      * dataType: varchar
      */
    mimeType: z.string().max(100).nullish().optional(),
     /**
      * dataType: bpchar
      */
    checksum: z.string().max(64).nullish().optional(),
     /**
      * dataType: bytea
      */
    binaryData: z.string().nullish().optional(),
     /**
      * dataType: bool
      * defaultValue: false
      */
    isEncrypted: z.boolean().nullish().optional(),
     /**
      * dataType: timestamptz
      * defaultValue: now()
      */
    uploadTime: z.date().nullish().optional(),
     /**
      * dataType: timestamptz
      */
    expiryDate: z.date().nullish().optional(),
     /**
      * dataType: jsonb
      */
    metadata: z.any().nullish().transform((value) => value ? JSON.stringify(value) : value).optional(),
     /**
      * dataType: _text
      */
    tags: z.array(z.string()).nullish().optional(),
     /**
      * dataType: int4
      * defaultValue: 0
      */
    accessCount: z.number().int().nullish().optional(),
});

/**
 * The base record type for the "public.files" table.
 * This type represents an insertable database record before casing transformations are applied.
 */
export type FileInsertBaseRecord = z.output<typeof FilesTableInsertBaseSchema>;

/**
 * The base record type for the "public.files" table.
 * This type represents an updatable database record before casing transformations are applied.
 */
export type FileUpdateBaseRecord = Partial<FileInsertBaseRecord>;

/**
 * Insert transform for the "public.files" table.
 * Maps camelCase properties to raw database snake_case fields.
 */
export const transformFileInsertBaseRecord = (data: FileInsertBaseRecord): {
    id: FileInsertBaseRecord['id'],
    filename: FileInsertBaseRecord['filename'],
    file_path: FileInsertBaseRecord['filePath'],
    file_size: FileInsertBaseRecord['fileSize'],
    mime_type?: FileInsertBaseRecord['mimeType'],
    checksum?: FileInsertBaseRecord['checksum'],
    binary_data?: FileInsertBaseRecord['binaryData'],
    is_encrypted?: FileInsertBaseRecord['isEncrypted'],
    upload_time?: FileInsertBaseRecord['uploadTime'],
    expiry_date?: FileInsertBaseRecord['expiryDate'],
    metadata?: FileInsertBaseRecord['metadata'],
    tags?: FileInsertBaseRecord['tags'],
    access_count?: FileInsertBaseRecord['accessCount'],
} => ({
    id: data.id,
    filename: data.filename,
    file_path: data.filePath,
    file_size: data.fileSize,
    mime_type: data.mimeType,
    checksum: data.checksum,
    binary_data: data.binaryData,
    is_encrypted: data.isEncrypted,
    upload_time: data.uploadTime,
    expiry_date: data.expiryDate,
    metadata: data.metadata,
    tags: data.tags,
    access_count: data.accessCount,
});

/**
 * Update transform for the "public.files" table.
 * Maps camelCase properties to raw database snake_case fields.
 */
export const transformFileUpdateBaseRecord = (data: FileUpdateBaseRecord): {
    id: FileUpdateBaseRecord['id'],
    filename: FileUpdateBaseRecord['filename'],
    file_path: FileUpdateBaseRecord['filePath'],
    file_size: FileUpdateBaseRecord['fileSize'],
    mime_type?: FileUpdateBaseRecord['mimeType'],
    checksum?: FileUpdateBaseRecord['checksum'],
    binary_data?: FileUpdateBaseRecord['binaryData'],
    is_encrypted?: FileUpdateBaseRecord['isEncrypted'],
    upload_time?: FileUpdateBaseRecord['uploadTime'],
    expiry_date?: FileUpdateBaseRecord['expiryDate'],
    metadata?: FileUpdateBaseRecord['metadata'],
    tags?: FileUpdateBaseRecord['tags'],
    access_count?: FileUpdateBaseRecord['accessCount'],
} => ({
    id: data.id,
    filename: data.filename,
    file_path: data.filePath,
    file_size: data.fileSize,
    mime_type: data.mimeType,
    checksum: data.checksum,
    binary_data: data.binaryData,
    is_encrypted: data.isEncrypted,
    upload_time: data.uploadTime,
    expiry_date: data.expiryDate,
    metadata: data.metadata,
    tags: data.tags,
    access_count: data.accessCount,
});

/**
 * Insert schema for the "public.files" table (after casing transform).
 */
export const FilesTableInsertSchema = FilesTableInsertBaseSchema.transform(transformFileInsertBaseRecord);

/**
 * Update schema for the "public.files" table (after casing transform).
 */
export const FilesTableUpdateSchema = FilesTableInsertBaseSchema.partial().transform(transformFileUpdateBaseRecord);

type TableInsertRecord = z.input<typeof FilesTableInsertSchema>;
type TableReadRecord = z.output<typeof FilesTableSchema>;

/**
 * Read record (casing transformed) for the "public.files" table.
 */
export interface FileRecord {
    /**
    * Primary key for files table
    */
    id: TableReadRecord['id'];
    /**
    * Original filename
    */
    filename: TableReadRecord['filename'];
    /**
    * Path to the file
    */
    filePath: TableReadRecord['filePath'];
    /**
    * Size of the file in bytes
    */
    fileSize: TableReadRecord['fileSize'];
    /**
    * MIME type of the file
    */
    mimeType?: TableReadRecord['mimeType'];
    /**
    * SHA-256 checksum of the file
    */
    checksum?: TableReadRecord['checksum'];
    /**
    * Binary data of the file
    */
    binaryData?: TableReadRecord['binaryData'];
    /**
    * Whether the file is encrypted
    */
    isEncrypted?: TableReadRecord['isEncrypted'];
    /**
    * Timestamp when file was uploaded
    */
    uploadTime?: TableReadRecord['uploadTime'];
    /**
    * Expiry date of the file
    */
    expiryDate?: TableReadRecord['expiryDate'];
    /**
    * File metadata in JSON format
    */
    metadata?: TableReadRecord['metadata'];
    /**
    * Array of file tags
    */
    tags?: TableReadRecord['tags'];
    /**
    * Number of times file was accessed
    */
    accessCount?: TableReadRecord['accessCount'];
}

/**
 * Insert record (casing transformed) for the "public.files" table.
 */
export interface FileInsertRecord {
    /**
    * Primary key for files table
    * @default: gen_random_uuid()
    */
    id: TableInsertRecord['id'];
    /**
    * Original filename
    * @maxLen: 255
    */
    filename: TableInsertRecord['filename'];
    /**
    * Path to the file
    */
    filePath: TableInsertRecord['filePath'];
    /**
    * Size of the file in bytes
    */
    fileSize: TableInsertRecord['fileSize'];
    /**
    * MIME type of the file
    * @maxLen: 100
    */
    mimeType?: TableInsertRecord['mimeType'];
    /**
    * SHA-256 checksum of the file
    * @maxLen: 64
    */
    checksum?: TableInsertRecord['checksum'];
    /**
    * Binary data of the file
    */
    binaryData?: TableInsertRecord['binaryData'];
    /**
    * Whether the file is encrypted
    * @default: false
    */
    isEncrypted?: TableInsertRecord['isEncrypted'];
    /**
    * Timestamp when file was uploaded
    * @default: now()
    */
    uploadTime?: TableInsertRecord['uploadTime'];
    /**
    * Expiry date of the file
    */
    expiryDate?: TableInsertRecord['expiryDate'];
    /**
    * File metadata in JSON format
    */
    metadata?: TableInsertRecord['metadata'];
    /**
    * Array of file tags
    */
    tags?: TableInsertRecord['tags'];
    /**
    * Number of times file was accessed
    * @default: 0
    */
    accessCount?: TableInsertRecord['accessCount'];
}

/**
 * Updatable record (casing transformed) for the "public.files" table.
 */
export type FileUpdateRecord = Partial<FileInsertRecord>;

