// This file is auto-generated by zod-pg. Do not edit this file directly.

import { z } from 'zod';

export const UserSessionsTableSchema = z.object({
    /**
    * dataType: uuid
    * defaultValue: gen_random_uuid()
    */
    id: z.uuid(),
    /**
    * dataType: int4
    * defaultValue: 
    */
    user_id: z.int().nullable(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    token_hash: z.string(),
    /**
    * dataType: timestamptz
    * defaultValue: 
    */
    expires_at: z.date(),
    /**
    * dataType: timestamptz
    * defaultValue: now()
    */
    created_at: z.date().nullable(),
    /**
    * dataType: timestamptz
    * defaultValue: now()
    */
    last_used_at: z.date().nullable(),
    /**
    * dataType: inet
    * defaultValue: 
    */
    ip_address: z.string().nullable(),
    /**
    * dataType: text
    * defaultValue: 
    */
    user_agent: z.string().nullable(),
}).transform(data => ({
    id: data.id,
    userId: data.user_id ?? undefined,
    tokenHash: data.token_hash,
    expiresAt: data.expires_at,
    createdAt: data.created_at ?? undefined,
    lastUsedAt: data.last_used_at ?? undefined,
    ipAddress: data.ip_address ?? undefined,
    userAgent: data.user_agent ?? undefined,
}));

type TableReadRecord = z.output<typeof UserSessionsTableSchema>;

const TableWriteSchema = z.object({
    /**
    * dataType: uuid
    * defaultValue: gen_random_uuid()
    */
    id: z.uuid(),
    /**
    * dataType: int4
    * defaultValue: 
    */
    userId: z.int().nullish(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    tokenHash: z.string().max(255),
    /**
    * dataType: timestamptz
    * defaultValue: 
    */
    expiresAt: z.date(),
    /**
    * dataType: timestamptz
    * defaultValue: now()
    */
    createdAt: z.date().nullish(),
    /**
    * dataType: timestamptz
    * defaultValue: now()
    */
    lastUsedAt: z.date().nullish(),
    /**
    * dataType: inet
    * defaultValue: 
    */
    ipAddress: z.string().nullish(),
    /**
    * dataType: text
    * defaultValue: 
    */
    userAgent: z.string().nullish(),
});

export const UserSessionsTableInsertSchema = TableWriteSchema.transform(data => ({
    id: data.id,
    user_id: data.userId,
    token_hash: data.tokenHash,
    expires_at: data.expiresAt,
    created_at: data.createdAt,
    last_used_at: data.lastUsedAt,
    ip_address: data.ipAddress,
    user_agent: data.userAgent,
}));

export const UserSessionsTableUpdateSchema = TableWriteSchema.partial().transform(data => ({
    id: data.id,
    user_id: data.userId,
    token_hash: data.tokenHash,
    expires_at: data.expiresAt,
    created_at: data.createdAt,
    last_used_at: data.lastUsedAt,
    ip_address: data.ipAddress,
    user_agent: data.userAgent,
}));

type TableInsertRecord = z.input<typeof UserSessionsTableInsertSchema>;

/**
* Represents a database record from the "public.user_sessions" table.
*/
export interface UserSessionRecord {
    id: TableReadRecord['id'];
    userId: TableReadRecord['userId'];
    tokenHash: TableReadRecord['tokenHash'];
    expiresAt: TableReadRecord['expiresAt'];
    createdAt: TableReadRecord['createdAt'];
    lastUsedAt: TableReadRecord['lastUsedAt'];
    ipAddress: TableReadRecord['ipAddress'];
    userAgent: TableReadRecord['userAgent'];
}

/**
* Represents an insertable database record from the "public.user_sessions" table.
*/
export interface UserSessionInsertRecord {
    /**
    * @default: gen_random_uuid()
    */
    id: TableInsertRecord['id'];
    /**
    */
    userId?: TableInsertRecord['userId'];
    /**
    * @maxLen: 255
    */
    tokenHash: TableInsertRecord['tokenHash'];
    /**
    */
    expiresAt: TableInsertRecord['expiresAt'];
    /**
    * @default: now()
    */
    createdAt?: TableInsertRecord['createdAt'];
    /**
    * @default: now()
    */
    lastUsedAt?: TableInsertRecord['lastUsedAt'];
    /**
    */
    ipAddress?: TableInsertRecord['ipAddress'];
    /**
    */
    userAgent?: TableInsertRecord['userAgent'];
}

/**
* Represents an updateable database record from the "public.user_sessions" table.
*/
export type UserSessionUpdateRecord = Partial<UserSessionInsertRecord>;
