// This file is auto-generated by zod-pg. Do not edit this file directly.

import { z } from 'zod';

export const POST_STATUSES = ['draft','published','archived',] as const;

export const PostsTableSchema = z.object({
    /**
    * dataType: int4
    * defaultValue: nextval('posts_id_seq'::regclass)
    */
    id: z.int(),
    /**
    * dataType: int4
    * defaultValue: 
    */
    user_id: z.int().nullable(),
    /**
    * dataType: text
    * defaultValue: 
    */
    title: z.string(),
    /**
    * dataType: text
    * defaultValue: 
    */
    content: z.string().nullable(),
    /**
    * dataType: bool
    * defaultValue: false
    */
    published: z.boolean().nullable(),
    /**
    * dataType: varchar
    * defaultValue: 'draft'::character varying
    */
    status: z.enum(POST_STATUSES).nullable(),
    /**
    * dataType: int4
    * defaultValue: 0
    */
    views: z.int().nullable(),
    /**
    * dataType: _text
    * defaultValue: 
    */
    tags: z.array(z.string()).nullable(),
    /**
    * dataType: jsonb
    * defaultValue: 
    */
    metadata: z.json().nullable(),
    /**
    * dataType: timestamptz
    * defaultValue: 
    */
    published_at: z.date().nullable(),
    /**
    * dataType: timestamptz
    * defaultValue: now()
    */
    updated_at: z.date().nullable(),
}).transform(data => ({
    id: data.id,
    userId: data.user_id ?? undefined,
    title: data.title,
    content: data.content ?? undefined,
    published: data.published ?? undefined,
    status: data.status ?? undefined,
    views: data.views ?? undefined,
    tags: data.tags ?? undefined,
    metadata: data.metadata ?? undefined,
    publishedAt: data.published_at ?? undefined,
    updatedAt: data.updated_at ?? undefined,
}));

const TableWriteSchema = z.object({
    /**
    * dataType: int4
    * defaultValue: 
    */
    userId: z.int().nullish(),
    /**
    * dataType: text
    * defaultValue: 
    */
    title: z.string(),
    /**
    * dataType: text
    * defaultValue: 
    */
    content: z.string().nullish(),
    /**
    * dataType: bool
    * defaultValue: false
    */
    published: z.boolean().nullish(),
    /**
    * dataType: varchar
    * defaultValue: 'draft'::character varying
    */
    status: z.enum(POST_STATUSES).nullish(),
    /**
    * dataType: int4
    * defaultValue: 0
    */
    views: z.int().nullish(),
    /**
    * dataType: _text
    * defaultValue: 
    */
    tags: z.array(z.string()).nullish(),
    /**
    * dataType: jsonb
    * defaultValue: 
    */
    metadata: z.json().nullish(),
    /**
    * dataType: timestamptz
    * defaultValue: 
    */
    publishedAt: z.date().nullish(),
    /**
    * dataType: timestamptz
    * defaultValue: now()
    */
    updatedAt: z.date().nullish(),
});

export const PostsTableInsertSchema = TableWriteSchema.transform(data => ({
    user_id: data.userId,
    title: data.title,
    content: data.content,
    published: data.published,
    status: data.status,
    views: data.views,
    tags: data.tags,
    metadata: (data.metadata ? JSON.stringify(data.metadata) : data.metadata),
    published_at: data.publishedAt,
    updated_at: data.updatedAt,
}));

export const PostsTableUpdateSchema = TableWriteSchema.partial().transform(data => ({
    user_id: data.userId,
    title: data.title,
    content: data.content,
    published: data.published,
    status: data.status,
    views: data.views,
    tags: data.tags,
    metadata: (data.metadata ? JSON.stringify(data.metadata) : data.metadata),
    published_at: data.publishedAt,
    updated_at: data.updatedAt,
}));

type TableReadRecord = z.output<typeof PostsTableSchema>;
type TableInsertRecord = z.input<typeof PostsTableInsertSchema>;

export type PostStatus = (typeof POST_STATUSES)[number];

/**
* Represents a database record from the "public.posts" table.
*/
export interface PostRecord {
    id: TableReadRecord['id'];
    userId: TableReadRecord['userId'];
    title: TableReadRecord['title'];
    content: TableReadRecord['content'];
    published: TableReadRecord['published'];
    status: TableReadRecord['status'];
    /**
     * Number of views for the post
     */
    views: TableReadRecord['views'];
    /**
     * Array of tags associated with the post
     */
    tags: TableReadRecord['tags'];
    /**
     * Additional metadata for the post
     */
    metadata: TableReadRecord['metadata'];
    /**
     * Timestamp when the post was published
     */
    publishedAt: TableReadRecord['publishedAt'];
    /**
     * Timestamp when the post was last updated
     */
    updatedAt: TableReadRecord['updatedAt'];
}

/**
* Represents an insertable database record from the "public.posts" table.
*/
export interface PostInsertRecord {
    /**
    */
    userId?: TableInsertRecord['userId'];
    /**
    */
    title: TableInsertRecord['title'];
    /**
    */
    content?: TableInsertRecord['content'];
    /**
    * @default: false
    */
    published?: TableInsertRecord['published'];
    /**
    * @maxLen: 20
    * @default: 'draft'::character varying
    */
    status?: TableInsertRecord['status'];
    /**
    * Number of views for the post
    * @default: 0
    */
    views?: TableInsertRecord['views'];
    /**
    * Array of tags associated with the post
    */
    tags?: TableInsertRecord['tags'];
    /**
    * Additional metadata for the post
    */
    metadata?: TableInsertRecord['metadata'];
    /**
    * Timestamp when the post was published
    */
    publishedAt?: TableInsertRecord['publishedAt'];
    /**
    * Timestamp when the post was last updated
    * @default: now()
    */
    updatedAt?: TableInsertRecord['updatedAt'];
}

/**
* Represents an updateable database record from the "public.posts" table.
*/
export type PostUpdateRecord = Partial<PostInsertRecord>;
