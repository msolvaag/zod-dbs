// This file is auto-generated by zod-pg. Do not edit this file directly.

import { z } from 'zod';

export const ENUM_TEST_PRIORITIES = ['low', 'medium', 'high', 'critical'] as const;

export const ENUM_TEST_COLORS = ['red', 'green', 'blue', 'yellow'] as const;

export const ENUM_TEST_SIZES = ['xs', 's', 'm', 'l', 'xl', 'xxl'] as const;

export const ENUM_TEST_GRADES = ['A', 'B', 'C', 'D', 'F'] as const;

export const ENUM_TEST_CATEGORIES = ['electronics', 'clothing', 'books', 'home-garden'] as const;

export const ENUM_TEST_MOODS = ['happy', 'sad', 'angry', 'excited', 'calm'] as const;

export const ENUM_TEST_DIRECTIONS = ['north', 'south', 'east', 'west'] as const;

export const ENUM_TEST_WEATHER_CONDITIONS = ['sunny', 'cloudy', 'rainy', 'snowy', 'foggy'] as const;

export const ENUM_TEST_TASK_STATUSES = ['todo', 'in-progress', 'done', 'cancelled'] as const;

export const ENUM_TEST_DIFFICULTIES = ['1', '2', '3', '4', '5'] as const;

export const ENUM_TEST_WEEKDAYS = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'] as const;

export const ENUM_TEST_PAYMENT_METHODS = ['cash', 'credit-card', 'debit-card', 'paypal', 'bank-transfer'] as const;

export const EnumTestsTableSchema = z.object({
    /**
    * dataType: int4
    * defaultValue: nextval('enum_tests_id_seq'::regclass)
    */
    id: z.int(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    priority: z.enum(ENUM_TEST_PRIORITIES).nullable(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    color: z.enum(ENUM_TEST_COLORS).nullable(),
    /**
    * dataType: text
    * defaultValue: 
    */
    size: z.enum(ENUM_TEST_SIZES).nullable(),
    /**
    * dataType: bpchar
    * defaultValue: 
    */
    grade: z.enum(ENUM_TEST_GRADES).nullable(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    category: z.enum(ENUM_TEST_CATEGORIES).nullable(),
    /**
    * dataType: text
    * defaultValue: 
    */
    mood: z.enum(ENUM_TEST_MOODS).nullable(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    direction: z.enum(ENUM_TEST_DIRECTIONS).nullable(),
    /**
    * dataType: text
    * defaultValue: 
    */
    weather_condition: z.enum(ENUM_TEST_WEATHER_CONDITIONS).nullable(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    task_status: z.enum(ENUM_TEST_TASK_STATUSES).nullable(),
    /**
    * dataType: int4
    * defaultValue: 
    */
    difficulty: z.enum(ENUM_TEST_DIFFICULTIES).nullable(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    weekday: z.enum(ENUM_TEST_WEEKDAYS).nullable(),
    /**
    * dataType: text
    * defaultValue: 
    */
    payment_method: z.enum(ENUM_TEST_PAYMENT_METHODS).nullable(),
    /**
    * dataType: timestamptz
    * defaultValue: now()
    */
    created_at: z.date().nullable(),
}).transform(data => ({
    id: data.id,
    priority: data.priority ?? undefined,
    color: data.color ?? undefined,
    size: data.size ?? undefined,
    grade: data.grade ?? undefined,
    category: data.category ?? undefined,
    mood: data.mood ?? undefined,
    direction: data.direction ?? undefined,
    weatherCondition: data.weather_condition ?? undefined,
    taskStatus: data.task_status ?? undefined,
    difficulty: data.difficulty ?? undefined,
    weekday: data.weekday ?? undefined,
    paymentMethod: data.payment_method ?? undefined,
    createdAt: data.created_at ?? undefined,
}));

type TableReadRecord = z.output<typeof EnumTestsTableSchema>;

const TableWriteSchema = z.object({
    /**
    * dataType: varchar
    * defaultValue: 
    */
    priority: z.enum(ENUM_TEST_PRIORITIES).nullish(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    color: z.enum(ENUM_TEST_COLORS).nullish(),
    /**
    * dataType: text
    * defaultValue: 
    */
    size: z.enum(ENUM_TEST_SIZES).nullish(),
    /**
    * dataType: bpchar
    * defaultValue: 
    */
    grade: z.enum(ENUM_TEST_GRADES).nullish(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    category: z.enum(ENUM_TEST_CATEGORIES).nullish(),
    /**
    * dataType: text
    * defaultValue: 
    */
    mood: z.enum(ENUM_TEST_MOODS).nullish(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    direction: z.enum(ENUM_TEST_DIRECTIONS).nullish(),
    /**
    * dataType: text
    * defaultValue: 
    */
    weatherCondition: z.enum(ENUM_TEST_WEATHER_CONDITIONS).nullish(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    taskStatus: z.enum(ENUM_TEST_TASK_STATUSES).nullish(),
    /**
    * dataType: int4
    * defaultValue: 
    */
    difficulty: z.enum(ENUM_TEST_DIFFICULTIES).nullish(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    weekday: z.enum(ENUM_TEST_WEEKDAYS).nullish(),
    /**
    * dataType: text
    * defaultValue: 
    */
    paymentMethod: z.enum(ENUM_TEST_PAYMENT_METHODS).nullish(),
    /**
    * dataType: timestamptz
    * defaultValue: now()
    */
    createdAt: z.date().nullish(),
});

export const EnumTestsTableInsertSchema = TableWriteSchema.transform(data => ({
    priority: data.priority,
    color: data.color,
    size: data.size,
    grade: data.grade,
    category: data.category,
    mood: data.mood,
    direction: data.direction,
    weather_condition: data.weatherCondition,
    task_status: data.taskStatus,
    difficulty: data.difficulty,
    weekday: data.weekday,
    payment_method: data.paymentMethod,
    created_at: data.createdAt,
}));

export const EnumTestsTableUpdateSchema = TableWriteSchema.partial().transform(data => ({
    priority: data.priority,
    color: data.color,
    size: data.size,
    grade: data.grade,
    category: data.category,
    mood: data.mood,
    direction: data.direction,
    weather_condition: data.weatherCondition,
    task_status: data.taskStatus,
    difficulty: data.difficulty,
    weekday: data.weekday,
    payment_method: data.paymentMethod,
    created_at: data.createdAt,
}));

type TableInsertRecord = z.input<typeof EnumTestsTableInsertSchema>;

export type EnumTestPriority = (typeof ENUM_TEST_PRIORITIES)[number];

export type EnumTestColor = (typeof ENUM_TEST_COLORS)[number];

export type EnumTestSize = (typeof ENUM_TEST_SIZES)[number];

export type EnumTestGrade = (typeof ENUM_TEST_GRADES)[number];

export type EnumTestCategory = (typeof ENUM_TEST_CATEGORIES)[number];

export type EnumTestMood = (typeof ENUM_TEST_MOODS)[number];

export type EnumTestDirection = (typeof ENUM_TEST_DIRECTIONS)[number];

export type EnumTestWeatherCondition = (typeof ENUM_TEST_WEATHER_CONDITIONS)[number];

export type EnumTestTaskStatus = (typeof ENUM_TEST_TASK_STATUSES)[number];

export type EnumTestDifficulty = (typeof ENUM_TEST_DIFFICULTIES)[number];

export type EnumTestWeekday = (typeof ENUM_TEST_WEEKDAYS)[number];

export type EnumTestPaymentMethod = (typeof ENUM_TEST_PAYMENT_METHODS)[number];

/**
* Represents a database record from the "public.enum_tests" table.
*/
export interface EnumTestRecord {
    id: TableReadRecord['id'];
    priority: TableReadRecord['priority'];
    color: TableReadRecord['color'];
    size: TableReadRecord['size'];
    grade: TableReadRecord['grade'];
    category: TableReadRecord['category'];
    mood: TableReadRecord['mood'];
    direction: TableReadRecord['direction'];
    weatherCondition: TableReadRecord['weatherCondition'];
    taskStatus: TableReadRecord['taskStatus'];
    difficulty: TableReadRecord['difficulty'];
    weekday: TableReadRecord['weekday'];
    paymentMethod: TableReadRecord['paymentMethod'];
    createdAt: TableReadRecord['createdAt'];
}

/**
* Represents an insertable database record from the "public.enum_tests" table.
*/
export interface EnumTestInsertRecord {
    /**
    * @maxLen: 10
    */
    priority?: TableInsertRecord['priority'];
    /**
    * @maxLen: 20
    */
    color?: TableInsertRecord['color'];
    /**
    */
    size?: TableInsertRecord['size'];
    /**
    * @maxLen: 1
    */
    grade?: TableInsertRecord['grade'];
    /**
    * @maxLen: 30
    */
    category?: TableInsertRecord['category'];
    /**
    */
    mood?: TableInsertRecord['mood'];
    /**
    * @maxLen: 10
    */
    direction?: TableInsertRecord['direction'];
    /**
    */
    weatherCondition?: TableInsertRecord['weatherCondition'];
    /**
    * @maxLen: 20
    */
    taskStatus?: TableInsertRecord['taskStatus'];
    /**
    */
    difficulty?: TableInsertRecord['difficulty'];
    /**
    * @maxLen: 10
    */
    weekday?: TableInsertRecord['weekday'];
    /**
    */
    paymentMethod?: TableInsertRecord['paymentMethod'];
    /**
    * @default: now()
    */
    createdAt?: TableInsertRecord['createdAt'];
}

/**
* Represents an updateable database record from the "public.enum_tests" table.
*/
export type EnumTestUpdateRecord = Partial<EnumTestInsertRecord>;
