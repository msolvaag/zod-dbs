// This file is auto-generated by zod-pg. Do not edit this file directly.

import { z } from 'zod';


/**
 * The base read schema for the "public.categories" table.
 * This schema is used to validate the data read from the database without any transformations.
 */
export const CategoriesTableReadSchema = z.object({
    /**
    * dataType: int4
    * defaultValue: nextval('categories_id_seq'::regclass)
    */
    id: z.number().int(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    name: z.string(),
    /**
    * dataType: text
    * defaultValue: 
    */
    description: z.string().nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    color: z.string().nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: timestamptz
    * defaultValue: now()
    */
    created_at: z.date().nullish().transform((value) => value ?? undefined).optional(),
});

/**
 * The base record type for the "public.categories" table.
 * This type represents the raw database record without any transformations.
 */
export type CategoryReadBaseRecord = z.output<typeof CategoriesTableReadSchema>;

/**
* The read transform function for the "public.categories" table.
* Maps the raw database fields to expected property names. e.g snake_case to camelCase.
*/
export const transformCategoryReadRecord = (data: CategoryReadBaseRecord): {
    id: CategoryReadBaseRecord['id'],
    name: CategoryReadBaseRecord['name'],
    description?: CategoryReadBaseRecord['description'],
    color?: CategoryReadBaseRecord['color'],
    createdAt?: CategoryReadBaseRecord['created_at'],
} => ({
    id: data.id,
    name: data.name,
    description: data.description,
    color: data.color,
    createdAt: data.created_at,
});

/**
 * The read schema for the "public.categories" table.
 * This schema is used to validate the data read from the database with transformations.
 */
export const CategoriesTableSchema = CategoriesTableReadSchema.transform(transformCategoryReadRecord);

/**
 * The base write schema for the "public.categories" table.
 * This schema is used to validate the data before writing to the database without any transformations.
 */
export const CategoriesTableWriteSchema = z.object({
    /**
    * dataType: varchar
    * defaultValue: 
    */
    name: z.string().max(100),
    /**
    * dataType: text
    * defaultValue: 
    */
    description: z.string().nullish().optional(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    color: z.string().max(7).nullish().optional(),
    /**
    * dataType: timestamptz
    * defaultValue: now()
    */
    createdAt: z.date().nullish().optional(),
});

/**
 * The base record type for the "public.categories" table.
 * This type represents an insertable database record before casing transformations are applied.
 */
export type CategoryInsertBaseRecord = z.output<typeof CategoriesTableWriteSchema>;

/**
 * The base record type for the "public.categories" table.
 * This type represents an updatable database record before casing transformations are applied.
 */
export type CategoryUpdateBaseRecord = Partial<CategoryInsertBaseRecord>;

/**
 * The insert transform function for the "public.categories" table.
 * Maps the expected property names to raw database fields. e.g camelCase to snake_case.
 */
export const transformCategoryInsertRecord = (data: CategoryInsertBaseRecord): {
    name: CategoryInsertBaseRecord['name'],
    description?: CategoryInsertBaseRecord['description'],
    color?: CategoryInsertBaseRecord['color'],
    created_at?: CategoryInsertBaseRecord['createdAt'],
} => ({
    name: data.name,
    description: data.description,
    color: data.color,
    created_at: data.createdAt,
});

/**
 * The update transform function for the "public.categories" table.
 * Maps the expected property names to raw database fields. e.g camelCase to snake_case.
 */
export const transformCategoryUpdateRecord = (data: CategoryUpdateBaseRecord): {
    name: CategoryUpdateBaseRecord['name'],
    description?: CategoryUpdateBaseRecord['description'],
    color?: CategoryUpdateBaseRecord['color'],
    created_at?: CategoryUpdateBaseRecord['createdAt'],
} => ({
    name: data.name,
    description: data.description,
    color: data.color,
    created_at: data.createdAt,
});

/**
 * The insert schema for the "public.categories" table.
 * This schema is used to validate and transform a record before inserting into the database.
 */
export const CategoriesTableInsertSchema = CategoriesTableWriteSchema.transform(transformCategoryInsertRecord);

/**
 * The update schema for the "public.categories" table.
 * This schema is used to validate and transform a record before updating the database.
 */
export const CategoriesTableUpdateSchema = CategoriesTableWriteSchema.partial().transform(transformCategoryUpdateRecord);

type TableInsertRecord = z.input<typeof CategoriesTableInsertSchema>;
type TableReadRecord = z.output<typeof CategoriesTableSchema>;

/**
* Represents a database record from the "public.categories" table.
*/
export interface CategoryRecord {
    /**
    * Primary key for categories table
    */
    id: TableReadRecord['id'];
    /**
    * Name of the category
    */
    name: TableReadRecord['name'];
    /**
    * Description of the category
    */
    description?: TableReadRecord['description'];
    /**
    * Hex color code for the category
    */
    color?: TableReadRecord['color'];
    /**
    * Timestamp when the category was created
    */
    createdAt?: TableReadRecord['createdAt'];
}

/**
* Represents an insertable database record from the "public.categories" table.
*/
export interface CategoryInsertRecord {
    /**
    * Name of the category
    * @maxLen: 100
    */
    name: TableInsertRecord['name'];
    /**
    * Description of the category
    */
    description?: TableInsertRecord['description'];
    /**
    * Hex color code for the category
    * @maxLen: 7
    */
    color?: TableInsertRecord['color'];
    /**
    * Timestamp when the category was created
    * @default: now()
    */
    createdAt?: TableInsertRecord['createdAt'];
}

/**
* Represents an updateable database record from the "public.categories" table.
*/
export type CategoryUpdateRecord = Partial<CategoryInsertRecord>;
