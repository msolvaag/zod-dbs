// This file is auto-generated by zod-pg. Do not edit this file directly.

import { z } from 'zod';


/**
 * Base read schema for the "public.categories" table.
 * Validates raw rows read from the database (no casing transforms applied yet).
 */
export const CategoriesTableBaseSchema = z.object({
     /**
      * dataType: int4
      * defaultValue: nextval('categories_id_seq'::regclass)
      */
    id: z.number().int(),
     /**
      * dataType: varchar
      */
    name: z.string(),
     /**
      * dataType: text
      */
    description: z.string().nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: varchar
      */
    color: z.string().nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: timestamptz
      * defaultValue: now()
      */
    created_at: z.coerce.date().nullish().transform((value) => value ?? undefined).optional(),
});

/**
 * The base record type for the "public.categories" table.
 * This type represents the raw database record without case transforms.
 */
export type CategoryBaseRecord = z.output<typeof CategoriesTableBaseSchema>;

/**
 * Read transform for the "public.categories" table.
 * Maps database fields to app case properties.
 */
export const transformCategoryBaseRecord = (data: CategoryBaseRecord): {
    id: CategoryBaseRecord['id'],
    name: CategoryBaseRecord['name'],
    description?: CategoryBaseRecord['description'],
    color?: CategoryBaseRecord['color'],
    createdAt?: CategoryBaseRecord['created_at'],
} => ({
    id: data.id,
    name: data.name,
    description: data.description,
    color: data.color,
    createdAt: data.created_at,
});

/**
 * Read schema for the "public.categories" table (after casing transform).
 */
export const CategoriesTableSchema = CategoriesTableBaseSchema.transform(transformCategoryBaseRecord);

/**
 * Base insert/write schema for the "public.categories" table (no casing transforms).
 */
export const CategoriesTableInsertBaseSchema = z.object({
     /**
      * dataType: varchar
      */
    name: z.string().max(100),
     /**
      * dataType: text
      */
    description: z.string().nullish().optional(),
     /**
      * dataType: varchar
      */
    color: z.string().max(7).nullish().optional(),
     /**
      * dataType: timestamptz
      * defaultValue: now()
      */
    createdAt: z.date().nullish().optional(),
});

/**
 * The base record type for the "public.categories" table.
 * This type represents an insertable database record before casing transformations are applied.
 */
export type CategoryInsertBaseRecord = z.output<typeof CategoriesTableInsertBaseSchema>;

/**
 * The base record type for the "public.categories" table.
 * This type represents an updatable database record before casing transformations are applied.
 */
export type CategoryUpdateBaseRecord = Partial<CategoryInsertBaseRecord>;

/**
 * Insert transform for the "public.categories" table.
 * Maps app cased properties to database fields.
 */
export const transformCategoryInsertBaseRecord = (data: CategoryInsertBaseRecord): {
    name: CategoryInsertBaseRecord['name'],
    description?: CategoryInsertBaseRecord['description'],
    color?: CategoryInsertBaseRecord['color'],
    created_at?: CategoryInsertBaseRecord['createdAt'],
} => ({
    name: data.name,
    description: data.description,
    color: data.color,
    created_at: data.createdAt,
});

/**
 * Update transform for the "public.categories" table.
 * Maps app cased properties to database fields.
 */
export const transformCategoryUpdateBaseRecord = (data: CategoryUpdateBaseRecord): {
    name: CategoryUpdateBaseRecord['name'],
    description?: CategoryUpdateBaseRecord['description'],
    color?: CategoryUpdateBaseRecord['color'],
    created_at?: CategoryUpdateBaseRecord['createdAt'],
} => ({
    name: data.name,
    description: data.description,
    color: data.color,
    created_at: data.createdAt,
});

/**
 * Insert schema for the "public.categories" table (after casing transform).
 */
export const CategoriesTableInsertSchema = CategoriesTableInsertBaseSchema.transform(transformCategoryInsertBaseRecord);

/**
 * Update schema for the "public.categories" table (after casing transform).
 */
export const CategoriesTableUpdateSchema = CategoriesTableInsertBaseSchema.partial().transform(transformCategoryUpdateBaseRecord);

type TableInsertRecord = z.input<typeof CategoriesTableInsertSchema>;
type TableReadRecord = z.output<typeof CategoriesTableSchema>;

/**
 * Read record (casing transformed) for the "public.categories" table.
 */
export interface CategoryRecord {
    /**
    * Primary key for categories table
    */
    id: TableReadRecord['id'];
    /**
    * Name of the category
    */
    name: TableReadRecord['name'];
    /**
    * Description of the category
    */
    description?: TableReadRecord['description'];
    /**
    * Hex color code for the category
    */
    color?: TableReadRecord['color'];
    /**
    * Timestamp when the category was created
    */
    createdAt?: TableReadRecord['createdAt'];
}

/**
 * Insert record (casing transformed) for the "public.categories" table.
 */
export interface CategoryInsertRecord {
    /**
    * Name of the category
    * @maxLen: 100
    */
    name: TableInsertRecord['name'];
    /**
    * Description of the category
    */
    description?: TableInsertRecord['description'];
    /**
    * Hex color code for the category
    * @maxLen: 7
    */
    color?: TableInsertRecord['color'];
    /**
    * Timestamp when the category was created
    * @default: now()
    */
    createdAt?: TableInsertRecord['createdAt'];
}

/**
 * Updatable record (casing transformed) for the "public.categories" table.
 */
export type CategoryUpdateRecord = Partial<CategoryInsertRecord>;

