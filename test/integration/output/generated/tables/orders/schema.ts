// This file is auto-generated by zod-pg. Do not edit this file directly.

import { z } from 'zod';


/**
 * The base read schema for the "public.orders" table.
 * This schema is used to validate the data read from the database without any transformations.
 */
export const OrdersTableReadSchema = z.object({
    /**
    * dataType: int8
    * defaultValue: nextval('orders_id_seq'::regclass)
    */
    id: z.number().int(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    order_number: z.string(),
    /**
    * dataType: int4
    * defaultValue: 
    */
    user_id: z.number().int().nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: order_status
    * defaultValue: 'pending'::order_status
    */
    status: z.any().nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: money
    * defaultValue: 
    */
    total_amount: z.number(),
    /**
    * dataType: money
    * defaultValue: 0
    */
    tax_amount: z.number().nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: money
    * defaultValue: 0
    */
    shipping_cost: z.number().nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: date
    * defaultValue: CURRENT_DATE
    */
    order_date: z.date().nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: date
    * defaultValue: 
    */
    shipped_date: z.date().nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: time
    * defaultValue: 
    */
    delivery_time: z.string().nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: _text
    * defaultValue: 
    */
    notes: z.array(z.string()).nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: jsonb
    * defaultValue: 
    */
    metadata: z.any().nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: timestamptz
    * defaultValue: now()
    */
    created_at: z.date().nullish().transform((value) => value ?? undefined).optional(),
});

/**
 * The base record type for the "public.orders" table.
 * This type represents the raw database record without any transformations.
 */
export type OrderReadBaseRecord = z.output<typeof OrdersTableReadSchema>;

/**
* The read transform function for the "public.orders" table.
* Maps the raw database fields to expected property names. e.g snake_case to camelCase.
*/
export const transformOrderReadRecord = (data: OrderReadBaseRecord): {
    id: OrderReadBaseRecord['id'],
    orderNumber: OrderReadBaseRecord['order_number'],
    userId?: OrderReadBaseRecord['user_id'],
    status?: OrderReadBaseRecord['status'],
    totalAmount: OrderReadBaseRecord['total_amount'],
    taxAmount?: OrderReadBaseRecord['tax_amount'],
    shippingCost?: OrderReadBaseRecord['shipping_cost'],
    orderDate?: OrderReadBaseRecord['order_date'],
    shippedDate?: OrderReadBaseRecord['shipped_date'],
    deliveryTime?: OrderReadBaseRecord['delivery_time'],
    notes?: OrderReadBaseRecord['notes'],
    metadata?: OrderReadBaseRecord['metadata'],
    createdAt?: OrderReadBaseRecord['created_at'],
} => ({
    id: data.id,
    orderNumber: data.order_number,
    userId: data.user_id,
    status: data.status,
    totalAmount: data.total_amount,
    taxAmount: data.tax_amount,
    shippingCost: data.shipping_cost,
    orderDate: data.order_date,
    shippedDate: data.shipped_date,
    deliveryTime: data.delivery_time,
    notes: data.notes,
    metadata: data.metadata,
    createdAt: data.created_at,
});

/**
 * The read schema for the "public.orders" table.
 * This schema is used to validate the data read from the database with transformations.
 */
export const OrdersTableSchema = OrdersTableReadSchema.transform(transformOrderReadRecord);

/**
 * The base write schema for the "public.orders" table.
 * This schema is used to validate the data before writing to the database without any transformations.
 */
export const OrdersTableWriteSchema = z.object({
    /**
    * dataType: varchar
    * defaultValue: 
    */
    orderNumber: z.string().max(20),
    /**
    * dataType: int4
    * defaultValue: 
    */
    userId: z.number().int().nullish().optional(),
    /**
    * dataType: order_status
    * defaultValue: 'pending'::order_status
    */
    status: z.any().nullish().optional(),
    /**
    * dataType: money
    * defaultValue: 
    */
    totalAmount: z.number(),
    /**
    * dataType: money
    * defaultValue: 0
    */
    taxAmount: z.number().nullish().optional(),
    /**
    * dataType: money
    * defaultValue: 0
    */
    shippingCost: z.number().nullish().optional(),
    /**
    * dataType: date
    * defaultValue: CURRENT_DATE
    */
    orderDate: z.date().nullish().optional(),
    /**
    * dataType: date
    * defaultValue: 
    */
    shippedDate: z.date().nullish().optional(),
    /**
    * dataType: time
    * defaultValue: 
    */
    deliveryTime: z.string().nullish().optional(),
    /**
    * dataType: _text
    * defaultValue: 
    */
    notes: z.array(z.string()).nullish().optional(),
    /**
    * dataType: jsonb
    * defaultValue: 
    */
    metadata: z.any().nullish().transform((value) => value ? JSON.stringify(value) : value).optional(),
    /**
    * dataType: timestamptz
    * defaultValue: now()
    */
    createdAt: z.date().nullish().optional(),
});

/**
 * The base record type for the "public.orders" table.
 * This type represents an insertable database record before casing transformations are applied.
 */
export type OrderInsertBaseRecord = z.output<typeof OrdersTableWriteSchema>;

/**
 * The base record type for the "public.orders" table.
 * This type represents an updatable database record before casing transformations are applied.
 */
export type OrderUpdateBaseRecord = Partial<OrderInsertBaseRecord>;

/**
 * The insert transform function for the "public.orders" table.
 * Maps the expected property names to raw database fields. e.g camelCase to snake_case.
 */
export const transformOrderInsertRecord = (data: OrderInsertBaseRecord): {
    order_number: OrderInsertBaseRecord['orderNumber'],
    user_id?: OrderInsertBaseRecord['userId'],
    status?: OrderInsertBaseRecord['status'],
    total_amount: OrderInsertBaseRecord['totalAmount'],
    tax_amount?: OrderInsertBaseRecord['taxAmount'],
    shipping_cost?: OrderInsertBaseRecord['shippingCost'],
    order_date?: OrderInsertBaseRecord['orderDate'],
    shipped_date?: OrderInsertBaseRecord['shippedDate'],
    delivery_time?: OrderInsertBaseRecord['deliveryTime'],
    notes?: OrderInsertBaseRecord['notes'],
    metadata?: OrderInsertBaseRecord['metadata'],
    created_at?: OrderInsertBaseRecord['createdAt'],
} => ({
    order_number: data.orderNumber,
    user_id: data.userId,
    status: data.status,
    total_amount: data.totalAmount,
    tax_amount: data.taxAmount,
    shipping_cost: data.shippingCost,
    order_date: data.orderDate,
    shipped_date: data.shippedDate,
    delivery_time: data.deliveryTime,
    notes: data.notes,
    metadata: data.metadata,
    created_at: data.createdAt,
});

/**
 * The update transform function for the "public.orders" table.
 * Maps the expected property names to raw database fields. e.g camelCase to snake_case.
 */
export const transformOrderUpdateRecord = (data: OrderUpdateBaseRecord): {
    order_number: OrderUpdateBaseRecord['orderNumber'],
    user_id?: OrderUpdateBaseRecord['userId'],
    status?: OrderUpdateBaseRecord['status'],
    total_amount: OrderUpdateBaseRecord['totalAmount'],
    tax_amount?: OrderUpdateBaseRecord['taxAmount'],
    shipping_cost?: OrderUpdateBaseRecord['shippingCost'],
    order_date?: OrderUpdateBaseRecord['orderDate'],
    shipped_date?: OrderUpdateBaseRecord['shippedDate'],
    delivery_time?: OrderUpdateBaseRecord['deliveryTime'],
    notes?: OrderUpdateBaseRecord['notes'],
    metadata?: OrderUpdateBaseRecord['metadata'],
    created_at?: OrderUpdateBaseRecord['createdAt'],
} => ({
    order_number: data.orderNumber,
    user_id: data.userId,
    status: data.status,
    total_amount: data.totalAmount,
    tax_amount: data.taxAmount,
    shipping_cost: data.shippingCost,
    order_date: data.orderDate,
    shipped_date: data.shippedDate,
    delivery_time: data.deliveryTime,
    notes: data.notes,
    metadata: data.metadata,
    created_at: data.createdAt,
});

/**
 * The insert schema for the "public.orders" table.
 * This schema is used to validate and transform a record before inserting into the database.
 */
export const OrdersTableInsertSchema = OrdersTableWriteSchema.transform(transformOrderInsertRecord);

/**
 * The update schema for the "public.orders" table.
 * This schema is used to validate and transform a record before updating the database.
 */
export const OrdersTableUpdateSchema = OrdersTableWriteSchema.partial().transform(transformOrderUpdateRecord);

type TableInsertRecord = z.input<typeof OrdersTableInsertSchema>;
type TableReadRecord = z.output<typeof OrdersTableSchema>;

/**
* Represents a database record from the "public.orders" table.
*/
export interface OrderRecord {
    /**
    * Primary key for orders table
    */
    id: TableReadRecord['id'];
    /**
    * Unique order number
    */
    orderNumber: TableReadRecord['orderNumber'];
    /**
    * ID of the user who placed the order
    */
    userId?: TableReadRecord['userId'];
    /**
    * Current status of the order
    */
    status?: TableReadRecord['status'];
    /**
    * Total order amount
    */
    totalAmount: TableReadRecord['totalAmount'];
    /**
    * Tax amount for the order
    */
    taxAmount?: TableReadRecord['taxAmount'];
    /**
    * Shipping cost for the order
    */
    shippingCost?: TableReadRecord['shippingCost'];
    /**
    * Date when order was placed
    */
    orderDate?: TableReadRecord['orderDate'];
    /**
    * Date when order was shipped
    */
    shippedDate?: TableReadRecord['shippedDate'];
    /**
    * Expected delivery time
    */
    deliveryTime?: TableReadRecord['deliveryTime'];
    /**
    * Array of order notes
    */
    notes?: TableReadRecord['notes'];
    /**
    * Additional order metadata
    */
    metadata?: TableReadRecord['metadata'];
    /**
    * Timestamp when order was created
    */
    createdAt?: TableReadRecord['createdAt'];
}

/**
* Represents an insertable database record from the "public.orders" table.
*/
export interface OrderInsertRecord {
    /**
    * Unique order number
    * @maxLen: 20
    */
    orderNumber: TableInsertRecord['orderNumber'];
    /**
    * ID of the user who placed the order
    */
    userId?: TableInsertRecord['userId'];
    /**
    * Current status of the order
    * @default: 'pending'::order_status
    */
    status?: TableInsertRecord['status'];
    /**
    * Total order amount
    */
    totalAmount: TableInsertRecord['totalAmount'];
    /**
    * Tax amount for the order
    * @default: 0
    */
    taxAmount?: TableInsertRecord['taxAmount'];
    /**
    * Shipping cost for the order
    * @default: 0
    */
    shippingCost?: TableInsertRecord['shippingCost'];
    /**
    * Date when order was placed
    * @default: CURRENT_DATE
    */
    orderDate?: TableInsertRecord['orderDate'];
    /**
    * Date when order was shipped
    */
    shippedDate?: TableInsertRecord['shippedDate'];
    /**
    * Expected delivery time
    */
    deliveryTime?: TableInsertRecord['deliveryTime'];
    /**
    * Array of order notes
    */
    notes?: TableInsertRecord['notes'];
    /**
    * Additional order metadata
    */
    metadata?: TableInsertRecord['metadata'];
    /**
    * Timestamp when order was created
    * @default: now()
    */
    createdAt?: TableInsertRecord['createdAt'];
}

/**
* Represents an updateable database record from the "public.orders" table.
*/
export type OrderUpdateRecord = Partial<OrderInsertRecord>;
