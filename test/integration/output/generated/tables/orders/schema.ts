// This file is auto-generated by zod-pg. Do not edit this file directly.

import { z } from 'zod';


/**
 * Base read schema for the "public.orders" table.
 * Validates raw rows read from the database (no casing transforms applied yet).
 */
export const OrdersTableBaseSchema = z.object({
     /**
      * dataType: int8
      * defaultValue: nextval('orders_id_seq'::regclass)
      */
    id: z.number().int(),
     /**
      * dataType: varchar
      */
    order_number: z.string(),
     /**
      * dataType: int4
      */
    user_id: z.number().int().nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: order_status
      * defaultValue: 'pending'::order_status
      */
    status: z.any().nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: money
      */
    total_amount: z.number(),
     /**
      * dataType: money
      * defaultValue: 0
      */
    tax_amount: z.number().nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: money
      * defaultValue: 0
      */
    shipping_cost: z.number().nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: date
      * defaultValue: CURRENT_DATE
      */
    order_date: z.date().nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: date
      */
    shipped_date: z.date().nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: time
      */
    delivery_time: z.string().nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: _text
      */
    notes: z.array(z.string()).nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: jsonb
      */
    metadata: z.any().nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: timestamptz
      * defaultValue: now()
      */
    created_at: z.date().nullish().transform((value) => value ?? undefined).optional(),
});

/**
 * The base record type for the "public.orders" table.
 * This type represents the raw database record without case transforms.
 */
export type OrderBaseRecord = z.output<typeof OrdersTableBaseSchema>;

/**
 * Read transform for the "public.orders" table.
 * Maps raw database snake_case fields to camelCase properties.
 */
export const transformOrderBaseRecord = (data: OrderBaseRecord): {
    id: OrderBaseRecord['id'],
    orderNumber: OrderBaseRecord['order_number'],
    userId?: OrderBaseRecord['user_id'],
    status?: OrderBaseRecord['status'],
    totalAmount: OrderBaseRecord['total_amount'],
    taxAmount?: OrderBaseRecord['tax_amount'],
    shippingCost?: OrderBaseRecord['shipping_cost'],
    orderDate?: OrderBaseRecord['order_date'],
    shippedDate?: OrderBaseRecord['shipped_date'],
    deliveryTime?: OrderBaseRecord['delivery_time'],
    notes?: OrderBaseRecord['notes'],
    metadata?: OrderBaseRecord['metadata'],
    createdAt?: OrderBaseRecord['created_at'],
} => ({
    id: data.id,
    orderNumber: data.order_number,
    userId: data.user_id,
    status: data.status,
    totalAmount: data.total_amount,
    taxAmount: data.tax_amount,
    shippingCost: data.shipping_cost,
    orderDate: data.order_date,
    shippedDate: data.shipped_date,
    deliveryTime: data.delivery_time,
    notes: data.notes,
    metadata: data.metadata,
    createdAt: data.created_at,
});

/**
 * Read schema for the "public.orders" table (after casing transform).
 */
export const OrdersTableSchema = OrdersTableBaseSchema.transform(transformOrderBaseRecord);

/**
 * Base insert/write schema for the "public.orders" table (no casing transforms).
 */
export const OrdersTableInsertBaseSchema = z.object({
     /**
      * dataType: varchar
      */
    orderNumber: z.string().max(20),
     /**
      * dataType: int4
      */
    userId: z.number().int().nullish().optional(),
     /**
      * dataType: order_status
      * defaultValue: 'pending'::order_status
      */
    status: z.any().nullish().optional(),
     /**
      * dataType: money
      */
    totalAmount: z.number(),
     /**
      * dataType: money
      * defaultValue: 0
      */
    taxAmount: z.number().nullish().optional(),
     /**
      * dataType: money
      * defaultValue: 0
      */
    shippingCost: z.number().nullish().optional(),
     /**
      * dataType: date
      * defaultValue: CURRENT_DATE
      */
    orderDate: z.date().nullish().optional(),
     /**
      * dataType: date
      */
    shippedDate: z.date().nullish().optional(),
     /**
      * dataType: time
      */
    deliveryTime: z.string().nullish().optional(),
     /**
      * dataType: _text
      */
    notes: z.array(z.string()).nullish().optional(),
     /**
      * dataType: jsonb
      */
    metadata: z.any().nullish().transform((value) => value ? JSON.stringify(value) : value).optional(),
     /**
      * dataType: timestamptz
      * defaultValue: now()
      */
    createdAt: z.date().nullish().optional(),
});

/**
 * The base record type for the "public.orders" table.
 * This type represents an insertable database record before casing transformations are applied.
 */
export type OrderInsertBaseRecord = z.output<typeof OrdersTableInsertBaseSchema>;

/**
 * The base record type for the "public.orders" table.
 * This type represents an updatable database record before casing transformations are applied.
 */
export type OrderUpdateBaseRecord = Partial<OrderInsertBaseRecord>;

/**
 * Insert transform for the "public.orders" table.
 * Maps camelCase properties to raw database snake_case fields.
 */
export const transformOrderInsertBaseRecord = (data: OrderInsertBaseRecord): {
    order_number: OrderInsertBaseRecord['orderNumber'],
    user_id?: OrderInsertBaseRecord['userId'],
    status?: OrderInsertBaseRecord['status'],
    total_amount: OrderInsertBaseRecord['totalAmount'],
    tax_amount?: OrderInsertBaseRecord['taxAmount'],
    shipping_cost?: OrderInsertBaseRecord['shippingCost'],
    order_date?: OrderInsertBaseRecord['orderDate'],
    shipped_date?: OrderInsertBaseRecord['shippedDate'],
    delivery_time?: OrderInsertBaseRecord['deliveryTime'],
    notes?: OrderInsertBaseRecord['notes'],
    metadata?: OrderInsertBaseRecord['metadata'],
    created_at?: OrderInsertBaseRecord['createdAt'],
} => ({
    order_number: data.orderNumber,
    user_id: data.userId,
    status: data.status,
    total_amount: data.totalAmount,
    tax_amount: data.taxAmount,
    shipping_cost: data.shippingCost,
    order_date: data.orderDate,
    shipped_date: data.shippedDate,
    delivery_time: data.deliveryTime,
    notes: data.notes,
    metadata: data.metadata,
    created_at: data.createdAt,
});

/**
 * Update transform for the "public.orders" table.
 * Maps camelCase properties to raw database snake_case fields.
 */
export const transformOrderUpdateBaseRecord = (data: OrderUpdateBaseRecord): {
    order_number: OrderUpdateBaseRecord['orderNumber'],
    user_id?: OrderUpdateBaseRecord['userId'],
    status?: OrderUpdateBaseRecord['status'],
    total_amount: OrderUpdateBaseRecord['totalAmount'],
    tax_amount?: OrderUpdateBaseRecord['taxAmount'],
    shipping_cost?: OrderUpdateBaseRecord['shippingCost'],
    order_date?: OrderUpdateBaseRecord['orderDate'],
    shipped_date?: OrderUpdateBaseRecord['shippedDate'],
    delivery_time?: OrderUpdateBaseRecord['deliveryTime'],
    notes?: OrderUpdateBaseRecord['notes'],
    metadata?: OrderUpdateBaseRecord['metadata'],
    created_at?: OrderUpdateBaseRecord['createdAt'],
} => ({
    order_number: data.orderNumber,
    user_id: data.userId,
    status: data.status,
    total_amount: data.totalAmount,
    tax_amount: data.taxAmount,
    shipping_cost: data.shippingCost,
    order_date: data.orderDate,
    shipped_date: data.shippedDate,
    delivery_time: data.deliveryTime,
    notes: data.notes,
    metadata: data.metadata,
    created_at: data.createdAt,
});

/**
 * Insert schema for the "public.orders" table (after casing transform).
 */
export const OrdersTableInsertSchema = OrdersTableInsertBaseSchema.transform(transformOrderInsertBaseRecord);

/**
 * Update schema for the "public.orders" table (after casing transform).
 */
export const OrdersTableUpdateSchema = OrdersTableInsertBaseSchema.partial().transform(transformOrderUpdateBaseRecord);

type TableInsertRecord = z.input<typeof OrdersTableInsertSchema>;
type TableReadRecord = z.output<typeof OrdersTableSchema>;

/**
 * Read record (casing transformed) for the "public.orders" table.
 */
export interface OrderRecord {
    /**
    * Primary key for orders table
    */
    id: TableReadRecord['id'];
    /**
    * Unique order number
    */
    orderNumber: TableReadRecord['orderNumber'];
    /**
    * ID of the user who placed the order
    */
    userId?: TableReadRecord['userId'];
    /**
    * Current status of the order
    */
    status?: TableReadRecord['status'];
    /**
    * Total order amount
    */
    totalAmount: TableReadRecord['totalAmount'];
    /**
    * Tax amount for the order
    */
    taxAmount?: TableReadRecord['taxAmount'];
    /**
    * Shipping cost for the order
    */
    shippingCost?: TableReadRecord['shippingCost'];
    /**
    * Date when order was placed
    */
    orderDate?: TableReadRecord['orderDate'];
    /**
    * Date when order was shipped
    */
    shippedDate?: TableReadRecord['shippedDate'];
    /**
    * Expected delivery time
    */
    deliveryTime?: TableReadRecord['deliveryTime'];
    /**
    * Array of order notes
    */
    notes?: TableReadRecord['notes'];
    /**
    * Additional order metadata
    */
    metadata?: TableReadRecord['metadata'];
    /**
    * Timestamp when order was created
    */
    createdAt?: TableReadRecord['createdAt'];
}

/**
 * Insert record (casing transformed) for the "public.orders" table.
 */
export interface OrderInsertRecord {
    /**
    * Unique order number
    * @maxLen: 20
    */
    orderNumber: TableInsertRecord['orderNumber'];
    /**
    * ID of the user who placed the order
    */
    userId?: TableInsertRecord['userId'];
    /**
    * Current status of the order
    * @default: 'pending'::order_status
    */
    status?: TableInsertRecord['status'];
    /**
    * Total order amount
    */
    totalAmount: TableInsertRecord['totalAmount'];
    /**
    * Tax amount for the order
    * @default: 0
    */
    taxAmount?: TableInsertRecord['taxAmount'];
    /**
    * Shipping cost for the order
    * @default: 0
    */
    shippingCost?: TableInsertRecord['shippingCost'];
    /**
    * Date when order was placed
    * @default: CURRENT_DATE
    */
    orderDate?: TableInsertRecord['orderDate'];
    /**
    * Date when order was shipped
    */
    shippedDate?: TableInsertRecord['shippedDate'];
    /**
    * Expected delivery time
    */
    deliveryTime?: TableInsertRecord['deliveryTime'];
    /**
    * Array of order notes
    */
    notes?: TableInsertRecord['notes'];
    /**
    * Additional order metadata
    */
    metadata?: TableInsertRecord['metadata'];
    /**
    * Timestamp when order was created
    * @default: now()
    */
    createdAt?: TableInsertRecord['createdAt'];
}

/**
 * Updatable record (casing transformed) for the "public.orders" table.
 */
export type OrderUpdateRecord = Partial<OrderInsertRecord>;

