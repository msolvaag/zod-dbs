// This file is auto-generated by zod-pg. Do not edit this file directly.

import { z } from 'zod';


export const OrdersTableSchema = z.object({
    /**
    * dataType: int8
    * defaultValue: nextval('orders_id_seq'::regclass)
    */
    id: z.int(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    order_number: z.string(),
    /**
    * dataType: int4
    * defaultValue: 
    */
    user_id: z.int().nullable(),
    /**
    * dataType: order_status
    * defaultValue: 'pending'::order_status
    */
    status: z.any().nullable(),
    /**
    * dataType: money
    * defaultValue: 
    */
    total_amount: z.number(),
    /**
    * dataType: money
    * defaultValue: 0
    */
    tax_amount: z.number().nullable(),
    /**
    * dataType: money
    * defaultValue: 0
    */
    shipping_cost: z.number().nullable(),
    /**
    * dataType: date
    * defaultValue: CURRENT_DATE
    */
    order_date: z.date().nullable(),
    /**
    * dataType: date
    * defaultValue: 
    */
    shipped_date: z.date().nullable(),
    /**
    * dataType: time
    * defaultValue: 
    */
    delivery_time: z.string().nullable(),
    /**
    * dataType: _text
    * defaultValue: 
    */
    notes: z.array(z.string()).nullable(),
    /**
    * dataType: jsonb
    * defaultValue: 
    */
    metadata: z.json().nullable(),
    /**
    * dataType: timestamptz
    * defaultValue: now()
    */
    created_at: z.date().nullable(),
}).transform(data => ({
    id: data.id,
    orderNumber: data.order_number,
    userId: data.user_id ?? undefined,
    status: data.status ?? undefined,
    totalAmount: data.total_amount,
    taxAmount: data.tax_amount ?? undefined,
    shippingCost: data.shipping_cost ?? undefined,
    orderDate: data.order_date ?? undefined,
    shippedDate: data.shipped_date ?? undefined,
    deliveryTime: data.delivery_time ?? undefined,
    notes: data.notes,
    metadata: data.metadata ?? undefined,
    createdAt: data.created_at ?? undefined,
}));

const TableWriteSchema = z.object({
    /**
    * dataType: varchar
    * defaultValue: 
    */
    orderNumber: z.string().max(20),
    /**
    * dataType: int4
    * defaultValue: 
    */
    userId: z.int().nullish(),
    /**
    * dataType: order_status
    * defaultValue: 'pending'::order_status
    */
    status: z.any().nullish(),
    /**
    * dataType: money
    * defaultValue: 
    */
    totalAmount: z.number(),
    /**
    * dataType: money
    * defaultValue: 0
    */
    taxAmount: z.number().nullish(),
    /**
    * dataType: money
    * defaultValue: 0
    */
    shippingCost: z.number().nullish(),
    /**
    * dataType: date
    * defaultValue: CURRENT_DATE
    */
    orderDate: z.date().nullish(),
    /**
    * dataType: date
    * defaultValue: 
    */
    shippedDate: z.date().nullish(),
    /**
    * dataType: time
    * defaultValue: 
    */
    deliveryTime: z.string().nullish(),
    /**
    * dataType: _text
    * defaultValue: 
    */
    notes: z.array(z.string()).nullish(),
    /**
    * dataType: jsonb
    * defaultValue: 
    */
    metadata: z.json().nullish(),
    /**
    * dataType: timestamptz
    * defaultValue: now()
    */
    createdAt: z.date().nullish(),
});

export const OrdersTableInsertSchema = TableWriteSchema.transform(data => ({
    order_number: data.orderNumber,
    user_id: data.userId,
    status: data.status,
    total_amount: data.totalAmount,
    tax_amount: data.taxAmount,
    shipping_cost: data.shippingCost,
    order_date: data.orderDate,
    shipped_date: data.shippedDate,
    delivery_time: data.deliveryTime,
    notes: data.notes,
    metadata: (data.metadata ? JSON.stringify(data.metadata) : data.metadata),
    created_at: data.createdAt,
}));

export const OrdersTableUpdateSchema = TableWriteSchema.partial().transform(data => ({
    order_number: data.orderNumber,
    user_id: data.userId,
    status: data.status,
    total_amount: data.totalAmount,
    tax_amount: data.taxAmount,
    shipping_cost: data.shippingCost,
    order_date: data.orderDate,
    shipped_date: data.shippedDate,
    delivery_time: data.deliveryTime,
    notes: data.notes,
    metadata: (data.metadata ? JSON.stringify(data.metadata) : data.metadata),
    created_at: data.createdAt,
}));

type TableReadRecord = z.output<typeof OrdersTableSchema>;
type TableInsertRecord = z.input<typeof OrdersTableInsertSchema>;



/**
* Represents a database record from the "public.orders" table.
*/
export interface OrderRecord {
    /**
     * Primary key for orders table
     */
    id: TableReadRecord['id'];
    /**
     * Unique order number
     */
    orderNumber: TableReadRecord['orderNumber'];
    /**
     * ID of the user who placed the order
     */
    userId: TableReadRecord['userId'];
    /**
     * Current status of the order
     */
    status: TableReadRecord['status'];
    /**
     * Total order amount
     */
    totalAmount: TableReadRecord['totalAmount'];
    /**
     * Tax amount for the order
     */
    taxAmount: TableReadRecord['taxAmount'];
    /**
     * Shipping cost for the order
     */
    shippingCost: TableReadRecord['shippingCost'];
    /**
     * Date when order was placed
     */
    orderDate: TableReadRecord['orderDate'];
    /**
     * Date when order was shipped
     */
    shippedDate: TableReadRecord['shippedDate'];
    /**
     * Expected delivery time
     */
    deliveryTime: TableReadRecord['deliveryTime'];
    /**
     * Array of order notes
     */
    notes: TableReadRecord['notes'];
    /**
     * Additional order metadata
     */
    metadata: TableReadRecord['metadata'];
    /**
     * Timestamp when order was created
     */
    createdAt: TableReadRecord['createdAt'];
}

/**
* Represents an insertable database record from the "public.orders" table.
*/
export interface OrderInsertRecord {
    /**
    * Unique order number
    * @maxLen: 20
    */
    orderNumber: TableInsertRecord['orderNumber'];
    /**
    * ID of the user who placed the order
    */
    userId?: TableInsertRecord['userId'];
    /**
    * Current status of the order
    * @default: 'pending'::order_status
    */
    status?: TableInsertRecord['status'];
    /**
    * Total order amount
    */
    totalAmount: TableInsertRecord['totalAmount'];
    /**
    * Tax amount for the order
    * @default: 0
    */
    taxAmount?: TableInsertRecord['taxAmount'];
    /**
    * Shipping cost for the order
    * @default: 0
    */
    shippingCost?: TableInsertRecord['shippingCost'];
    /**
    * Date when order was placed
    * @default: CURRENT_DATE
    */
    orderDate?: TableInsertRecord['orderDate'];
    /**
    * Date when order was shipped
    */
    shippedDate?: TableInsertRecord['shippedDate'];
    /**
    * Expected delivery time
    */
    deliveryTime?: TableInsertRecord['deliveryTime'];
    /**
    * Array of order notes
    */
    notes?: TableInsertRecord['notes'];
    /**
    * Additional order metadata
    */
    metadata?: TableInsertRecord['metadata'];
    /**
    * Timestamp when order was created
    * @default: now()
    */
    createdAt?: TableInsertRecord['createdAt'];
}

/**
* Represents an updateable database record from the "public.orders" table.
*/
export type OrderUpdateRecord = Partial<OrderInsertRecord>;
