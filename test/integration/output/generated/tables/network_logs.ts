// This file is auto-generated by zod-pg. Do not edit this file directly.

import { z } from 'zod';

export const NetworkLogsTableSchema = z.object({
    /**
    * dataType: int8
    * defaultValue: nextval('network_logs_id_seq'::regclass)
    */
    id: z.int(),
    /**
    * dataType: inet
    * defaultValue: 
    */
    ip_address: z.string(),
    /**
    * dataType: int4range
    * defaultValue: 
    */
    port_range: z.any().nullable(),
    /**
    * dataType: macaddr
    * defaultValue: 
    */
    mac_address: z.string().nullable(),
    /**
    * dataType: timestamptz
    * defaultValue: now()
    */
    request_time: z.date().nullable(),
    /**
    * dataType: interval
    * defaultValue: 
    */
    response_time: z.any().nullable(),
    /**
    * dataType: int8
    * defaultValue: 0
    */
    bytes_sent: z.int().nullable(),
    /**
    * dataType: int8
    * defaultValue: 0
    */
    bytes_received: z.int().nullable(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    protocol: z.string().nullable(),
    /**
    * dataType: int2
    * defaultValue: 
    */
    status_code: z.int().nullable(),
    /**
    * dataType: text
    * defaultValue: 
    */
    user_agent: z.string().nullable(),
    /**
    * dataType: jsonb
    * defaultValue: 
    */
    headers: z.json().nullable(),
}).transform(data => ({
    id: data.id,
    ipAddress: data.ip_address,
    portRange: data.port_range ?? undefined,
    macAddress: data.mac_address ?? undefined,
    requestTime: data.request_time ?? undefined,
    responseTime: data.response_time ?? undefined,
    bytesSent: data.bytes_sent ?? undefined,
    bytesReceived: data.bytes_received ?? undefined,
    protocol: data.protocol ?? undefined,
    statusCode: data.status_code ?? undefined,
    userAgent: data.user_agent ?? undefined,
    headers: data.headers ?? undefined,
}));

type TableReadRecord = z.output<typeof NetworkLogsTableSchema>;

const TableWriteSchema = z.object({
    /**
    * dataType: inet
    * defaultValue: 
    */
    ipAddress: z.string(),
    /**
    * dataType: int4range
    * defaultValue: 
    */
    portRange: z.any().nullish(),
    /**
    * dataType: macaddr
    * defaultValue: 
    */
    macAddress: z.string().nullish(),
    /**
    * dataType: timestamptz
    * defaultValue: now()
    */
    requestTime: z.date().nullish(),
    /**
    * dataType: interval
    * defaultValue: 
    */
    responseTime: z.any().nullish(),
    /**
    * dataType: int8
    * defaultValue: 0
    */
    bytesSent: z.int().nullish(),
    /**
    * dataType: int8
    * defaultValue: 0
    */
    bytesReceived: z.int().nullish(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    protocol: z.string().max(10).nullish(),
    /**
    * dataType: int2
    * defaultValue: 
    */
    statusCode: z.int().nullish(),
    /**
    * dataType: text
    * defaultValue: 
    */
    userAgent: z.string().nullish(),
    /**
    * dataType: jsonb
    * defaultValue: 
    */
    headers: z.json().nullish(),
});

export const NetworkLogsTableInsertSchema = TableWriteSchema.transform(data => ({
    ip_address: data.ipAddress,
    port_range: data.portRange,
    mac_address: data.macAddress,
    request_time: data.requestTime,
    response_time: data.responseTime,
    bytes_sent: data.bytesSent,
    bytes_received: data.bytesReceived,
    protocol: data.protocol,
    status_code: data.statusCode,
    user_agent: data.userAgent,
    headers: (data.headers ? JSON.stringify(data.headers) : data.headers),
}));

export const NetworkLogsTableUpdateSchema = TableWriteSchema.partial().transform(data => ({
    ip_address: data.ipAddress,
    port_range: data.portRange,
    mac_address: data.macAddress,
    request_time: data.requestTime,
    response_time: data.responseTime,
    bytes_sent: data.bytesSent,
    bytes_received: data.bytesReceived,
    protocol: data.protocol,
    status_code: data.statusCode,
    user_agent: data.userAgent,
    headers: (data.headers ? JSON.stringify(data.headers) : data.headers),
}));

type TableInsertRecord = z.input<typeof NetworkLogsTableInsertSchema>;

/**
* Represents a database record from the "public.network_logs" table.
*/
export interface NetworkLogRecord {
    id: TableReadRecord['id'];
    ipAddress: TableReadRecord['ipAddress'];
    portRange: TableReadRecord['portRange'];
    macAddress: TableReadRecord['macAddress'];
    requestTime: TableReadRecord['requestTime'];
    responseTime: TableReadRecord['responseTime'];
    bytesSent: TableReadRecord['bytesSent'];
    bytesReceived: TableReadRecord['bytesReceived'];
    protocol: TableReadRecord['protocol'];
    statusCode: TableReadRecord['statusCode'];
    userAgent: TableReadRecord['userAgent'];
    headers: TableReadRecord['headers'];
}

/**
* Represents an insertable database record from the "public.network_logs" table.
*/
export interface NetworkLogInsertRecord {
    /**
    */
    ipAddress: TableInsertRecord['ipAddress'];
    /**
    */
    portRange?: TableInsertRecord['portRange'];
    /**
    */
    macAddress?: TableInsertRecord['macAddress'];
    /**
    * @default: now()
    */
    requestTime?: TableInsertRecord['requestTime'];
    /**
    */
    responseTime?: TableInsertRecord['responseTime'];
    /**
    * @default: 0
    */
    bytesSent?: TableInsertRecord['bytesSent'];
    /**
    * @default: 0
    */
    bytesReceived?: TableInsertRecord['bytesReceived'];
    /**
    * @maxLen: 10
    */
    protocol?: TableInsertRecord['protocol'];
    /**
    */
    statusCode?: TableInsertRecord['statusCode'];
    /**
    */
    userAgent?: TableInsertRecord['userAgent'];
    /**
    */
    headers?: TableInsertRecord['headers'];
}

/**
* Represents an updateable database record from the "public.network_logs" table.
*/
export type NetworkLogUpdateRecord = Partial<NetworkLogInsertRecord>;
