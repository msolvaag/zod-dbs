// This file is auto-generated by zod-pg. Do not edit this file directly.

import { z } from 'zod';


/**
 * The base read schema for the "public.network_logs" table.
 * This schema is used to validate the data read from the database without any transformations.
 */
export const NetworkLogsTableReadSchema = z.object({
    /**
    * dataType: int8
    * defaultValue: nextval('network_logs_id_seq'::regclass)
    */
    id: z.number().int(),
    /**
    * dataType: inet
    * defaultValue: 
    */
    ip_address: z.string(),
    /**
    * dataType: int4range
    * defaultValue: 
    */
    port_range: z.any().nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: macaddr
    * defaultValue: 
    */
    mac_address: z.string().nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: timestamptz
    * defaultValue: now()
    */
    request_time: z.date().nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: interval
    * defaultValue: 
    */
    response_time: z.any().nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: int8
    * defaultValue: 0
    */
    bytes_sent: z.number().int().nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: int8
    * defaultValue: 0
    */
    bytes_received: z.number().int().nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    protocol: z.string().nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: int2
    * defaultValue: 
    */
    status_code: z.number().int().nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: text
    * defaultValue: 
    */
    user_agent: z.string().nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: jsonb
    * defaultValue: 
    */
    headers: z.any().nullish().transform((value) => value ?? undefined).optional(),
});

/**
 * The base record type for the "public.network_logs" table.
 * This type represents the raw database record without any transformations.
 */
export type NetworkLogReadBaseRecord = z.output<typeof NetworkLogsTableReadSchema>;

/**
* The read transform function for the "public.network_logs" table.
* Maps the raw database fields to expected property names. e.g snake_case to camelCase.
*/
export const transformNetworkLogReadRecord = (data: NetworkLogReadBaseRecord): {
    id: NetworkLogReadBaseRecord['id'],
    ipAddress: NetworkLogReadBaseRecord['ip_address'],
    portRange?: NetworkLogReadBaseRecord['port_range'],
    macAddress?: NetworkLogReadBaseRecord['mac_address'],
    requestTime?: NetworkLogReadBaseRecord['request_time'],
    responseTime?: NetworkLogReadBaseRecord['response_time'],
    bytesSent?: NetworkLogReadBaseRecord['bytes_sent'],
    bytesReceived?: NetworkLogReadBaseRecord['bytes_received'],
    protocol?: NetworkLogReadBaseRecord['protocol'],
    statusCode?: NetworkLogReadBaseRecord['status_code'],
    userAgent?: NetworkLogReadBaseRecord['user_agent'],
    headers?: NetworkLogReadBaseRecord['headers'],
} => ({
    id: data.id,
    ipAddress: data.ip_address,
    portRange: data.port_range,
    macAddress: data.mac_address,
    requestTime: data.request_time,
    responseTime: data.response_time,
    bytesSent: data.bytes_sent,
    bytesReceived: data.bytes_received,
    protocol: data.protocol,
    statusCode: data.status_code,
    userAgent: data.user_agent,
    headers: data.headers,
});

/**
 * The read schema for the "public.network_logs" table.
 * This schema is used to validate the data read from the database with transformations.
 */
export const NetworkLogsTableSchema = NetworkLogsTableReadSchema.transform(transformNetworkLogReadRecord);

/**
 * The base write schema for the "public.network_logs" table.
 * This schema is used to validate the data before writing to the database without any transformations.
 */
export const NetworkLogsTableWriteSchema = z.object({
    /**
    * dataType: inet
    * defaultValue: 
    */
    ipAddress: z.string(),
    /**
    * dataType: int4range
    * defaultValue: 
    */
    portRange: z.any().nullish().optional(),
    /**
    * dataType: macaddr
    * defaultValue: 
    */
    macAddress: z.string().nullish().optional(),
    /**
    * dataType: timestamptz
    * defaultValue: now()
    */
    requestTime: z.date().nullish().optional(),
    /**
    * dataType: interval
    * defaultValue: 
    */
    responseTime: z.any().nullish().optional(),
    /**
    * dataType: int8
    * defaultValue: 0
    */
    bytesSent: z.number().int().nullish().optional(),
    /**
    * dataType: int8
    * defaultValue: 0
    */
    bytesReceived: z.number().int().nullish().optional(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    protocol: z.string().max(10).nullish().optional(),
    /**
    * dataType: int2
    * defaultValue: 
    */
    statusCode: z.number().int().nullish().optional(),
    /**
    * dataType: text
    * defaultValue: 
    */
    userAgent: z.string().nullish().optional(),
    /**
    * dataType: jsonb
    * defaultValue: 
    */
    headers: z.any().nullish().transform((value) => value ? JSON.stringify(value) : value).optional(),
});

/**
 * The base record type for the "public.network_logs" table.
 * This type represents an insertable database record before casing transformations are applied.
 */
export type NetworkLogInsertBaseRecord = z.output<typeof NetworkLogsTableWriteSchema>;

/**
 * The base record type for the "public.network_logs" table.
 * This type represents an updatable database record before casing transformations are applied.
 */
export type NetworkLogUpdateBaseRecord = Partial<NetworkLogInsertBaseRecord>;

/**
 * The insert transform function for the "public.network_logs" table.
 * Maps the expected property names to raw database fields. e.g camelCase to snake_case.
 */
export const transformNetworkLogInsertRecord = (data: NetworkLogInsertBaseRecord): {
    ip_address: NetworkLogInsertBaseRecord['ipAddress'],
    port_range?: NetworkLogInsertBaseRecord['portRange'],
    mac_address?: NetworkLogInsertBaseRecord['macAddress'],
    request_time?: NetworkLogInsertBaseRecord['requestTime'],
    response_time?: NetworkLogInsertBaseRecord['responseTime'],
    bytes_sent?: NetworkLogInsertBaseRecord['bytesSent'],
    bytes_received?: NetworkLogInsertBaseRecord['bytesReceived'],
    protocol?: NetworkLogInsertBaseRecord['protocol'],
    status_code?: NetworkLogInsertBaseRecord['statusCode'],
    user_agent?: NetworkLogInsertBaseRecord['userAgent'],
    headers?: NetworkLogInsertBaseRecord['headers'],
} => ({
    ip_address: data.ipAddress,
    port_range: data.portRange,
    mac_address: data.macAddress,
    request_time: data.requestTime,
    response_time: data.responseTime,
    bytes_sent: data.bytesSent,
    bytes_received: data.bytesReceived,
    protocol: data.protocol,
    status_code: data.statusCode,
    user_agent: data.userAgent,
    headers: data.headers,
});

/**
 * The update transform function for the "public.network_logs" table.
 * Maps the expected property names to raw database fields. e.g camelCase to snake_case.
 */
export const transformNetworkLogUpdateRecord = (data: NetworkLogUpdateBaseRecord): {
    ip_address: NetworkLogUpdateBaseRecord['ipAddress'],
    port_range?: NetworkLogUpdateBaseRecord['portRange'],
    mac_address?: NetworkLogUpdateBaseRecord['macAddress'],
    request_time?: NetworkLogUpdateBaseRecord['requestTime'],
    response_time?: NetworkLogUpdateBaseRecord['responseTime'],
    bytes_sent?: NetworkLogUpdateBaseRecord['bytesSent'],
    bytes_received?: NetworkLogUpdateBaseRecord['bytesReceived'],
    protocol?: NetworkLogUpdateBaseRecord['protocol'],
    status_code?: NetworkLogUpdateBaseRecord['statusCode'],
    user_agent?: NetworkLogUpdateBaseRecord['userAgent'],
    headers?: NetworkLogUpdateBaseRecord['headers'],
} => ({
    ip_address: data.ipAddress,
    port_range: data.portRange,
    mac_address: data.macAddress,
    request_time: data.requestTime,
    response_time: data.responseTime,
    bytes_sent: data.bytesSent,
    bytes_received: data.bytesReceived,
    protocol: data.protocol,
    status_code: data.statusCode,
    user_agent: data.userAgent,
    headers: data.headers,
});

/**
 * The insert schema for the "public.network_logs" table.
 * This schema is used to validate and transform a record before inserting into the database.
 */
export const NetworkLogsTableInsertSchema = NetworkLogsTableWriteSchema.transform(transformNetworkLogInsertRecord);

/**
 * The update schema for the "public.network_logs" table.
 * This schema is used to validate and transform a record before updating the database.
 */
export const NetworkLogsTableUpdateSchema = NetworkLogsTableWriteSchema.partial().transform(transformNetworkLogUpdateRecord);

type TableInsertRecord = z.input<typeof NetworkLogsTableInsertSchema>;
type TableReadRecord = z.output<typeof NetworkLogsTableSchema>;

/**
* Represents a database record from the "public.network_logs" table.
*/
export interface NetworkLogRecord {
    /**
    * Primary key for network logs table
    */
    id: TableReadRecord['id'];
    /**
    * IP address of the request
    */
    ipAddress: TableReadRecord['ipAddress'];
    /**
    * Port range used
    */
    portRange?: TableReadRecord['portRange'];
    /**
    * MAC address of the device
    */
    macAddress?: TableReadRecord['macAddress'];
    /**
    * Timestamp of the request
    */
    requestTime?: TableReadRecord['requestTime'];
    /**
    * Response time duration
    */
    responseTime?: TableReadRecord['responseTime'];
    /**
    * Number of bytes sent
    */
    bytesSent?: TableReadRecord['bytesSent'];
    /**
    * Number of bytes received
    */
    bytesReceived?: TableReadRecord['bytesReceived'];
    /**
    * Network protocol used
    */
    protocol?: TableReadRecord['protocol'];
    /**
    * HTTP status code
    */
    statusCode?: TableReadRecord['statusCode'];
    /**
    * User agent string
    */
    userAgent?: TableReadRecord['userAgent'];
    /**
    * Request headers in JSON format
    */
    headers?: TableReadRecord['headers'];
}

/**
* Represents an insertable database record from the "public.network_logs" table.
*/
export interface NetworkLogInsertRecord {
    /**
    * IP address of the request
    */
    ipAddress: TableInsertRecord['ipAddress'];
    /**
    * Port range used
    */
    portRange?: TableInsertRecord['portRange'];
    /**
    * MAC address of the device
    */
    macAddress?: TableInsertRecord['macAddress'];
    /**
    * Timestamp of the request
    * @default: now()
    */
    requestTime?: TableInsertRecord['requestTime'];
    /**
    * Response time duration
    */
    responseTime?: TableInsertRecord['responseTime'];
    /**
    * Number of bytes sent
    * @default: 0
    */
    bytesSent?: TableInsertRecord['bytesSent'];
    /**
    * Number of bytes received
    * @default: 0
    */
    bytesReceived?: TableInsertRecord['bytesReceived'];
    /**
    * Network protocol used
    * @maxLen: 10
    */
    protocol?: TableInsertRecord['protocol'];
    /**
    * HTTP status code
    */
    statusCode?: TableInsertRecord['statusCode'];
    /**
    * User agent string
    */
    userAgent?: TableInsertRecord['userAgent'];
    /**
    * Request headers in JSON format
    */
    headers?: TableInsertRecord['headers'];
}

/**
* Represents an updateable database record from the "public.network_logs" table.
*/
export type NetworkLogUpdateRecord = Partial<NetworkLogInsertRecord>;
