// This file is auto-generated by zod-pg. Do not edit this file directly.

import { z } from 'zod';


export const AuditLogsTableSchema = z.object({
    /**
    * dataType: int8
    * defaultValue: nextval('audit_logs_id_seq'::regclass)
    */
    id: z.int(),
    /**
    * dataType: int4
    * defaultValue: 
    */
    user_id: z.int().nullable(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    action: z.string(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    table_name: z.string().nullable(),
    /**
    * dataType: int4
    * defaultValue: 
    */
    record_id: z.int().nullable(),
    /**
    * dataType: jsonb
    * defaultValue: 
    */
    old_values: z.json().nullable(),
    /**
    * dataType: jsonb
    * defaultValue: 
    */
    new_values: z.json().nullable(),
    /**
    * dataType: timestamptz
    * defaultValue: now()
    */
    created_at: z.date().nullable(),
}).transform(data => ({
    id: data.id,
    userId: data.user_id ?? undefined,
    action: data.action,
    tableName: data.table_name ?? undefined,
    recordId: data.record_id ?? undefined,
    oldValues: data.old_values ?? undefined,
    newValues: data.new_values ?? undefined,
    createdAt: data.created_at ?? undefined,
}));

const TableWriteSchema = z.object({
    /**
    * dataType: int4
    * defaultValue: 
    */
    userId: z.int().nullish(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    action: z.string().max(50),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    tableName: z.string().max(50).nullish(),
    /**
    * dataType: int4
    * defaultValue: 
    */
    recordId: z.int().nullish(),
    /**
    * dataType: jsonb
    * defaultValue: 
    */
    oldValues: z.json().nullish(),
    /**
    * dataType: jsonb
    * defaultValue: 
    */
    newValues: z.json().nullish(),
    /**
    * dataType: timestamptz
    * defaultValue: now()
    */
    createdAt: z.date().nullish(),
});

export const AuditLogsTableInsertSchema = TableWriteSchema.transform(data => ({
    user_id: data.userId,
    action: data.action,
    table_name: data.tableName,
    record_id: data.recordId,
    old_values: (data.oldValues ? JSON.stringify(data.oldValues) : data.oldValues),
    new_values: (data.newValues ? JSON.stringify(data.newValues) : data.newValues),
    created_at: data.createdAt,
}));

export const AuditLogsTableUpdateSchema = TableWriteSchema.partial().transform(data => ({
    user_id: data.userId,
    action: data.action,
    table_name: data.tableName,
    record_id: data.recordId,
    old_values: (data.oldValues ? JSON.stringify(data.oldValues) : data.oldValues),
    new_values: (data.newValues ? JSON.stringify(data.newValues) : data.newValues),
    created_at: data.createdAt,
}));

type TableReadRecord = z.output<typeof AuditLogsTableSchema>;
type TableInsertRecord = z.input<typeof AuditLogsTableInsertSchema>;



/**
* Represents a database record from the "public.audit_logs"" table.
*/
export interface AuditLogDbRecord {
    /**
     * Primary key for audit logs table
     */
    id: TableReadRecord['id'];
    /**
     * ID of the user who performed the action
     */
    userId: TableReadRecord['userId'];
    /**
     * Type of action performed
     */
    action: TableReadRecord['action'];
    /**
     * Name of the table affected
     */
    tableName: TableReadRecord['tableName'];
    /**
     * ID of the record affected
     */
    recordId: TableReadRecord['recordId'];
    /**
     * Previous values before the change
     */
    oldValues: TableReadRecord['oldValues'];
    /**
     * New values after the change
     */
    newValues: TableReadRecord['newValues'];
    /**
     * Timestamp when the action was performed
     */
    createdAt: TableReadRecord['createdAt'];
}

/**
* Represents an insertable database record from the "public.audit_logs"" table.
*/
export interface AuditLogInsertRecord {
    /**
    * ID of the user who performed the action
    */
    userId?: TableInsertRecord['userId'];
    /**
    * Type of action performed
    * @maxLen: 50
    */
    action: TableInsertRecord['action'];
    /**
    * Name of the table affected
    * @maxLen: 50
    */
    tableName?: TableInsertRecord['tableName'];
    /**
    * ID of the record affected
    */
    recordId?: TableInsertRecord['recordId'];
    /**
    * Previous values before the change
    */
    oldValues?: TableInsertRecord['oldValues'];
    /**
    * New values after the change
    */
    newValues?: TableInsertRecord['newValues'];
    /**
    * Timestamp when the action was performed
    * @default: now()
    */
    createdAt?: TableInsertRecord['createdAt'];
}

/**
* Represents an updateable database record from the "public.audit_logs"" table.
*/
export type AuditLogUpdateRecord = Partial<AuditLogInsertRecord>;

