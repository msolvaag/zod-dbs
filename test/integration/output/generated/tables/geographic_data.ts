// This file is auto-generated by zod-pg. Do not edit this file directly.

import { z } from 'zod';


export const GeographicDataTableSchema = z.object({
    /**
    * dataType: int4
    * defaultValue: nextval('geographic_data_id_seq'::regclass)
    */
    id: z.int(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    location_name: z.string(),
    /**
    * dataType: point
    * defaultValue: 
    */
    coordinates: z.string(),
    /**
    * dataType: polygon
    * defaultValue: 
    */
    boundary: z.string().nullable(),
    /**
    * dataType: circle
    * defaultValue: 
    */
    area_circle: z.string().nullable(),
    /**
    * dataType: float4
    * defaultValue: 
    */
    elevation: z.number().nullable(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    timezone: z.string().nullable(),
    /**
    * dataType: bpchar
    * defaultValue: 
    */
    country_code: z.string().nullable(),
    /**
    * dataType: _text
    * defaultValue: 
    */
    postal_codes: z.array(z.string()).nullable(),
    /**
    * dataType: int4
    * defaultValue: 
    */
    population: z.int().nullable(),
    /**
    * dataType: date
    * defaultValue: 
    */
    established_date: z.date().nullable(),
    /**
    * dataType: timestamptz
    * defaultValue: now()
    */
    last_updated: z.date().nullable(),
}).transform(data => ({
    id: data.id,
    locationName: data.location_name,
    coordinates: data.coordinates,
    boundary: data.boundary ?? undefined,
    areaCircle: data.area_circle ?? undefined,
    elevation: data.elevation ?? undefined,
    timezone: data.timezone ?? undefined,
    countryCode: data.country_code ?? undefined,
    postalCodes: data.postal_codes,
    population: data.population ?? undefined,
    establishedDate: data.established_date ?? undefined,
    lastUpdated: data.last_updated ?? undefined,
}));

const TableWriteSchema = z.object({
    /**
    * dataType: varchar
    * defaultValue: 
    */
    locationName: z.string().max(255),
    /**
    * dataType: point
    * defaultValue: 
    */
    coordinates: z.string(),
    /**
    * dataType: polygon
    * defaultValue: 
    */
    boundary: z.string().nullish(),
    /**
    * dataType: circle
    * defaultValue: 
    */
    areaCircle: z.string().nullish(),
    /**
    * dataType: float4
    * defaultValue: 
    */
    elevation: z.number().nullish(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    timezone: z.string().max(50).nullish(),
    /**
    * dataType: bpchar
    * defaultValue: 
    */
    countryCode: z.string().max(2).nullish(),
    /**
    * dataType: _text
    * defaultValue: 
    */
    postalCodes: z.array(z.string()).nullish(),
    /**
    * dataType: int4
    * defaultValue: 
    */
    population: z.int().nullish(),
    /**
    * dataType: date
    * defaultValue: 
    */
    establishedDate: z.date().nullish(),
    /**
    * dataType: timestamptz
    * defaultValue: now()
    */
    lastUpdated: z.date().nullish(),
});

export const GeographicDataTableInsertSchema = TableWriteSchema.transform(data => ({
    location_name: data.locationName,
    coordinates: data.coordinates,
    boundary: data.boundary,
    area_circle: data.areaCircle,
    elevation: data.elevation,
    timezone: data.timezone,
    country_code: data.countryCode,
    postal_codes: data.postalCodes,
    population: data.population,
    established_date: data.establishedDate,
    last_updated: data.lastUpdated,
}));

export const GeographicDataTableUpdateSchema = TableWriteSchema.partial().transform(data => ({
    location_name: data.locationName,
    coordinates: data.coordinates,
    boundary: data.boundary,
    area_circle: data.areaCircle,
    elevation: data.elevation,
    timezone: data.timezone,
    country_code: data.countryCode,
    postal_codes: data.postalCodes,
    population: data.population,
    established_date: data.establishedDate,
    last_updated: data.lastUpdated,
}));

type TableReadRecord = z.output<typeof GeographicDataTableSchema>;
type TableInsertRecord = z.input<typeof GeographicDataTableInsertSchema>;



/**
* Represents a database record from the "public.geographic_data"" table.
*/
export interface GeographicDataDbRecord {
    /**
     * Primary key for geographic data table
     */
    id: TableReadRecord['id'];
    /**
     * Name of the location
     */
    locationName: TableReadRecord['locationName'];
    /**
     * Geographic coordinates
     */
    coordinates: TableReadRecord['coordinates'];
    /**
     * Geographic boundary as polygon
     */
    boundary: TableReadRecord['boundary'];
    /**
     * Area represented as circle
     */
    areaCircle: TableReadRecord['areaCircle'];
    /**
     * Elevation above sea level
     */
    elevation: TableReadRecord['elevation'];
    /**
     * Timezone of the location
     */
    timezone: TableReadRecord['timezone'];
    /**
     * ISO country code
     */
    countryCode: TableReadRecord['countryCode'];
    /**
     * Array of postal codes
     */
    postalCodes: TableReadRecord['postalCodes'];
    /**
     * Population count
     */
    population: TableReadRecord['population'];
    /**
     * Date when location was established
     */
    establishedDate: TableReadRecord['establishedDate'];
    /**
     * Timestamp when data was last updated
     */
    lastUpdated: TableReadRecord['lastUpdated'];
}

/**
* Represents an insertable database record from the "public.geographic_data"" table.
*/
export interface GeographicDatumInsertRecord {
    /**
    * Name of the location
    * @maxLen: 255
    */
    locationName: TableInsertRecord['locationName'];
    /**
    * Geographic coordinates
    */
    coordinates: TableInsertRecord['coordinates'];
    /**
    * Geographic boundary as polygon
    */
    boundary?: TableInsertRecord['boundary'];
    /**
    * Area represented as circle
    */
    areaCircle?: TableInsertRecord['areaCircle'];
    /**
    * Elevation above sea level
    */
    elevation?: TableInsertRecord['elevation'];
    /**
    * Timezone of the location
    * @maxLen: 50
    */
    timezone?: TableInsertRecord['timezone'];
    /**
    * ISO country code
    * @maxLen: 2
    */
    countryCode?: TableInsertRecord['countryCode'];
    /**
    * Array of postal codes
    */
    postalCodes?: TableInsertRecord['postalCodes'];
    /**
    * Population count
    */
    population?: TableInsertRecord['population'];
    /**
    * Date when location was established
    */
    establishedDate?: TableInsertRecord['establishedDate'];
    /**
    * Timestamp when data was last updated
    * @default: now()
    */
    lastUpdated?: TableInsertRecord['lastUpdated'];
}

/**
* Represents an updateable database record from the "public.geographic_data"" table.
*/
export type GeographicDatumUpdateRecord = Partial<GeographicDatumInsertRecord>;
