// This file is auto-generated by zod-pg. Do not edit this file directly.

import { z } from 'zod';


/**
 * The base read schema for the "public.user_sessions" table.
 * This schema is used to validate the data read from the database without any transformations.
 */
export const UserSessionsTableReadSchema = z.object({
    /**
    * dataType: uuid
    * defaultValue: gen_random_uuid()
    */
    id: z.string().uuid(),
    /**
    * dataType: int4
    * defaultValue: 
    */
    user_id: z.number().int().nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    token_hash: z.string(),
    /**
    * dataType: timestamptz
    * defaultValue: 
    */
    expires_at: z.date(),
    /**
    * dataType: timestamptz
    * defaultValue: now()
    */
    created_at: z.date().nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: timestamptz
    * defaultValue: now()
    */
    last_used_at: z.date().nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: inet
    * defaultValue: 
    */
    ip_address: z.string().nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: text
    * defaultValue: 
    */
    user_agent: z.string().nullish().transform((value) => value ?? undefined).optional(),
});

/**
 * The base record type for the "public.user_sessions" table.
 * This type represents the raw database record without any transformations.
 */
export type UserSessionReadBaseRecord = z.output<typeof UserSessionsTableReadSchema>;

/**
* The read transform function for the "public.user_sessions" table.
* Maps the raw database fields to expected property names. e.g snake_case to camelCase.
*/
export const transformUserSessionReadRecord = (data: UserSessionReadBaseRecord): {
    id: UserSessionReadBaseRecord['id'],
    userId?: UserSessionReadBaseRecord['user_id'],
    tokenHash: UserSessionReadBaseRecord['token_hash'],
    expiresAt: UserSessionReadBaseRecord['expires_at'],
    createdAt?: UserSessionReadBaseRecord['created_at'],
    lastUsedAt?: UserSessionReadBaseRecord['last_used_at'],
    ipAddress?: UserSessionReadBaseRecord['ip_address'],
    userAgent?: UserSessionReadBaseRecord['user_agent'],
} => ({
    id: data.id,
    userId: data.user_id,
    tokenHash: data.token_hash,
    expiresAt: data.expires_at,
    createdAt: data.created_at,
    lastUsedAt: data.last_used_at,
    ipAddress: data.ip_address,
    userAgent: data.user_agent,
});

/**
 * The read schema for the "public.user_sessions" table.
 * This schema is used to validate the data read from the database with transformations.
 */
export const UserSessionsTableSchema = UserSessionsTableReadSchema.transform(transformUserSessionReadRecord);

/**
 * The base write schema for the "public.user_sessions" table.
 * This schema is used to validate the data before writing to the database without any transformations.
 */
export const UserSessionsTableWriteSchema = z.object({
    /**
    * dataType: uuid
    * defaultValue: gen_random_uuid()
    */
    id: z.string().uuid(),
    /**
    * dataType: int4
    * defaultValue: 
    */
    userId: z.number().int().nullish().optional(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    tokenHash: z.string().max(255),
    /**
    * dataType: timestamptz
    * defaultValue: 
    */
    expiresAt: z.date(),
    /**
    * dataType: timestamptz
    * defaultValue: now()
    */
    createdAt: z.date().nullish().optional(),
    /**
    * dataType: timestamptz
    * defaultValue: now()
    */
    lastUsedAt: z.date().nullish().optional(),
    /**
    * dataType: inet
    * defaultValue: 
    */
    ipAddress: z.string().nullish().optional(),
    /**
    * dataType: text
    * defaultValue: 
    */
    userAgent: z.string().nullish().optional(),
});

/**
 * The base record type for the "public.user_sessions" table.
 * This type represents an insertable database record before casing transformations are applied.
 */
export type UserSessionInsertBaseRecord = z.output<typeof UserSessionsTableWriteSchema>;

/**
 * The base record type for the "public.user_sessions" table.
 * This type represents an updatable database record before casing transformations are applied.
 */
export type UserSessionUpdateBaseRecord = Partial<UserSessionInsertBaseRecord>;

/**
 * The insert transform function for the "public.user_sessions" table.
 * Maps the expected property names to raw database fields. e.g camelCase to snake_case.
 */
export const transformUserSessionInsertRecord = (data: UserSessionInsertBaseRecord): {
    id: UserSessionInsertBaseRecord['id'],
    user_id?: UserSessionInsertBaseRecord['userId'],
    token_hash: UserSessionInsertBaseRecord['tokenHash'],
    expires_at: UserSessionInsertBaseRecord['expiresAt'],
    created_at?: UserSessionInsertBaseRecord['createdAt'],
    last_used_at?: UserSessionInsertBaseRecord['lastUsedAt'],
    ip_address?: UserSessionInsertBaseRecord['ipAddress'],
    user_agent?: UserSessionInsertBaseRecord['userAgent'],
} => ({
    id: data.id,
    user_id: data.userId,
    token_hash: data.tokenHash,
    expires_at: data.expiresAt,
    created_at: data.createdAt,
    last_used_at: data.lastUsedAt,
    ip_address: data.ipAddress,
    user_agent: data.userAgent,
});

/**
 * The update transform function for the "public.user_sessions" table.
 * Maps the expected property names to raw database fields. e.g camelCase to snake_case.
 */
export const transformUserSessionUpdateRecord = (data: UserSessionUpdateBaseRecord): {
    id: UserSessionUpdateBaseRecord['id'],
    user_id?: UserSessionUpdateBaseRecord['userId'],
    token_hash: UserSessionUpdateBaseRecord['tokenHash'],
    expires_at: UserSessionUpdateBaseRecord['expiresAt'],
    created_at?: UserSessionUpdateBaseRecord['createdAt'],
    last_used_at?: UserSessionUpdateBaseRecord['lastUsedAt'],
    ip_address?: UserSessionUpdateBaseRecord['ipAddress'],
    user_agent?: UserSessionUpdateBaseRecord['userAgent'],
} => ({
    id: data.id,
    user_id: data.userId,
    token_hash: data.tokenHash,
    expires_at: data.expiresAt,
    created_at: data.createdAt,
    last_used_at: data.lastUsedAt,
    ip_address: data.ipAddress,
    user_agent: data.userAgent,
});

/**
 * The insert schema for the "public.user_sessions" table.
 * This schema is used to validate and transform a record before inserting into the database.
 */
export const UserSessionsTableInsertSchema = UserSessionsTableWriteSchema.transform(transformUserSessionInsertRecord);

/**
 * The update schema for the "public.user_sessions" table.
 * This schema is used to validate and transform a record before updating the database.
 */
export const UserSessionsTableUpdateSchema = UserSessionsTableWriteSchema.partial().transform(transformUserSessionUpdateRecord);

type TableInsertRecord = z.input<typeof UserSessionsTableInsertSchema>;
type TableReadRecord = z.output<typeof UserSessionsTableSchema>;

/**
* Represents a database record from the "public.user_sessions" table.
*/
export interface UserSessionRecord {
    /**
    * Primary key for user sessions table
    */
    id: TableReadRecord['id'];
    /**
    * ID of the user this session belongs to
    */
    userId?: TableReadRecord['userId'];
    /**
    * Hashed session token
    */
    tokenHash: TableReadRecord['tokenHash'];
    /**
    * Timestamp when the session expires
    */
    expiresAt: TableReadRecord['expiresAt'];
    /**
    * Timestamp when the session was created
    */
    createdAt?: TableReadRecord['createdAt'];
    /**
    * Timestamp when the session was last used
    */
    lastUsedAt?: TableReadRecord['lastUsedAt'];
    /**
    * IP address of the client
    */
    ipAddress?: TableReadRecord['ipAddress'];
    /**
    * User agent string of the client
    */
    userAgent?: TableReadRecord['userAgent'];
}

/**
* Represents an insertable database record from the "public.user_sessions" table.
*/
export interface UserSessionInsertRecord {
    /**
    * Primary key for user sessions table
    * @default: gen_random_uuid()
    */
    id: TableInsertRecord['id'];
    /**
    * ID of the user this session belongs to
    */
    userId?: TableInsertRecord['userId'];
    /**
    * Hashed session token
    * @maxLen: 255
    */
    tokenHash: TableInsertRecord['tokenHash'];
    /**
    * Timestamp when the session expires
    */
    expiresAt: TableInsertRecord['expiresAt'];
    /**
    * Timestamp when the session was created
    * @default: now()
    */
    createdAt?: TableInsertRecord['createdAt'];
    /**
    * Timestamp when the session was last used
    * @default: now()
    */
    lastUsedAt?: TableInsertRecord['lastUsedAt'];
    /**
    * IP address of the client
    */
    ipAddress?: TableInsertRecord['ipAddress'];
    /**
    * User agent string of the client
    */
    userAgent?: TableInsertRecord['userAgent'];
}

/**
* Represents an updateable database record from the "public.user_sessions" table.
*/
export type UserSessionUpdateRecord = Partial<UserSessionInsertRecord>;
