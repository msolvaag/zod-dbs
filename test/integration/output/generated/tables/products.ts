// This file is auto-generated by zod-pg. Do not edit this file directly.

import { z } from 'zod';
export const ProductsTableSchema = z.object({
    /**
    * dataType: int4
    * defaultValue: nextval('products_id_seq'::regclass)
    */
    id: z.number().int(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    name: z.string(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    sku: z.string(),
    /**
    * dataType: numeric
    * defaultValue: 
    */
    price: z.number(),
    /**
    * dataType: numeric
    * defaultValue: 
    */
    cost: z.number().nullable(),
    /**
    * dataType: float4
    * defaultValue: 
    */
    weight: z.number().nullable(),
    /**
    * dataType: point
    * defaultValue: 
    */
    dimensions: z.string().nullable(),
    /**
    * dataType: bool
    * defaultValue: true
    */
    is_active: z.boolean().nullable(),
    /**
    * dataType: bpchar
    * defaultValue: 
    */
    barcode: z.string().nullable(),
    /**
    * dataType: text
    * defaultValue: 
    */
    description: z.string().nullable(),
    /**
    * dataType: timestamptz
    * defaultValue: now()
    */
    created_at: z.date().nullable(),
}).transform(data => ({
    id: data.id,
    name: data.name,
    sku: data.sku,
    price: data.price,
    cost: data.cost ?? undefined,
    weight: data.weight ?? undefined,
    dimensions: data.dimensions ?? undefined,
    isActive: data.is_active ?? undefined,
    barcode: data.barcode ?? undefined,
    description: data.description ?? undefined,
    createdAt: data.created_at ?? undefined,
}));

type TableReadRecord = z.output<typeof ProductsTableSchema>;
const TableWriteSchema = z.object({
    /**
    * dataType: varchar
    * defaultValue: 
    */
    name: z.string().max(255),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    sku: z.string().max(50),
    /**
    * dataType: numeric
    * defaultValue: 
    */
    price: z.number().max(655362),
    /**
    * dataType: numeric
    * defaultValue: 
    */
    cost: z.number().max(655362).nullish(),
    /**
    * dataType: float4
    * defaultValue: 
    */
    weight: z.number().nullish(),
    /**
    * dataType: point
    * defaultValue: 
    */
    dimensions: z.string().nullish(),
    /**
    * dataType: bool
    * defaultValue: true
    */
    isActive: z.boolean().nullish(),
    /**
    * dataType: bpchar
    * defaultValue: 
    */
    barcode: z.string().max(13).nullish(),
    /**
    * dataType: text
    * defaultValue: 
    */
    description: z.string().nullish(),
    /**
    * dataType: timestamptz
    * defaultValue: now()
    */
    createdAt: z.date().nullish(),
});
export const ProductsTableInsertSchema = TableWriteSchema.transform(data => ({
    name: data.name,
    sku: data.sku,
    price: data.price,
    cost: data.cost,
    weight: data.weight,
    dimensions: data.dimensions,
    is_active: data.isActive,
    barcode: data.barcode,
    description: data.description,
    created_at: data.createdAt,
}));
export const ProductsTableUpdateSchema = TableWriteSchema.partial().transform(data => ({
    name: data.name,
    sku: data.sku,
    price: data.price,
    cost: data.cost,
    weight: data.weight,
    dimensions: data.dimensions,
    is_active: data.isActive,
    barcode: data.barcode,
    description: data.description,
    created_at: data.createdAt,
}));

type TableInsertRecord = z.input<typeof ProductsTableInsertSchema>;

/**
* Represents a database record from the "public.products" table.
*/
export interface ProductRecord {
    /**
     * Primary key for products table
     */
    id: TableReadRecord['id'];
    /**
     * Product name
     */
    name: TableReadRecord['name'];
    /**
     * Stock keeping unit identifier
     */
    sku: TableReadRecord['sku'];
    /**
     * Product price with 2 decimal precision
     */
    price: TableReadRecord['price'];
    /**
     * Product cost with 2 decimal precision
     */
    cost: TableReadRecord['cost'];
    /**
     * Product weight in kilograms
     */
    weight: TableReadRecord['weight'];
    /**
     * Product dimensions as geometric point
     */
    dimensions: TableReadRecord['dimensions'];
    /**
     * Whether the product is active
     */
    isActive: TableReadRecord['isActive'];
    /**
     * Product barcode (13 characters)
     */
    barcode: TableReadRecord['barcode'];
    /**
     * Product description
     */
    description: TableReadRecord['description'];
    /**
     * Timestamp when product was created
     */
    createdAt: TableReadRecord['createdAt'];
}

/**
* Represents an insertable database record from the "public.products" table.
*/
export interface ProductInsertRecord {
    /**
    * Product name
    * @maxLen: 255
    */
    name: TableInsertRecord['name'];
    /**
    * Stock keeping unit identifier
    * @maxLen: 50
    */
    sku: TableInsertRecord['sku'];
    /**
    * Product price with 2 decimal precision
    * @maxLen: 655362
    */
    price: TableInsertRecord['price'];
    /**
    * Product cost with 2 decimal precision
    * @maxLen: 655362
    */
    cost?: TableInsertRecord['cost'];
    /**
    * Product weight in kilograms
    */
    weight?: TableInsertRecord['weight'];
    /**
    * Product dimensions as geometric point
    */
    dimensions?: TableInsertRecord['dimensions'];
    /**
    * Whether the product is active
    * @default: true
    */
    isActive?: TableInsertRecord['isActive'];
    /**
    * Product barcode (13 characters)
    * @maxLen: 13
    */
    barcode?: TableInsertRecord['barcode'];
    /**
    * Product description
    */
    description?: TableInsertRecord['description'];
    /**
    * Timestamp when product was created
    * @default: now()
    */
    createdAt?: TableInsertRecord['createdAt'];
}

/**
* Represents an updateable database record from the "public.products" table.
*/
export type ProductUpdateRecord = Partial<ProductInsertRecord>;
