// This file is auto-generated by zod-pg. Do not edit this file directly.

import { z } from 'zod';

export const CommentsTableSchema = z.object({
    /**
    * dataType: int4
    * defaultValue: nextval('comments_id_seq'::regclass)
    */
    id: z.number().int(),
    /**
    * dataType: int4
    * defaultValue: 
    */
    post_id: z.number().int().nullable(),
    /**
    * dataType: int4
    * defaultValue: 
    */
    user_id: z.number().int().nullable(),
    /**
    * dataType: int4
    * defaultValue: 
    */
    parent_id: z.number().int().nullable(),
    /**
    * dataType: text
    * defaultValue: 
    */
    content: z.string(),
    /**
    * dataType: bool
    * defaultValue: false
    */
    is_approved: z.boolean().nullable(),
    /**
    * dataType: timestamptz
    * defaultValue: now()
    */
    created_at: z.date().nullable(),
    /**
    * dataType: timestamptz
    * defaultValue: now()
    */
    updated_at: z.date().nullable(),
}).transform(data => ({
    id: data.id,
    postId: data.post_id ?? undefined,
    userId: data.user_id ?? undefined,
    parentId: data.parent_id ?? undefined,
    content: data.content,
    isApproved: data.is_approved ?? undefined,
    createdAt: data.created_at ?? undefined,
    updatedAt: data.updated_at ?? undefined,
}));

type TableReadRecord = z.output<typeof CommentsTableSchema>;

const TableWriteSchema = z.object({
    /**
    * dataType: int4
    * defaultValue: 
    */
    postId: z.number().int().nullish(),
    /**
    * dataType: int4
    * defaultValue: 
    */
    userId: z.number().int().nullish(),
    /**
    * dataType: int4
    * defaultValue: 
    */
    parentId: z.number().int().nullish(),
    /**
    * dataType: text
    * defaultValue: 
    */
    content: z.string(),
    /**
    * dataType: bool
    * defaultValue: false
    */
    isApproved: z.boolean().nullish(),
    /**
    * dataType: timestamptz
    * defaultValue: now()
    */
    createdAt: z.date().nullish(),
    /**
    * dataType: timestamptz
    * defaultValue: now()
    */
    updatedAt: z.date().nullish(),
});

export const CommentsTableInsertSchema = TableWriteSchema.transform(data => ({
    post_id: data.postId,
    user_id: data.userId,
    parent_id: data.parentId,
    content: data.content,
    is_approved: data.isApproved,
    created_at: data.createdAt,
    updated_at: data.updatedAt,
}));

export const CommentsTableUpdateSchema = TableWriteSchema.partial().transform(data => ({
    post_id: data.postId,
    user_id: data.userId,
    parent_id: data.parentId,
    content: data.content,
    is_approved: data.isApproved,
    created_at: data.createdAt,
    updated_at: data.updatedAt,
}));

type TableInsertRecord = z.input<typeof CommentsTableInsertSchema>;

/**
* Represents a database record from the "public.comments" table.
*/
export interface CommentRecord {
    /**
     * Primary key for comments table
     */
    id: TableReadRecord['id'];
    /**
     * ID of the post this comment belongs to
     */
    postId: TableReadRecord['postId'];
    /**
     * ID of the user who wrote the comment
     */
    userId: TableReadRecord['userId'];
    /**
     * ID of the parent comment for nested comments
     */
    parentId: TableReadRecord['parentId'];
    /**
     * Content of the comment
     */
    content: TableReadRecord['content'];
    /**
     * Whether the comment has been approved by moderators
     */
    isApproved: TableReadRecord['isApproved'];
    /**
     * Timestamp when the comment was created
     */
    createdAt: TableReadRecord['createdAt'];
    /**
     * Timestamp when the comment was last updated
     */
    updatedAt: TableReadRecord['updatedAt'];
}

/**
* Represents an insertable database record from the "public.comments" table.
*/
export interface CommentInsertRecord {
    /**
    * ID of the post this comment belongs to
    */
    postId?: TableInsertRecord['postId'];
    /**
    * ID of the user who wrote the comment
    */
    userId?: TableInsertRecord['userId'];
    /**
    * ID of the parent comment for nested comments
    */
    parentId?: TableInsertRecord['parentId'];
    /**
    * Content of the comment
    */
    content: TableInsertRecord['content'];
    /**
    * Whether the comment has been approved by moderators
    * @default: false
    */
    isApproved?: TableInsertRecord['isApproved'];
    /**
    * Timestamp when the comment was created
    * @default: now()
    */
    createdAt?: TableInsertRecord['createdAt'];
    /**
    * Timestamp when the comment was last updated
    * @default: now()
    */
    updatedAt?: TableInsertRecord['updatedAt'];
}

/**
* Represents an updateable database record from the "public.comments" table.
*/
export type CommentUpdateRecord = Partial<CommentInsertRecord>;
