// This file is auto-generated by zod-pg. Do not edit this file directly.

import { z } from 'zod';


/**
 * The base read schema for the "public.order_items" table.
 * This schema is used to validate the data read from the database without any transformations.
 */
export const OrderItemsTableReadSchema = z.object({
    /**
    * dataType: int8
    * defaultValue: nextval('order_items_id_seq'::regclass)
    */
    id: z.number().int(),
    /**
    * dataType: int8
    * defaultValue: 
    */
    order_id: z.number().int().nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: int4
    * defaultValue: 
    */
    product_id: z.number().int().nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: int2
    * defaultValue: 
    */
    quantity: z.number().int(),
    /**
    * dataType: numeric
    * defaultValue: 
    */
    unit_price: z.number(),
    /**
    * dataType: numeric
    * defaultValue: 0
    */
    discount_percent: z.number().nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: numeric
    * defaultValue: (((quantity)::numeric * unit_price) * ((1)::numeric - (discount_percent / (100)::numeric)))
    */
    line_total: z.number().nullish().transform((value) => value ?? undefined).optional(),
});

/**
 * The base record type for the "public.order_items" table.
 * This type represents the raw database record without any transformations.
 */
export type OrderItemReadBaseRecord = z.output<typeof OrderItemsTableReadSchema>;

/**
* The read transform function for the "public.order_items" table.
* Maps the raw database fields to expected property names. e.g snake_case to camelCase.
*/
export const transformOrderItemReadRecord = (data: OrderItemReadBaseRecord): {
    id: OrderItemReadBaseRecord['id'],
    orderId?: OrderItemReadBaseRecord['order_id'],
    productId?: OrderItemReadBaseRecord['product_id'],
    quantity: OrderItemReadBaseRecord['quantity'],
    unitPrice: OrderItemReadBaseRecord['unit_price'],
    discountPercent?: OrderItemReadBaseRecord['discount_percent'],
    lineTotal?: OrderItemReadBaseRecord['line_total'],
} => ({
    id: data.id,
    orderId: data.order_id,
    productId: data.product_id,
    quantity: data.quantity,
    unitPrice: data.unit_price,
    discountPercent: data.discount_percent,
    lineTotal: data.line_total,
});

/**
 * The read schema for the "public.order_items" table.
 * This schema is used to validate the data read from the database with transformations.
 */
export const OrderItemsTableSchema = OrderItemsTableReadSchema.transform(transformOrderItemReadRecord);

/**
 * The base write schema for the "public.order_items" table.
 * This schema is used to validate the data before writing to the database without any transformations.
 */
export const OrderItemsTableWriteSchema = z.object({
    /**
    * dataType: int8
    * defaultValue: 
    */
    orderId: z.number().int().nullish().optional(),
    /**
    * dataType: int4
    * defaultValue: 
    */
    productId: z.number().int().nullish().optional(),
    /**
    * dataType: int2
    * defaultValue: 
    */
    quantity: z.number().int(),
    /**
    * dataType: numeric
    * defaultValue: 
    */
    unitPrice: z.number().max(655362),
    /**
    * dataType: numeric
    * defaultValue: 0
    */
    discountPercent: z.number().max(327682).nullish().optional(),
    /**
    * dataType: numeric
    * defaultValue: (((quantity)::numeric * unit_price) * ((1)::numeric - (discount_percent / (100)::numeric)))
    */
    lineTotal: z.number().max(786434).nullish().optional(),
});

/**
 * The base record type for the "public.order_items" table.
 * This type represents an insertable database record before casing transformations are applied.
 */
export type OrderItemInsertBaseRecord = z.output<typeof OrderItemsTableWriteSchema>;

/**
 * The base record type for the "public.order_items" table.
 * This type represents an updatable database record before casing transformations are applied.
 */
export type OrderItemUpdateBaseRecord = Partial<OrderItemInsertBaseRecord>;

/**
 * The insert transform function for the "public.order_items" table.
 * Maps the expected property names to raw database fields. e.g camelCase to snake_case.
 */
export const transformOrderItemInsertRecord = (data: OrderItemInsertBaseRecord): {
    order_id?: OrderItemInsertBaseRecord['orderId'],
    product_id?: OrderItemInsertBaseRecord['productId'],
    quantity: OrderItemInsertBaseRecord['quantity'],
    unit_price: OrderItemInsertBaseRecord['unitPrice'],
    discount_percent?: OrderItemInsertBaseRecord['discountPercent'],
    line_total?: OrderItemInsertBaseRecord['lineTotal'],
} => ({
    order_id: data.orderId,
    product_id: data.productId,
    quantity: data.quantity,
    unit_price: data.unitPrice,
    discount_percent: data.discountPercent,
    line_total: data.lineTotal,
});

/**
 * The update transform function for the "public.order_items" table.
 * Maps the expected property names to raw database fields. e.g camelCase to snake_case.
 */
export const transformOrderItemUpdateRecord = (data: OrderItemUpdateBaseRecord): {
    order_id?: OrderItemUpdateBaseRecord['orderId'],
    product_id?: OrderItemUpdateBaseRecord['productId'],
    quantity: OrderItemUpdateBaseRecord['quantity'],
    unit_price: OrderItemUpdateBaseRecord['unitPrice'],
    discount_percent?: OrderItemUpdateBaseRecord['discountPercent'],
    line_total?: OrderItemUpdateBaseRecord['lineTotal'],
} => ({
    order_id: data.orderId,
    product_id: data.productId,
    quantity: data.quantity,
    unit_price: data.unitPrice,
    discount_percent: data.discountPercent,
    line_total: data.lineTotal,
});

/**
 * The insert schema for the "public.order_items" table.
 * This schema is used to validate and transform a record before inserting into the database.
 */
export const OrderItemsTableInsertSchema = OrderItemsTableWriteSchema.transform(transformOrderItemInsertRecord);

/**
 * The update schema for the "public.order_items" table.
 * This schema is used to validate and transform a record before updating the database.
 */
export const OrderItemsTableUpdateSchema = OrderItemsTableWriteSchema.partial().transform(transformOrderItemUpdateRecord);

type TableInsertRecord = z.input<typeof OrderItemsTableInsertSchema>;
type TableReadRecord = z.output<typeof OrderItemsTableSchema>;

/**
* Represents a database record from the "public.order_items" table.
*/
export interface OrderItemRecord {
    /**
    * Primary key for order items table
    */
    id: TableReadRecord['id'];
    /**
    * ID of the order this item belongs to
    */
    orderId?: TableReadRecord['orderId'];
    /**
    * ID of the product
    */
    productId?: TableReadRecord['productId'];
    /**
    * Quantity of the product ordered
    */
    quantity: TableReadRecord['quantity'];
    /**
    * Price per unit
    */
    unitPrice: TableReadRecord['unitPrice'];
    /**
    * Discount percentage applied
    */
    discountPercent?: TableReadRecord['discountPercent'];
    /**
    * Calculated line total
    */
    lineTotal?: TableReadRecord['lineTotal'];
}

/**
* Represents an insertable database record from the "public.order_items" table.
*/
export interface OrderItemInsertRecord {
    /**
    * ID of the order this item belongs to
    */
    orderId?: TableInsertRecord['orderId'];
    /**
    * ID of the product
    */
    productId?: TableInsertRecord['productId'];
    /**
    * Quantity of the product ordered
    */
    quantity: TableInsertRecord['quantity'];
    /**
    * Price per unit
    * @maxLen: 655362
    */
    unitPrice: TableInsertRecord['unitPrice'];
    /**
    * Discount percentage applied
    * @maxLen: 327682
    * @default: 0
    */
    discountPercent?: TableInsertRecord['discountPercent'];
    /**
    * Calculated line total
    * @maxLen: 786434
    * @default: (((quantity)::numeric * unit_price) * ((1)::numeric - (discount_percent / (100)::numeric)))
    */
    lineTotal?: TableInsertRecord['lineTotal'];
}

/**
* Represents an updateable database record from the "public.order_items" table.
*/
export type OrderItemUpdateRecord = Partial<OrderItemInsertRecord>;
