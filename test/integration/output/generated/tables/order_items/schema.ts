// This file is auto-generated by zod-pg. Do not edit this file directly.

import { z } from 'zod';


/**
 * Base read schema for the "public.order_items" table.
 * Validates raw rows read from the database (no casing transforms applied yet).
 */
export const OrderItemsTableBaseSchema = z.object({
     /**
      * dataType: int8
      * defaultValue: nextval('order_items_id_seq'::regclass)
      */
    id: z.number().int(),
     /**
      * dataType: int8
      */
    order_id: z.number().int().nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: int4
      */
    product_id: z.number().int().nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: int2
      */
    quantity: z.number().int(),
     /**
      * dataType: numeric
      */
    unit_price: z.number(),
     /**
      * dataType: numeric
      * defaultValue: 0
      */
    discount_percent: z.number().nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: numeric
      * defaultValue: (((quantity)::numeric * unit_price) * ((1)::numeric - (discount_percent / (100)::numeric)))
      */
    line_total: z.number().nullish().transform((value) => value ?? undefined).optional(),
});

/**
 * The base record type for the "public.order_items" table.
 * This type represents the raw database record without case transforms.
 */
export type OrderItemBaseRecord = z.output<typeof OrderItemsTableBaseSchema>;

/**
 * Read transform for the "public.order_items" table.
 * Maps raw database snake_case fields to camelCase properties.
 */
export const transformOrderItemBaseRecord = (data: OrderItemBaseRecord): {
    id: OrderItemBaseRecord['id'],
    orderId?: OrderItemBaseRecord['order_id'],
    productId?: OrderItemBaseRecord['product_id'],
    quantity: OrderItemBaseRecord['quantity'],
    unitPrice: OrderItemBaseRecord['unit_price'],
    discountPercent?: OrderItemBaseRecord['discount_percent'],
    lineTotal?: OrderItemBaseRecord['line_total'],
} => ({
    id: data.id,
    orderId: data.order_id,
    productId: data.product_id,
    quantity: data.quantity,
    unitPrice: data.unit_price,
    discountPercent: data.discount_percent,
    lineTotal: data.line_total,
});

/**
 * Read schema for the "public.order_items" table (after casing transform).
 */
export const OrderItemsTableSchema = OrderItemsTableBaseSchema.transform(transformOrderItemBaseRecord);

/**
 * Base insert/write schema for the "public.order_items" table (no casing transforms).
 */
export const OrderItemsTableInsertBaseSchema = z.object({
     /**
      * dataType: int8
      */
    orderId: z.number().int().nullish().optional(),
     /**
      * dataType: int4
      */
    productId: z.number().int().nullish().optional(),
     /**
      * dataType: int2
      */
    quantity: z.number().int(),
     /**
      * dataType: numeric
      */
    unitPrice: z.number().max(655362),
     /**
      * dataType: numeric
      * defaultValue: 0
      */
    discountPercent: z.number().max(327682).nullish().optional(),
     /**
      * dataType: numeric
      * defaultValue: (((quantity)::numeric * unit_price) * ((1)::numeric - (discount_percent / (100)::numeric)))
      */
    lineTotal: z.number().max(786434).nullish().optional(),
});

/**
 * The base record type for the "public.order_items" table.
 * This type represents an insertable database record before casing transformations are applied.
 */
export type OrderItemInsertBaseRecord = z.output<typeof OrderItemsTableInsertBaseSchema>;

/**
 * The base record type for the "public.order_items" table.
 * This type represents an updatable database record before casing transformations are applied.
 */
export type OrderItemUpdateBaseRecord = Partial<OrderItemInsertBaseRecord>;

/**
 * Insert transform for the "public.order_items" table.
 * Maps camelCase properties to raw database snake_case fields.
 */
export const transformOrderItemInsertBaseRecord = (data: OrderItemInsertBaseRecord): {
    order_id?: OrderItemInsertBaseRecord['orderId'],
    product_id?: OrderItemInsertBaseRecord['productId'],
    quantity: OrderItemInsertBaseRecord['quantity'],
    unit_price: OrderItemInsertBaseRecord['unitPrice'],
    discount_percent?: OrderItemInsertBaseRecord['discountPercent'],
    line_total?: OrderItemInsertBaseRecord['lineTotal'],
} => ({
    order_id: data.orderId,
    product_id: data.productId,
    quantity: data.quantity,
    unit_price: data.unitPrice,
    discount_percent: data.discountPercent,
    line_total: data.lineTotal,
});

/**
 * Update transform for the "public.order_items" table.
 * Maps camelCase properties to raw database snake_case fields.
 */
export const transformOrderItemUpdateBaseRecord = (data: OrderItemUpdateBaseRecord): {
    order_id?: OrderItemUpdateBaseRecord['orderId'],
    product_id?: OrderItemUpdateBaseRecord['productId'],
    quantity: OrderItemUpdateBaseRecord['quantity'],
    unit_price: OrderItemUpdateBaseRecord['unitPrice'],
    discount_percent?: OrderItemUpdateBaseRecord['discountPercent'],
    line_total?: OrderItemUpdateBaseRecord['lineTotal'],
} => ({
    order_id: data.orderId,
    product_id: data.productId,
    quantity: data.quantity,
    unit_price: data.unitPrice,
    discount_percent: data.discountPercent,
    line_total: data.lineTotal,
});

/**
 * Insert schema for the "public.order_items" table (after casing transform).
 */
export const OrderItemsTableInsertSchema = OrderItemsTableInsertBaseSchema.transform(transformOrderItemInsertBaseRecord);

/**
 * Update schema for the "public.order_items" table (after casing transform).
 */
export const OrderItemsTableUpdateSchema = OrderItemsTableInsertBaseSchema.partial().transform(transformOrderItemUpdateBaseRecord);

type TableInsertRecord = z.input<typeof OrderItemsTableInsertSchema>;
type TableReadRecord = z.output<typeof OrderItemsTableSchema>;

/**
 * Read record (casing transformed) for the "public.order_items" table.
 */
export interface OrderItemRecord {
    /**
    * Primary key for order items table
    */
    id: TableReadRecord['id'];
    /**
    * ID of the order this item belongs to
    */
    orderId?: TableReadRecord['orderId'];
    /**
    * ID of the product
    */
    productId?: TableReadRecord['productId'];
    /**
    * Quantity of the product ordered
    */
    quantity: TableReadRecord['quantity'];
    /**
    * Price per unit
    */
    unitPrice: TableReadRecord['unitPrice'];
    /**
    * Discount percentage applied
    */
    discountPercent?: TableReadRecord['discountPercent'];
    /**
    * Calculated line total
    */
    lineTotal?: TableReadRecord['lineTotal'];
}

/**
 * Insert record (casing transformed) for the "public.order_items" table.
 */
export interface OrderItemInsertRecord {
    /**
    * ID of the order this item belongs to
    */
    orderId?: TableInsertRecord['orderId'];
    /**
    * ID of the product
    */
    productId?: TableInsertRecord['productId'];
    /**
    * Quantity of the product ordered
    */
    quantity: TableInsertRecord['quantity'];
    /**
    * Price per unit
    * @maxLen: 655362
    */
    unitPrice: TableInsertRecord['unitPrice'];
    /**
    * Discount percentage applied
    * @maxLen: 327682
    * @default: 0
    */
    discountPercent?: TableInsertRecord['discountPercent'];
    /**
    * Calculated line total
    * @maxLen: 786434
    * @default: (((quantity)::numeric * unit_price) * ((1)::numeric - (discount_percent / (100)::numeric)))
    */
    lineTotal?: TableInsertRecord['lineTotal'];
}

/**
 * Updatable record (casing transformed) for the "public.order_items" table.
 */
export type OrderItemUpdateRecord = Partial<OrderItemInsertRecord>;

