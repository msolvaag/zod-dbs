// This file is auto-generated by zod-pg. Do not edit this file directly.

import { z } from 'zod';


/**
 * The base read schema for the "public.geographic_data" table.
 * This schema is used to validate the data read from the database without any transformations.
 */
export const GeographicDataTableReadSchema = z.object({
    /**
    * dataType: int4
    * defaultValue: nextval('geographic_data_id_seq'::regclass)
    */
    id: z.number().int(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    location_name: z.string(),
    /**
    * dataType: point
    * defaultValue: 
    */
    coordinates: z.string(),
    /**
    * dataType: polygon
    * defaultValue: 
    */
    boundary: z.string().nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: circle
    * defaultValue: 
    */
    area_circle: z.string().nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: float4
    * defaultValue: 
    */
    elevation: z.number().nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    timezone: z.string().nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: bpchar
    * defaultValue: 
    */
    country_code: z.string().nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: _text
    * defaultValue: 
    */
    postal_codes: z.array(z.string()).nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: int4
    * defaultValue: 
    */
    population: z.number().int().nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: date
    * defaultValue: 
    */
    established_date: z.date().nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: timestamptz
    * defaultValue: now()
    */
    last_updated: z.date().nullish().transform((value) => value ?? undefined).optional(),
});

/**
 * The base record type for the "public.geographic_data" table.
 * This type represents the raw database record without any transformations.
 */
export type GeographicDataReadBaseRecord = z.output<typeof GeographicDataTableReadSchema>;

/**
* The read transform function for the "public.geographic_data" table.
* Maps the raw database fields to expected property names. e.g snake_case to camelCase.
*/
export const transformGeographicDataReadRecord = (data: GeographicDataReadBaseRecord): {
    id: GeographicDataReadBaseRecord['id'],
    locationName: GeographicDataReadBaseRecord['location_name'],
    coordinates: GeographicDataReadBaseRecord['coordinates'],
    boundary?: GeographicDataReadBaseRecord['boundary'],
    areaCircle?: GeographicDataReadBaseRecord['area_circle'],
    elevation?: GeographicDataReadBaseRecord['elevation'],
    timezone?: GeographicDataReadBaseRecord['timezone'],
    countryCode?: GeographicDataReadBaseRecord['country_code'],
    postalCodes?: GeographicDataReadBaseRecord['postal_codes'],
    population?: GeographicDataReadBaseRecord['population'],
    establishedDate?: GeographicDataReadBaseRecord['established_date'],
    lastUpdated?: GeographicDataReadBaseRecord['last_updated'],
} => ({
    id: data.id,
    locationName: data.location_name,
    coordinates: data.coordinates,
    boundary: data.boundary,
    areaCircle: data.area_circle,
    elevation: data.elevation,
    timezone: data.timezone,
    countryCode: data.country_code,
    postalCodes: data.postal_codes,
    population: data.population,
    establishedDate: data.established_date,
    lastUpdated: data.last_updated,
});

/**
 * The read schema for the "public.geographic_data" table.
 * This schema is used to validate the data read from the database with transformations.
 */
export const GeographicDataTableSchema = GeographicDataTableReadSchema.transform(transformGeographicDataReadRecord);

/**
 * The base write schema for the "public.geographic_data" table.
 * This schema is used to validate the data before writing to the database without any transformations.
 */
export const GeographicDataTableWriteSchema = z.object({
    /**
    * dataType: varchar
    * defaultValue: 
    */
    locationName: z.string().max(255),
    /**
    * dataType: point
    * defaultValue: 
    */
    coordinates: z.string(),
    /**
    * dataType: polygon
    * defaultValue: 
    */
    boundary: z.string().nullish().optional(),
    /**
    * dataType: circle
    * defaultValue: 
    */
    areaCircle: z.string().nullish().optional(),
    /**
    * dataType: float4
    * defaultValue: 
    */
    elevation: z.number().nullish().optional(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    timezone: z.string().max(50).nullish().optional(),
    /**
    * dataType: bpchar
    * defaultValue: 
    */
    countryCode: z.string().max(2).nullish().optional(),
    /**
    * dataType: _text
    * defaultValue: 
    */
    postalCodes: z.array(z.string()).nullish().optional(),
    /**
    * dataType: int4
    * defaultValue: 
    */
    population: z.number().int().nullish().optional(),
    /**
    * dataType: date
    * defaultValue: 
    */
    establishedDate: z.date().nullish().optional(),
    /**
    * dataType: timestamptz
    * defaultValue: now()
    */
    lastUpdated: z.date().nullish().optional(),
});

/**
 * The base record type for the "public.geographic_data" table.
 * This type represents an insertable database record before casing transformations are applied.
 */
export type GeographicDataInsertBaseRecord = z.output<typeof GeographicDataTableWriteSchema>;

/**
 * The base record type for the "public.geographic_data" table.
 * This type represents an updatable database record before casing transformations are applied.
 */
export type GeographicDataUpdateBaseRecord = Partial<GeographicDataInsertBaseRecord>;

/**
 * The insert transform function for the "public.geographic_data" table.
 * Maps the expected property names to raw database fields. e.g camelCase to snake_case.
 */
export const transformGeographicDataInsertRecord = (data: GeographicDataInsertBaseRecord): {
    location_name: GeographicDataInsertBaseRecord['locationName'],
    coordinates: GeographicDataInsertBaseRecord['coordinates'],
    boundary?: GeographicDataInsertBaseRecord['boundary'],
    area_circle?: GeographicDataInsertBaseRecord['areaCircle'],
    elevation?: GeographicDataInsertBaseRecord['elevation'],
    timezone?: GeographicDataInsertBaseRecord['timezone'],
    country_code?: GeographicDataInsertBaseRecord['countryCode'],
    postal_codes?: GeographicDataInsertBaseRecord['postalCodes'],
    population?: GeographicDataInsertBaseRecord['population'],
    established_date?: GeographicDataInsertBaseRecord['establishedDate'],
    last_updated?: GeographicDataInsertBaseRecord['lastUpdated'],
} => ({
    location_name: data.locationName,
    coordinates: data.coordinates,
    boundary: data.boundary,
    area_circle: data.areaCircle,
    elevation: data.elevation,
    timezone: data.timezone,
    country_code: data.countryCode,
    postal_codes: data.postalCodes,
    population: data.population,
    established_date: data.establishedDate,
    last_updated: data.lastUpdated,
});

/**
 * The update transform function for the "public.geographic_data" table.
 * Maps the expected property names to raw database fields. e.g camelCase to snake_case.
 */
export const transformGeographicDataUpdateRecord = (data: GeographicDataUpdateBaseRecord): {
    location_name: GeographicDataUpdateBaseRecord['locationName'],
    coordinates: GeographicDataUpdateBaseRecord['coordinates'],
    boundary?: GeographicDataUpdateBaseRecord['boundary'],
    area_circle?: GeographicDataUpdateBaseRecord['areaCircle'],
    elevation?: GeographicDataUpdateBaseRecord['elevation'],
    timezone?: GeographicDataUpdateBaseRecord['timezone'],
    country_code?: GeographicDataUpdateBaseRecord['countryCode'],
    postal_codes?: GeographicDataUpdateBaseRecord['postalCodes'],
    population?: GeographicDataUpdateBaseRecord['population'],
    established_date?: GeographicDataUpdateBaseRecord['establishedDate'],
    last_updated?: GeographicDataUpdateBaseRecord['lastUpdated'],
} => ({
    location_name: data.locationName,
    coordinates: data.coordinates,
    boundary: data.boundary,
    area_circle: data.areaCircle,
    elevation: data.elevation,
    timezone: data.timezone,
    country_code: data.countryCode,
    postal_codes: data.postalCodes,
    population: data.population,
    established_date: data.establishedDate,
    last_updated: data.lastUpdated,
});

/**
 * The insert schema for the "public.geographic_data" table.
 * This schema is used to validate and transform a record before inserting into the database.
 */
export const GeographicDataTableInsertSchema = GeographicDataTableWriteSchema.transform(transformGeographicDataInsertRecord);

/**
 * The update schema for the "public.geographic_data" table.
 * This schema is used to validate and transform a record before updating the database.
 */
export const GeographicDataTableUpdateSchema = GeographicDataTableWriteSchema.partial().transform(transformGeographicDataUpdateRecord);

type TableInsertRecord = z.input<typeof GeographicDataTableInsertSchema>;
type TableReadRecord = z.output<typeof GeographicDataTableSchema>;

/**
* Represents a database record from the "public.geographic_data" table.
*/
export interface GeographicDataRecord {
    /**
    * Primary key for geographic data table
    */
    id: TableReadRecord['id'];
    /**
    * Name of the location
    */
    locationName: TableReadRecord['locationName'];
    /**
    * Geographic coordinates
    */
    coordinates: TableReadRecord['coordinates'];
    /**
    * Geographic boundary as polygon
    */
    boundary?: TableReadRecord['boundary'];
    /**
    * Area represented as circle
    */
    areaCircle?: TableReadRecord['areaCircle'];
    /**
    * Elevation above sea level
    */
    elevation?: TableReadRecord['elevation'];
    /**
    * Timezone of the location
    */
    timezone?: TableReadRecord['timezone'];
    /**
    * ISO country code
    */
    countryCode?: TableReadRecord['countryCode'];
    /**
    * Array of postal codes
    */
    postalCodes?: TableReadRecord['postalCodes'];
    /**
    * Population count
    */
    population?: TableReadRecord['population'];
    /**
    * Date when location was established
    */
    establishedDate?: TableReadRecord['establishedDate'];
    /**
    * Timestamp when data was last updated
    */
    lastUpdated?: TableReadRecord['lastUpdated'];
}

/**
* Represents an insertable database record from the "public.geographic_data" table.
*/
export interface GeographicDataInsertRecord {
    /**
    * Name of the location
    * @maxLen: 255
    */
    locationName: TableInsertRecord['locationName'];
    /**
    * Geographic coordinates
    */
    coordinates: TableInsertRecord['coordinates'];
    /**
    * Geographic boundary as polygon
    */
    boundary?: TableInsertRecord['boundary'];
    /**
    * Area represented as circle
    */
    areaCircle?: TableInsertRecord['areaCircle'];
    /**
    * Elevation above sea level
    */
    elevation?: TableInsertRecord['elevation'];
    /**
    * Timezone of the location
    * @maxLen: 50
    */
    timezone?: TableInsertRecord['timezone'];
    /**
    * ISO country code
    * @maxLen: 2
    */
    countryCode?: TableInsertRecord['countryCode'];
    /**
    * Array of postal codes
    */
    postalCodes?: TableInsertRecord['postalCodes'];
    /**
    * Population count
    */
    population?: TableInsertRecord['population'];
    /**
    * Date when location was established
    */
    establishedDate?: TableInsertRecord['establishedDate'];
    /**
    * Timestamp when data was last updated
    * @default: now()
    */
    lastUpdated?: TableInsertRecord['lastUpdated'];
}

/**
* Represents an updateable database record from the "public.geographic_data" table.
*/
export type GeographicDataUpdateRecord = Partial<GeographicDataInsertRecord>;
