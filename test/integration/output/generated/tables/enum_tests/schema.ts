// This file is auto-generated by zod-pg. Do not edit this file directly.

import { z } from 'zod';

export const ENUM_TEST_PRIORITIES = ['low', 'medium', 'high', 'critical'] as const;
export const ENUM_TEST_COLORS = ['red', 'green', 'blue', 'yellow'] as const;
export const ENUM_TEST_SIZES = ['xs', 's', 'm', 'l', 'xl', 'xxl'] as const;
export const ENUM_TEST_GRADES = ['A', 'B', 'C', 'D', 'F'] as const;
export const ENUM_TEST_CATEGORIES = ['electronics', 'clothing', 'books', 'home-garden'] as const;
export const ENUM_TEST_MOODS = ['happy', 'sad', 'angry', 'excited', 'calm'] as const;
export const ENUM_TEST_DIRECTIONS = ['north', 'south', 'east', 'west'] as const;
export const ENUM_TEST_WEATHER_CONDITIONS = ['sunny', 'cloudy', 'rainy', 'snowy', 'foggy'] as const;
export const ENUM_TEST_TASK_STATUSES = ['todo', 'in-progress', 'done', 'cancelled'] as const;
export const ENUM_TEST_DIFFICULTIES = ['1', '2', '3', '4', '5'] as const;
export const ENUM_TEST_WEEKDAYS = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'] as const;
export const ENUM_TEST_PAYMENT_METHODS = ['cash', 'credit-card', 'debit-card', 'paypal', 'bank-transfer'] as const;

/**
 * The base read schema for the "public.enum_tests" table.
 * This schema is used to validate the data read from the database without any transformations.
 */
export const EnumTestsTableReadSchema = z.object({
    /**
    * dataType: int4
    * defaultValue: nextval('enum_tests_id_seq'::regclass)
    */
    id: z.number().int(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    priority: z.enum(ENUM_TEST_PRIORITIES).nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    color: z.enum(ENUM_TEST_COLORS).nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: text
    * defaultValue: 
    */
    size: z.enum(ENUM_TEST_SIZES).nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: bpchar
    * defaultValue: 
    */
    grade: z.enum(ENUM_TEST_GRADES).nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    category: z.enum(ENUM_TEST_CATEGORIES).nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: text
    * defaultValue: 
    */
    mood: z.enum(ENUM_TEST_MOODS).nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    direction: z.enum(ENUM_TEST_DIRECTIONS).nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: text
    * defaultValue: 
    */
    weather_condition: z.enum(ENUM_TEST_WEATHER_CONDITIONS).nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    task_status: z.enum(ENUM_TEST_TASK_STATUSES).nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: int4
    * defaultValue: 
    */
    difficulty: z.enum(ENUM_TEST_DIFFICULTIES).nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    weekday: z.enum(ENUM_TEST_WEEKDAYS).nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: text
    * defaultValue: 
    */
    payment_method: z.enum(ENUM_TEST_PAYMENT_METHODS).nullish().transform((value) => value ?? undefined).optional(),
    /**
    * dataType: timestamptz
    * defaultValue: now()
    */
    created_at: z.date().nullish().transform((value) => value ?? undefined).optional(),
});

/**
 * The base record type for the "public.enum_tests" table.
 * This type represents the raw database record without any transformations.
 */
export type EnumTestReadBaseRecord = z.output<typeof EnumTestsTableReadSchema>;

/**
* The read transform function for the "public.enum_tests" table.
* Maps the raw database fields to expected property names. e.g snake_case to camelCase.
*/
export const transformEnumTestReadRecord = (data: EnumTestReadBaseRecord): {
    id: EnumTestReadBaseRecord['id'],
    priority?: EnumTestReadBaseRecord['priority'],
    color?: EnumTestReadBaseRecord['color'],
    size?: EnumTestReadBaseRecord['size'],
    grade?: EnumTestReadBaseRecord['grade'],
    category?: EnumTestReadBaseRecord['category'],
    mood?: EnumTestReadBaseRecord['mood'],
    direction?: EnumTestReadBaseRecord['direction'],
    weatherCondition?: EnumTestReadBaseRecord['weather_condition'],
    taskStatus?: EnumTestReadBaseRecord['task_status'],
    difficulty?: EnumTestReadBaseRecord['difficulty'],
    weekday?: EnumTestReadBaseRecord['weekday'],
    paymentMethod?: EnumTestReadBaseRecord['payment_method'],
    createdAt?: EnumTestReadBaseRecord['created_at'],
} => ({
    id: data.id,
    priority: data.priority,
    color: data.color,
    size: data.size,
    grade: data.grade,
    category: data.category,
    mood: data.mood,
    direction: data.direction,
    weatherCondition: data.weather_condition,
    taskStatus: data.task_status,
    difficulty: data.difficulty,
    weekday: data.weekday,
    paymentMethod: data.payment_method,
    createdAt: data.created_at,
});

/**
 * The read schema for the "public.enum_tests" table.
 * This schema is used to validate the data read from the database with transformations.
 */
export const EnumTestsTableSchema = EnumTestsTableReadSchema.transform(transformEnumTestReadRecord);

/**
 * The base write schema for the "public.enum_tests" table.
 * This schema is used to validate the data before writing to the database without any transformations.
 */
export const EnumTestsTableWriteSchema = z.object({
    /**
    * dataType: varchar
    * defaultValue: 
    */
    priority: z.enum(ENUM_TEST_PRIORITIES).nullish().optional(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    color: z.enum(ENUM_TEST_COLORS).nullish().optional(),
    /**
    * dataType: text
    * defaultValue: 
    */
    size: z.enum(ENUM_TEST_SIZES).nullish().optional(),
    /**
    * dataType: bpchar
    * defaultValue: 
    */
    grade: z.enum(ENUM_TEST_GRADES).nullish().optional(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    category: z.enum(ENUM_TEST_CATEGORIES).nullish().optional(),
    /**
    * dataType: text
    * defaultValue: 
    */
    mood: z.enum(ENUM_TEST_MOODS).nullish().optional(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    direction: z.enum(ENUM_TEST_DIRECTIONS).nullish().optional(),
    /**
    * dataType: text
    * defaultValue: 
    */
    weatherCondition: z.enum(ENUM_TEST_WEATHER_CONDITIONS).nullish().optional(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    taskStatus: z.enum(ENUM_TEST_TASK_STATUSES).nullish().optional(),
    /**
    * dataType: int4
    * defaultValue: 
    */
    difficulty: z.enum(ENUM_TEST_DIFFICULTIES).nullish().optional(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    weekday: z.enum(ENUM_TEST_WEEKDAYS).nullish().optional(),
    /**
    * dataType: text
    * defaultValue: 
    */
    paymentMethod: z.enum(ENUM_TEST_PAYMENT_METHODS).nullish().optional(),
    /**
    * dataType: timestamptz
    * defaultValue: now()
    */
    createdAt: z.date().nullish().optional(),
});

/**
 * The base record type for the "public.enum_tests" table.
 * This type represents an insertable database record before casing transformations are applied.
 */
export type EnumTestInsertBaseRecord = z.output<typeof EnumTestsTableWriteSchema>;

/**
 * The base record type for the "public.enum_tests" table.
 * This type represents an updatable database record before casing transformations are applied.
 */
export type EnumTestUpdateBaseRecord = Partial<EnumTestInsertBaseRecord>;

/**
 * The insert transform function for the "public.enum_tests" table.
 * Maps the expected property names to raw database fields. e.g camelCase to snake_case.
 */
export const transformEnumTestInsertRecord = (data: EnumTestInsertBaseRecord): {
    priority?: EnumTestInsertBaseRecord['priority'],
    color?: EnumTestInsertBaseRecord['color'],
    size?: EnumTestInsertBaseRecord['size'],
    grade?: EnumTestInsertBaseRecord['grade'],
    category?: EnumTestInsertBaseRecord['category'],
    mood?: EnumTestInsertBaseRecord['mood'],
    direction?: EnumTestInsertBaseRecord['direction'],
    weather_condition?: EnumTestInsertBaseRecord['weatherCondition'],
    task_status?: EnumTestInsertBaseRecord['taskStatus'],
    difficulty?: EnumTestInsertBaseRecord['difficulty'],
    weekday?: EnumTestInsertBaseRecord['weekday'],
    payment_method?: EnumTestInsertBaseRecord['paymentMethod'],
    created_at?: EnumTestInsertBaseRecord['createdAt'],
} => ({
    priority: data.priority,
    color: data.color,
    size: data.size,
    grade: data.grade,
    category: data.category,
    mood: data.mood,
    direction: data.direction,
    weather_condition: data.weatherCondition,
    task_status: data.taskStatus,
    difficulty: data.difficulty,
    weekday: data.weekday,
    payment_method: data.paymentMethod,
    created_at: data.createdAt,
});

/**
 * The update transform function for the "public.enum_tests" table.
 * Maps the expected property names to raw database fields. e.g camelCase to snake_case.
 */
export const transformEnumTestUpdateRecord = (data: EnumTestUpdateBaseRecord): {
    priority?: EnumTestUpdateBaseRecord['priority'],
    color?: EnumTestUpdateBaseRecord['color'],
    size?: EnumTestUpdateBaseRecord['size'],
    grade?: EnumTestUpdateBaseRecord['grade'],
    category?: EnumTestUpdateBaseRecord['category'],
    mood?: EnumTestUpdateBaseRecord['mood'],
    direction?: EnumTestUpdateBaseRecord['direction'],
    weather_condition?: EnumTestUpdateBaseRecord['weatherCondition'],
    task_status?: EnumTestUpdateBaseRecord['taskStatus'],
    difficulty?: EnumTestUpdateBaseRecord['difficulty'],
    weekday?: EnumTestUpdateBaseRecord['weekday'],
    payment_method?: EnumTestUpdateBaseRecord['paymentMethod'],
    created_at?: EnumTestUpdateBaseRecord['createdAt'],
} => ({
    priority: data.priority,
    color: data.color,
    size: data.size,
    grade: data.grade,
    category: data.category,
    mood: data.mood,
    direction: data.direction,
    weather_condition: data.weatherCondition,
    task_status: data.taskStatus,
    difficulty: data.difficulty,
    weekday: data.weekday,
    payment_method: data.paymentMethod,
    created_at: data.createdAt,
});

/**
 * The insert schema for the "public.enum_tests" table.
 * This schema is used to validate and transform a record before inserting into the database.
 */
export const EnumTestsTableInsertSchema = EnumTestsTableWriteSchema.transform(transformEnumTestInsertRecord);

/**
 * The update schema for the "public.enum_tests" table.
 * This schema is used to validate and transform a record before updating the database.
 */
export const EnumTestsTableUpdateSchema = EnumTestsTableWriteSchema.partial().transform(transformEnumTestUpdateRecord);

type TableInsertRecord = z.input<typeof EnumTestsTableInsertSchema>;
type TableReadRecord = z.output<typeof EnumTestsTableSchema>;
export type EnumTestPriority = (typeof ENUM_TEST_PRIORITIES)[number];
export type EnumTestColor = (typeof ENUM_TEST_COLORS)[number];
export type EnumTestSize = (typeof ENUM_TEST_SIZES)[number];
export type EnumTestGrade = (typeof ENUM_TEST_GRADES)[number];
export type EnumTestCategory = (typeof ENUM_TEST_CATEGORIES)[number];
export type EnumTestMood = (typeof ENUM_TEST_MOODS)[number];
export type EnumTestDirection = (typeof ENUM_TEST_DIRECTIONS)[number];
export type EnumTestWeatherCondition = (typeof ENUM_TEST_WEATHER_CONDITIONS)[number];
export type EnumTestTaskStatus = (typeof ENUM_TEST_TASK_STATUSES)[number];
export type EnumTestDifficulty = (typeof ENUM_TEST_DIFFICULTIES)[number];
export type EnumTestWeekday = (typeof ENUM_TEST_WEEKDAYS)[number];
export type EnumTestPaymentMethod = (typeof ENUM_TEST_PAYMENT_METHODS)[number];

/**
* Represents a database record from the "public.enum_tests" table.
*/
export interface EnumTestRecord {
    /**
    * Primary key for enum tests table
    */
    id: TableReadRecord['id'];
    /**
    * Task priority level
    */
    priority?: TableReadRecord['priority'];
    /**
    * Color selection
    */
    color?: TableReadRecord['color'];
    /**
    * Size option
    */
    size?: TableReadRecord['size'];
    /**
    * Letter grade
    */
    grade?: TableReadRecord['grade'];
    /**
    * Product category
    */
    category?: TableReadRecord['category'];
    /**
    * Current mood state
    */
    mood?: TableReadRecord['mood'];
    /**
    * Compass direction
    */
    direction?: TableReadRecord['direction'];
    /**
    * Current weather condition
    */
    weatherCondition?: TableReadRecord['weatherCondition'];
    /**
    * Status of the task
    */
    taskStatus?: TableReadRecord['taskStatus'];
    /**
    * Difficulty level (1-5)
    */
    difficulty?: TableReadRecord['difficulty'];
    /**
    * Day of the week
    */
    weekday?: TableReadRecord['weekday'];
    /**
    * Payment method used
    */
    paymentMethod?: TableReadRecord['paymentMethod'];
    /**
    * Timestamp when record was created
    */
    createdAt?: TableReadRecord['createdAt'];
}

/**
* Represents an insertable database record from the "public.enum_tests" table.
*/
export interface EnumTestInsertRecord {
    /**
    * Task priority level
    * @maxLen: 10
    */
    priority?: TableInsertRecord['priority'];
    /**
    * Color selection
    * @maxLen: 20
    */
    color?: TableInsertRecord['color'];
    /**
    * Size option
    */
    size?: TableInsertRecord['size'];
    /**
    * Letter grade
    * @maxLen: 1
    */
    grade?: TableInsertRecord['grade'];
    /**
    * Product category
    * @maxLen: 30
    */
    category?: TableInsertRecord['category'];
    /**
    * Current mood state
    */
    mood?: TableInsertRecord['mood'];
    /**
    * Compass direction
    * @maxLen: 10
    */
    direction?: TableInsertRecord['direction'];
    /**
    * Current weather condition
    */
    weatherCondition?: TableInsertRecord['weatherCondition'];
    /**
    * Status of the task
    * @maxLen: 20
    */
    taskStatus?: TableInsertRecord['taskStatus'];
    /**
    * Difficulty level (1-5)
    */
    difficulty?: TableInsertRecord['difficulty'];
    /**
    * Day of the week
    * @maxLen: 10
    */
    weekday?: TableInsertRecord['weekday'];
    /**
    * Payment method used
    */
    paymentMethod?: TableInsertRecord['paymentMethod'];
    /**
    * Timestamp when record was created
    * @default: now()
    */
    createdAt?: TableInsertRecord['createdAt'];
}

/**
* Represents an updateable database record from the "public.enum_tests" table.
*/
export type EnumTestUpdateRecord = Partial<EnumTestInsertRecord>;
