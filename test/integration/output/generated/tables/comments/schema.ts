// This file is auto-generated by zod-pg. Do not edit this file directly.

import { z } from 'zod';


/**
 * Base read schema for the "public.comments" table.
 * Validates raw rows read from the database (no casing transforms applied yet).
 */
export const CommentsTableBaseSchema = z.object({
     /**
      * dataType: int4
      * defaultValue: nextval('comments_id_seq'::regclass)
      */
    id: z.number().int(),
     /**
      * dataType: int4
      */
    post_id: z.number().int().nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: int4
      */
    user_id: z.number().int().nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: int4
      */
    parent_id: z.number().int().nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: text
      */
    content: z.string(),
     /**
      * dataType: bool
      * defaultValue: false
      */
    is_approved: z.boolean().nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: timestamptz
      * defaultValue: now()
      */
    created_at: z.date().nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: timestamptz
      * defaultValue: now()
      */
    updated_at: z.date().nullish().transform((value) => value ?? undefined).optional(),
});

/**
 * The base record type for the "public.comments" table.
 * This type represents the raw database record without case transforms.
 */
export type CommentBaseRecord = z.output<typeof CommentsTableBaseSchema>;

/**
 * Read transform for the "public.comments" table.
 * Maps raw database snake_case fields to camelCase properties.
 */
export const transformCommentBaseRecord = (data: CommentBaseRecord): {
    id: CommentBaseRecord['id'],
    postId?: CommentBaseRecord['post_id'],
    userId?: CommentBaseRecord['user_id'],
    parentId?: CommentBaseRecord['parent_id'],
    content: CommentBaseRecord['content'],
    isApproved?: CommentBaseRecord['is_approved'],
    createdAt?: CommentBaseRecord['created_at'],
    updatedAt?: CommentBaseRecord['updated_at'],
} => ({
    id: data.id,
    postId: data.post_id,
    userId: data.user_id,
    parentId: data.parent_id,
    content: data.content,
    isApproved: data.is_approved,
    createdAt: data.created_at,
    updatedAt: data.updated_at,
});

/**
 * Read schema for the "public.comments" table (after casing transform).
 */
export const CommentsTableSchema = CommentsTableBaseSchema.transform(transformCommentBaseRecord);

/**
 * Base insert/write schema for the "public.comments" table (no casing transforms).
 */
export const CommentsTableInsertBaseSchema = z.object({
     /**
      * dataType: int4
      */
    postId: z.number().int().nullish().optional(),
     /**
      * dataType: int4
      */
    userId: z.number().int().nullish().optional(),
     /**
      * dataType: int4
      */
    parentId: z.number().int().nullish().optional(),
     /**
      * dataType: text
      */
    content: z.string(),
     /**
      * dataType: bool
      * defaultValue: false
      */
    isApproved: z.boolean().nullish().optional(),
     /**
      * dataType: timestamptz
      * defaultValue: now()
      */
    createdAt: z.date().nullish().optional(),
     /**
      * dataType: timestamptz
      * defaultValue: now()
      */
    updatedAt: z.date().nullish().optional(),
});

/**
 * The base record type for the "public.comments" table.
 * This type represents an insertable database record before casing transformations are applied.
 */
export type CommentInsertBaseRecord = z.output<typeof CommentsTableInsertBaseSchema>;

/**
 * The base record type for the "public.comments" table.
 * This type represents an updatable database record before casing transformations are applied.
 */
export type CommentUpdateBaseRecord = Partial<CommentInsertBaseRecord>;

/**
 * Insert transform for the "public.comments" table.
 * Maps camelCase properties to raw database snake_case fields.
 */
export const transformCommentInsertBaseRecord = (data: CommentInsertBaseRecord): {
    post_id?: CommentInsertBaseRecord['postId'],
    user_id?: CommentInsertBaseRecord['userId'],
    parent_id?: CommentInsertBaseRecord['parentId'],
    content: CommentInsertBaseRecord['content'],
    is_approved?: CommentInsertBaseRecord['isApproved'],
    created_at?: CommentInsertBaseRecord['createdAt'],
    updated_at?: CommentInsertBaseRecord['updatedAt'],
} => ({
    post_id: data.postId,
    user_id: data.userId,
    parent_id: data.parentId,
    content: data.content,
    is_approved: data.isApproved,
    created_at: data.createdAt,
    updated_at: data.updatedAt,
});

/**
 * Update transform for the "public.comments" table.
 * Maps camelCase properties to raw database snake_case fields.
 */
export const transformCommentUpdateBaseRecord = (data: CommentUpdateBaseRecord): {
    post_id?: CommentUpdateBaseRecord['postId'],
    user_id?: CommentUpdateBaseRecord['userId'],
    parent_id?: CommentUpdateBaseRecord['parentId'],
    content: CommentUpdateBaseRecord['content'],
    is_approved?: CommentUpdateBaseRecord['isApproved'],
    created_at?: CommentUpdateBaseRecord['createdAt'],
    updated_at?: CommentUpdateBaseRecord['updatedAt'],
} => ({
    post_id: data.postId,
    user_id: data.userId,
    parent_id: data.parentId,
    content: data.content,
    is_approved: data.isApproved,
    created_at: data.createdAt,
    updated_at: data.updatedAt,
});

/**
 * Insert schema for the "public.comments" table (after casing transform).
 */
export const CommentsTableInsertSchema = CommentsTableInsertBaseSchema.transform(transformCommentInsertBaseRecord);

/**
 * Update schema for the "public.comments" table (after casing transform).
 */
export const CommentsTableUpdateSchema = CommentsTableInsertBaseSchema.partial().transform(transformCommentUpdateBaseRecord);

type TableInsertRecord = z.input<typeof CommentsTableInsertSchema>;
type TableReadRecord = z.output<typeof CommentsTableSchema>;

/**
 * Read record (casing transformed) for the "public.comments" table.
 */
export interface CommentRecord {
    /**
    * Primary key for comments table
    */
    id: TableReadRecord['id'];
    /**
    * ID of the post this comment belongs to
    */
    postId?: TableReadRecord['postId'];
    /**
    * ID of the user who wrote the comment
    */
    userId?: TableReadRecord['userId'];
    /**
    * ID of the parent comment for nested comments
    */
    parentId?: TableReadRecord['parentId'];
    /**
    * Content of the comment
    */
    content: TableReadRecord['content'];
    /**
    * Whether the comment has been approved by moderators
    */
    isApproved?: TableReadRecord['isApproved'];
    /**
    * Timestamp when the comment was created
    */
    createdAt?: TableReadRecord['createdAt'];
    /**
    * Timestamp when the comment was last updated
    */
    updatedAt?: TableReadRecord['updatedAt'];
}

/**
 * Insert record (casing transformed) for the "public.comments" table.
 */
export interface CommentInsertRecord {
    /**
    * ID of the post this comment belongs to
    */
    postId?: TableInsertRecord['postId'];
    /**
    * ID of the user who wrote the comment
    */
    userId?: TableInsertRecord['userId'];
    /**
    * ID of the parent comment for nested comments
    */
    parentId?: TableInsertRecord['parentId'];
    /**
    * Content of the comment
    */
    content: TableInsertRecord['content'];
    /**
    * Whether the comment has been approved by moderators
    * @default: false
    */
    isApproved?: TableInsertRecord['isApproved'];
    /**
    * Timestamp when the comment was created
    * @default: now()
    */
    createdAt?: TableInsertRecord['createdAt'];
    /**
    * Timestamp when the comment was last updated
    * @default: now()
    */
    updatedAt?: TableInsertRecord['updatedAt'];
}

/**
 * Updatable record (casing transformed) for the "public.comments" table.
 */
export type CommentUpdateRecord = Partial<CommentInsertRecord>;

