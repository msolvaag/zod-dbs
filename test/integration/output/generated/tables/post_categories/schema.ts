// This file is auto-generated by zod-pg. Do not edit this file directly.

import { z } from 'zod';


/**
 * Base read schema for the "public.post_categories" table.
 * Validates raw rows read from the database (no casing transforms applied yet).
 */
export const PostCategoriesTableBaseSchema = z.object({
     /**
      * dataType: int4
      */
    post_id: z.number().int(),
     /**
      * dataType: int4
      */
    category_id: z.number().int(),
});

/**
 * The base record type for the "public.post_categories" table.
 * This type represents the raw database record without case transforms.
 */
export type PostCategoryBaseRecord = z.output<typeof PostCategoriesTableBaseSchema>;

/**
 * Read transform for the "public.post_categories" table.
 * Maps database fields to app case properties.
 */
export const transformPostCategoryBaseRecord = (data: PostCategoryBaseRecord): {
    postId: PostCategoryBaseRecord['post_id'],
    categoryId: PostCategoryBaseRecord['category_id'],
} => ({
    postId: data.post_id,
    categoryId: data.category_id,
});

/**
 * Read schema for the "public.post_categories" table (after casing transform).
 */
export const PostCategoriesTableSchema = PostCategoriesTableBaseSchema.transform(transformPostCategoryBaseRecord);

/**
 * Base insert/write schema for the "public.post_categories" table (no casing transforms).
 */
export const PostCategoriesTableInsertBaseSchema = z.object({
     /**
      * dataType: int4
      */
    postId: z.number().int(),
     /**
      * dataType: int4
      */
    categoryId: z.number().int(),
});

/**
 * The base record type for the "public.post_categories" table.
 * This type represents an insertable database record before casing transformations are applied.
 */
export type PostCategoryInsertBaseRecord = z.output<typeof PostCategoriesTableInsertBaseSchema>;

/**
 * The base record type for the "public.post_categories" table.
 * This type represents an updatable database record before casing transformations are applied.
 */
export type PostCategoryUpdateBaseRecord = Partial<PostCategoryInsertBaseRecord>;

/**
 * Insert transform for the "public.post_categories" table.
 * Maps app cased properties to database fields.
 */
export const transformPostCategoryInsertBaseRecord = (data: PostCategoryInsertBaseRecord): {
    post_id: PostCategoryInsertBaseRecord['postId'],
    category_id: PostCategoryInsertBaseRecord['categoryId'],
} => ({
    post_id: data.postId,
    category_id: data.categoryId,
});

/**
 * Update transform for the "public.post_categories" table.
 * Maps app cased properties to database fields.
 */
export const transformPostCategoryUpdateBaseRecord = (data: PostCategoryUpdateBaseRecord): {
    post_id: PostCategoryUpdateBaseRecord['postId'],
    category_id: PostCategoryUpdateBaseRecord['categoryId'],
} => ({
    post_id: data.postId,
    category_id: data.categoryId,
});

/**
 * Insert schema for the "public.post_categories" table (after casing transform).
 */
export const PostCategoriesTableInsertSchema = PostCategoriesTableInsertBaseSchema.transform(transformPostCategoryInsertBaseRecord);

/**
 * Update schema for the "public.post_categories" table (after casing transform).
 */
export const PostCategoriesTableUpdateSchema = PostCategoriesTableInsertBaseSchema.partial().transform(transformPostCategoryUpdateBaseRecord);

type TableInsertRecord = z.input<typeof PostCategoriesTableInsertSchema>;
type TableReadRecord = z.output<typeof PostCategoriesTableSchema>;

/**
 * Read record (casing transformed) for the "public.post_categories" table.
 */
export interface PostCategoryRecord {
    /**
    * ID of the post
    */
    postId: TableReadRecord['postId'];
    /**
    * ID of the category
    */
    categoryId: TableReadRecord['categoryId'];
}

/**
 * Insert record (casing transformed) for the "public.post_categories" table.
 */
export interface PostCategoryInsertRecord {
    /**
    * ID of the post
    */
    postId: TableInsertRecord['postId'];
    /**
    * ID of the category
    */
    categoryId: TableInsertRecord['categoryId'];
}

/**
 * Updatable record (casing transformed) for the "public.post_categories" table.
 */
export type PostCategoryUpdateRecord = Partial<PostCategoryInsertRecord>;

