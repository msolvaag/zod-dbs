// This file is auto-generated by zod-pg. Do not edit this file directly.

import { z } from 'zod';


/**
 * The base read schema for the "public.post_categories" table.
 * This schema is used to validate the data read from the database without any transformations.
 */
export const PostCategoriesTableReadSchema = z.object({
    /**
    * dataType: int4
    * defaultValue: 
    */
    post_id: z.number().int(),
    /**
    * dataType: int4
    * defaultValue: 
    */
    category_id: z.number().int(),
});

/**
 * The base record type for the "public.post_categories" table.
 * This type represents the raw database record without any transformations.
 */
export type PostCategoryReadBaseRecord = z.output<typeof PostCategoriesTableReadSchema>;

/**
* The read transform function for the "public.post_categories" table.
* Maps the raw database fields to expected property names. e.g snake_case to camelCase.
*/
export const transformPostCategoryReadRecord = (data: PostCategoryReadBaseRecord): {
    postId: PostCategoryReadBaseRecord['post_id'],
    categoryId: PostCategoryReadBaseRecord['category_id'],
} => ({
    postId: data.post_id,
    categoryId: data.category_id,
});

/**
 * The read schema for the "public.post_categories" table.
 * This schema is used to validate the data read from the database with transformations.
 */
export const PostCategoriesTableSchema = PostCategoriesTableReadSchema.transform(transformPostCategoryReadRecord);

/**
 * The base write schema for the "public.post_categories" table.
 * This schema is used to validate the data before writing to the database without any transformations.
 */
export const PostCategoriesTableWriteSchema = z.object({
    /**
    * dataType: int4
    * defaultValue: 
    */
    postId: z.number().int(),
    /**
    * dataType: int4
    * defaultValue: 
    */
    categoryId: z.number().int(),
});

/**
 * The base record type for the "public.post_categories" table.
 * This type represents an insertable database record before casing transformations are applied.
 */
export type PostCategoryInsertBaseRecord = z.output<typeof PostCategoriesTableWriteSchema>;

/**
 * The base record type for the "public.post_categories" table.
 * This type represents an updatable database record before casing transformations are applied.
 */
export type PostCategoryUpdateBaseRecord = Partial<PostCategoryInsertBaseRecord>;

/**
 * The insert transform function for the "public.post_categories" table.
 * Maps the expected property names to raw database fields. e.g camelCase to snake_case.
 */
export const transformPostCategoryInsertRecord = (data: PostCategoryInsertBaseRecord): {
    post_id: PostCategoryInsertBaseRecord['postId'],
    category_id: PostCategoryInsertBaseRecord['categoryId'],
} => ({
    post_id: data.postId,
    category_id: data.categoryId,
});

/**
 * The update transform function for the "public.post_categories" table.
 * Maps the expected property names to raw database fields. e.g camelCase to snake_case.
 */
export const transformPostCategoryUpdateRecord = (data: PostCategoryUpdateBaseRecord): {
    post_id: PostCategoryUpdateBaseRecord['postId'],
    category_id: PostCategoryUpdateBaseRecord['categoryId'],
} => ({
    post_id: data.postId,
    category_id: data.categoryId,
});

/**
 * The insert schema for the "public.post_categories" table.
 * This schema is used to validate and transform a record before inserting into the database.
 */
export const PostCategoriesTableInsertSchema = PostCategoriesTableWriteSchema.transform(transformPostCategoryInsertRecord);

/**
 * The update schema for the "public.post_categories" table.
 * This schema is used to validate and transform a record before updating the database.
 */
export const PostCategoriesTableUpdateSchema = PostCategoriesTableWriteSchema.partial().transform(transformPostCategoryUpdateRecord);

type TableInsertRecord = z.input<typeof PostCategoriesTableInsertSchema>;
type TableReadRecord = z.output<typeof PostCategoriesTableSchema>;

/**
* Represents a database record from the "public.post_categories" table.
*/
export interface PostCategoryRecord {
    /**
    * ID of the post
    */
    postId: TableReadRecord['postId'];
    /**
    * ID of the category
    */
    categoryId: TableReadRecord['categoryId'];
}

/**
* Represents an insertable database record from the "public.post_categories" table.
*/
export interface PostCategoryInsertRecord {
    /**
    * ID of the post
    */
    postId: TableInsertRecord['postId'];
    /**
    * ID of the category
    */
    categoryId: TableInsertRecord['categoryId'];
}

/**
* Represents an updateable database record from the "public.post_categories" table.
*/
export type PostCategoryUpdateRecord = Partial<PostCategoryInsertRecord>;
