// Jest Snapshot v1, https://jestjs.io/docs/snapshot-testing

exports[`CLI generates correct zod schemas: constants.ts 1`] = `
"// This file is auto-generated by zod-pg
// Do not edit this file directly.

export const TABLE_POSTS = 'posts';
export const TABLE_USERS = 'users';
"
`;

exports[`CLI generates correct zod schemas: tables/index.ts 1`] = `
"// This file is auto-generated by zod-pg
// Do not edit this file directly.

export * from './posts';
export * from './users';
"
`;

exports[`CLI generates correct zod schemas: tables/posts.ts 1`] = `
"// This file is auto-generated by zod-pg
// Do not edit this file directly.

import { z } from 'zod';


export const PostsTableInsertSchema = z.object({
  user_id: z.number().int().nullable().optional(),
  title: z.string(),
  content: z.string().nullable().optional(),
  published: z.boolean().nullable().optional(),
});

export const PostsTableSchema = z.object({
  id: z.number().int(),
  user_id: z.number().int().nullable().optional().transform(val => (val === null ? undefined : val)),
  title: z.string(),
  content: z.string().nullable().optional().transform(val => (val === null ? undefined : val)),
  published: z.boolean().nullable().optional().transform(val => (val === null ? undefined : val)),
});

export const PostsTableUpdateSchema = PostsTableInsertSchema.partial();

export type PostRecord = z.infer<typeof PostsTableSchema>;
export type PostInsertRecord = z.input<typeof PostsTableInsertSchema>;
export type PostUpdateRecord = z.input<typeof PostsTableUpdateSchema>;
"
`;

exports[`CLI generates correct zod schemas: tables/users.ts 1`] = `
"// This file is auto-generated by zod-pg
// Do not edit this file directly.

import { z } from 'zod';
import * as json from '../../json';


export const UsersTableInsertSchema = z.object({
  name: z.string().max(100),
  email: z.string().max(255).nullable().optional(),
  status: z.string().max(20).nullable().optional(),
  profile: json.UserProfileSchema.nullable().optional().transform(val => val ? JSON.stringify(val) : null),
  created_at: z.date({ coerce: true }).nullable().optional(),
});

export const UsersTableSchema = z.object({
  id: z.number().int(),
  name: z.string(),
  email: z.string().nullable().optional().transform(val => (val === null ? undefined : val)),
  status: z.string().nullable().optional().transform(val => (val === null ? undefined : val)),
  profile: json.UserProfileSchema.nullable().optional().transform(val => (val === null ? undefined : val)),
  created_at: z.date({ coerce: true }).nullable().optional().transform(val => (val === null ? undefined : val)),
});

export const UsersTableUpdateSchema = UsersTableInsertSchema.partial();

export type UserRecord = z.infer<typeof UsersTableSchema>;
export type UserInsertRecord = z.input<typeof UsersTableInsertSchema>;
export type UserUpdateRecord = z.input<typeof UsersTableUpdateSchema>;
"
`;

exports[`CLI generates correct zod schemas: types.ts 1`] = `
"// This file is auto-generated by zod-pg
// Do not edit this file directly.

export type Table = 
  | 'posts'
  | 'users';
"
`;
