// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`casing options > generates schemas with camelCase field names and PascalCase object names (default) > default/constants.ts 1`] = `
"// This file is auto-generated by zod-pg. Do not edit this file directly.

export const TABLE_POSTS = 'posts';
export const TABLE_USERS = 'users';
"
`;

exports[`casing options > generates schemas with camelCase field names and PascalCase object names (default) > default/tables/index.ts 1`] = `
"// This file is auto-generated by zod-pg. Do not edit this file directly.

export * from './posts';
export * from './users';
"
`;

exports[`casing options > generates schemas with camelCase field names and PascalCase object names (default) > default/tables/posts.ts 1`] = `
"// This file is auto-generated by zod-pg. Do not edit this file directly.

import { z } from 'zod';
export const POST_STATUSES = ['draft', 'published', 'archived'] as const;
export const PostsTableSchema = z.object({
    /**
    * dataType: int4
    * defaultValue: nextval('posts_id_seq'::regclass)
    */
    id: z.number().int(),
    /**
    * dataType: int4
    * defaultValue: 
    */
    user_id: z.number().int().nullable(),
    /**
    * dataType: text
    * defaultValue: 
    */
    title: z.string(),
    /**
    * dataType: text
    * defaultValue: 
    */
    content: z.string().nullable(),
    /**
    * dataType: bool
    * defaultValue: false
    */
    published: z.boolean().nullable(),
    /**
    * dataType: varchar
    * defaultValue: 'draft'::character varying
    */
    status: z.enum(POST_STATUSES).nullable(),
    /**
    * dataType: int4
    * defaultValue: 0
    */
    views: z.number().int().nullable(),
    /**
    * dataType: _text
    * defaultValue: 
    */
    tags: z.array(z.string()).nullable(),
    /**
    * dataType: jsonb
    * defaultValue: 
    */
    metadata: z.any().nullable(),
    /**
    * dataType: timestamptz
    * defaultValue: 
    */
    published_at: z.date().nullable(),
    /**
    * dataType: timestamptz
    * defaultValue: now()
    */
    updated_at: z.date().nullable(),
}).transform(data => ({
    id: data.id,
    userId: data.user_id ?? undefined,
    title: data.title,
    content: data.content ?? undefined,
    published: data.published ?? undefined,
    status: data.status ?? undefined,
    views: data.views ?? undefined,
    tags: data.tags ?? undefined,
    metadata: data.metadata ?? undefined,
    publishedAt: data.published_at ?? undefined,
    updatedAt: data.updated_at ?? undefined,
}));

type TableReadRecord = z.output<typeof PostsTableSchema>;
const TableWriteSchema = z.object({
    /**
    * dataType: int4
    * defaultValue: 
    */
    userId: z.number().int().nullish(),
    /**
    * dataType: text
    * defaultValue: 
    */
    title: z.string(),
    /**
    * dataType: text
    * defaultValue: 
    */
    content: z.string().nullish(),
    /**
    * dataType: bool
    * defaultValue: false
    */
    published: z.boolean().nullish(),
    /**
    * dataType: varchar
    * defaultValue: 'draft'::character varying
    */
    status: z.enum(POST_STATUSES).nullish(),
    /**
    * dataType: int4
    * defaultValue: 0
    */
    views: z.number().int().nullish(),
    /**
    * dataType: _text
    * defaultValue: 
    */
    tags: z.array(z.string()).nullish(),
    /**
    * dataType: jsonb
    * defaultValue: 
    */
    metadata: z.any().nullish(),
    /**
    * dataType: timestamptz
    * defaultValue: 
    */
    publishedAt: z.date().nullish(),
    /**
    * dataType: timestamptz
    * defaultValue: now()
    */
    updatedAt: z.date().nullish(),
});
export const PostsTableInsertSchema = TableWriteSchema.transform(data => ({
    user_id: data.userId,
    title: data.title,
    content: data.content,
    published: data.published,
    status: data.status,
    views: data.views,
    tags: data.tags,
    metadata: (data.metadata ? JSON.stringify(data.metadata) : data.metadata),
    published_at: data.publishedAt,
    updated_at: data.updatedAt,
}));
export const PostsTableUpdateSchema = TableWriteSchema.partial().transform(data => ({
    user_id: data.userId,
    title: data.title,
    content: data.content,
    published: data.published,
    status: data.status,
    views: data.views,
    tags: data.tags,
    metadata: (data.metadata ? JSON.stringify(data.metadata) : data.metadata),
    published_at: data.publishedAt,
    updated_at: data.updatedAt,
}));

type TableInsertRecord = z.input<typeof PostsTableInsertSchema>;
export type PostStatus = (typeof POST_STATUSES)[number];

/**
* Represents a database record from the "public.posts" table.
*/
export interface PostRecord {
    id: TableReadRecord['id'];
    userId: TableReadRecord['userId'];
    title: TableReadRecord['title'];
    content: TableReadRecord['content'];
    published: TableReadRecord['published'];
    status: TableReadRecord['status'];
    /**
     * Number of views for the post
     */
    views: TableReadRecord['views'];
    /**
     * Array of tags associated with the post
     */
    tags: TableReadRecord['tags'];
    /**
     * Additional metadata for the post
     */
    metadata: TableReadRecord['metadata'];
    /**
     * Timestamp when the post was published
     */
    publishedAt: TableReadRecord['publishedAt'];
    /**
     * Timestamp when the post was last updated
     */
    updatedAt: TableReadRecord['updatedAt'];
}

/**
* Represents an insertable database record from the "public.posts" table.
*/
export interface PostInsertRecord {
    /**
    */
    userId?: TableInsertRecord['userId'];
    /**
    */
    title: TableInsertRecord['title'];
    /**
    */
    content?: TableInsertRecord['content'];
    /**
    * @default: false
    */
    published?: TableInsertRecord['published'];
    /**
    * @maxLen: 20
    * @default: 'draft'::character varying
    */
    status?: TableInsertRecord['status'];
    /**
    * Number of views for the post
    * @default: 0
    */
    views?: TableInsertRecord['views'];
    /**
    * Array of tags associated with the post
    */
    tags?: TableInsertRecord['tags'];
    /**
    * Additional metadata for the post
    */
    metadata?: TableInsertRecord['metadata'];
    /**
    * Timestamp when the post was published
    */
    publishedAt?: TableInsertRecord['publishedAt'];
    /**
    * Timestamp when the post was last updated
    * @default: now()
    */
    updatedAt?: TableInsertRecord['updatedAt'];
}

/**
* Represents an updateable database record from the "public.posts" table.
*/
export type PostUpdateRecord = Partial<PostInsertRecord>;
"
`;

exports[`casing options > generates schemas with camelCase field names and PascalCase object names (default) > default/tables/users.ts 1`] = `
"// This file is auto-generated by zod-pg. Do not edit this file directly.

import { z } from 'zod';
export const USER_ROLES = ['admin', 'editor', 'viewer'] as const;
export const UsersTableSchema = z.object({
    /**
    * dataType: int4
    * defaultValue: nextval('users_id_seq'::regclass)
    */
    id: z.number().int(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    name: z.string(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    email: z.string().nullable(),
    /**
    * dataType: varchar
    * defaultValue: 'active'::character varying
    */
    status: z.string().nullable(),
    /**
    * dataType: jsonb
    * defaultValue: 
    */
    profile: z.any().nullable(),
    /**
    * dataType: timestamptz
    * defaultValue: now()
    */
    created_at: z.date().nullable(),
    /**
    * dataType: _text
    * defaultValue: 
    */
    roles: z.array(z.enum(USER_ROLES)).nullable(),
    /**
    * dataType: _timestamp
    * defaultValue: 
    */
    dates: z.array(z.date()).nullable(),
}).transform(data => ({
    id: data.id,
    name: data.name,
    email: data.email ?? undefined,
    status: data.status ?? undefined,
    profile: data.profile ?? undefined,
    createdAt: data.created_at ?? undefined,
    roles: data.roles ?? undefined,
    dates: data.dates ?? undefined,
}));

type TableReadRecord = z.output<typeof UsersTableSchema>;
const TableWriteSchema = z.object({
    /**
    * dataType: varchar
    * defaultValue: 
    */
    name: z.string().max(100),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    email: z.string().max(255).nullish(),
    /**
    * dataType: varchar
    * defaultValue: 'active'::character varying
    */
    status: z.string().max(20).nullish(),
    /**
    * dataType: jsonb
    * defaultValue: 
    */
    profile: z.any().nullish(),
    /**
    * dataType: timestamptz
    * defaultValue: now()
    */
    createdAt: z.date().nullish(),
    /**
    * dataType: _text
    * defaultValue: 
    */
    roles: z.array(z.enum(USER_ROLES)).nullish(),
    /**
    * dataType: _timestamp
    * defaultValue: 
    */
    dates: z.array(z.date()).nullish(),
});
export const UsersTableInsertSchema = TableWriteSchema.transform(data => ({
    name: data.name,
    email: data.email,
    status: data.status,
    profile: (data.profile ? JSON.stringify(data.profile) : data.profile),
    created_at: data.createdAt,
    roles: data.roles,
    dates: data.dates,
}));
export const UsersTableUpdateSchema = TableWriteSchema.partial().transform(data => ({
    name: data.name,
    email: data.email,
    status: data.status,
    profile: (data.profile ? JSON.stringify(data.profile) : data.profile),
    created_at: data.createdAt,
    roles: data.roles,
    dates: data.dates,
}));

type TableInsertRecord = z.input<typeof UsersTableInsertSchema>;
export type UserRoles = (typeof USER_ROLES)[number];

/**
* Represents a database record from the "public.users" table.
*/
export interface UserRecord {
    id: TableReadRecord['id'];
    name: TableReadRecord['name'];
    email: TableReadRecord['email'];
    status: TableReadRecord['status'];
    profile: TableReadRecord['profile'];
    createdAt: TableReadRecord['createdAt'];
    roles: TableReadRecord['roles'];
    dates: TableReadRecord['dates'];
}

/**
* Represents an insertable database record from the "public.users" table.
*/
export interface UserInsertRecord {
    /**
    * @maxLen: 100
    */
    name: TableInsertRecord['name'];
    /**
    * @maxLen: 255
    */
    email?: TableInsertRecord['email'];
    /**
    * @maxLen: 20
    * @default: 'active'::character varying
    */
    status?: TableInsertRecord['status'];
    /**
    */
    profile?: TableInsertRecord['profile'];
    /**
    * @default: now()
    */
    createdAt?: TableInsertRecord['createdAt'];
    /**
    */
    roles?: TableInsertRecord['roles'];
    /**
    */
    dates?: TableInsertRecord['dates'];
}

/**
* Represents an updateable database record from the "public.users" table.
*/
export type UserUpdateRecord = Partial<UserInsertRecord>;
"
`;

exports[`casing options > generates schemas with camelCase field names and PascalCase object names (default) > default/types.ts 1`] = `
"// This file is auto-generated by zod-pg. Do not edit this file directly.

export type Table = 
    | 'posts'
    | 'users'
"
`;

exports[`casing options > generates schemas with kebab-case object names > kebab-case-objects/constants.ts 1`] = `
"// This file is auto-generated by zod-pg. Do not edit this file directly.

export const TABLE_USERS = 'users';
"
`;

exports[`casing options > generates schemas with kebab-case object names > kebab-case-objects/tables/index.ts 1`] = `
"// This file is auto-generated by zod-pg. Do not edit this file directly.

export * from './users';
"
`;

exports[`casing options > generates schemas with kebab-case object names > kebab-case-objects/tables/users.ts 1`] = `
"// This file is auto-generated by zod-pg. Do not edit this file directly.

import { z } from 'zod';
export const USER_ROLES = ['admin', 'editor', 'viewer'] as const;
export const usersTableSchema = z.object({
    /**
    * dataType: int4
    * defaultValue: nextval('users_id_seq'::regclass)
    */
    id: z.number().int(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    name: z.string(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    email: z.string().nullable(),
    /**
    * dataType: varchar
    * defaultValue: 'active'::character varying
    */
    status: z.string().nullable(),
    /**
    * dataType: jsonb
    * defaultValue: 
    */
    profile: z.any().nullable(),
    /**
    * dataType: timestamptz
    * defaultValue: now()
    */
    created_at: z.date().nullable(),
    /**
    * dataType: _text
    * defaultValue: 
    */
    roles: z.array(z.enum(USER_ROLES)).nullable(),
    /**
    * dataType: _timestamp
    * defaultValue: 
    */
    dates: z.array(z.date()).nullable(),
}).transform(data => ({
    id: data.id,
    name: data.name,
    email: data.email ?? undefined,
    status: data.status ?? undefined,
    profile: data.profile ?? undefined,
    createdAt: data.created_at ?? undefined,
    roles: data.roles ?? undefined,
    dates: data.dates ?? undefined,
}));

type TableReadRecord = z.output<typeof usersTableSchema>;
const TableWriteSchema = z.object({
    /**
    * dataType: varchar
    * defaultValue: 
    */
    name: z.string().max(100),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    email: z.string().max(255).nullish(),
    /**
    * dataType: varchar
    * defaultValue: 'active'::character varying
    */
    status: z.string().max(20).nullish(),
    /**
    * dataType: jsonb
    * defaultValue: 
    */
    profile: z.any().nullish(),
    /**
    * dataType: timestamptz
    * defaultValue: now()
    */
    createdAt: z.date().nullish(),
    /**
    * dataType: _text
    * defaultValue: 
    */
    roles: z.array(z.enum(USER_ROLES)).nullish(),
    /**
    * dataType: _timestamp
    * defaultValue: 
    */
    dates: z.array(z.date()).nullish(),
});
export const usersTableInsertSchema = TableWriteSchema.transform(data => ({
    name: data.name,
    email: data.email,
    status: data.status,
    profile: (data.profile ? JSON.stringify(data.profile) : data.profile),
    created_at: data.createdAt,
    roles: data.roles,
    dates: data.dates,
}));
export const usersTableUpdateSchema = TableWriteSchema.partial().transform(data => ({
    name: data.name,
    email: data.email,
    status: data.status,
    profile: (data.profile ? JSON.stringify(data.profile) : data.profile),
    created_at: data.createdAt,
    roles: data.roles,
    dates: data.dates,
}));

type TableInsertRecord = z.input<typeof usersTableInsertSchema>;
export type user-roles = (typeof USER_ROLES)[number];

/**
* Represents a database record from the "public.users" table.
*/
export interface userRecord {
    id: TableReadRecord['id'];
    name: TableReadRecord['name'];
    email: TableReadRecord['email'];
    status: TableReadRecord['status'];
    profile: TableReadRecord['profile'];
    createdAt: TableReadRecord['createdAt'];
    roles: TableReadRecord['roles'];
    dates: TableReadRecord['dates'];
}

/**
* Represents an insertable database record from the "public.users" table.
*/
export interface userInsertRecord {
    /**
    * @maxLen: 100
    */
    name: TableInsertRecord['name'];
    /**
    * @maxLen: 255
    */
    email?: TableInsertRecord['email'];
    /**
    * @maxLen: 20
    * @default: 'active'::character varying
    */
    status?: TableInsertRecord['status'];
    /**
    */
    profile?: TableInsertRecord['profile'];
    /**
    * @default: now()
    */
    createdAt?: TableInsertRecord['createdAt'];
    /**
    */
    roles?: TableInsertRecord['roles'];
    /**
    */
    dates?: TableInsertRecord['dates'];
}

/**
* Represents an updateable database record from the "public.users" table.
*/
export type userUpdateRecord = Partial<userInsertRecord>;
"
`;

exports[`casing options > generates schemas with kebab-case object names > kebab-case-objects/types.ts 1`] = `
"// This file is auto-generated by zod-pg. Do not edit this file directly.

export type Table = 
    | 'users'
"
`;

exports[`casing options > generates schemas with passthrough casing > passthrough/constants.ts 1`] = `
"// This file is auto-generated by zod-pg. Do not edit this file directly.

export const TABLE_USERS = 'users';
"
`;

exports[`casing options > generates schemas with passthrough casing > passthrough/tables/index.ts 1`] = `
"// This file is auto-generated by zod-pg. Do not edit this file directly.

export * from './users';
"
`;

exports[`casing options > generates schemas with passthrough casing > passthrough/tables/users.ts 1`] = `
"// This file is auto-generated by zod-pg. Do not edit this file directly.

import { z } from 'zod';
export const USER_ROLES = ['admin', 'editor', 'viewer'] as const;
export const usersTableSchema = z.object({
    /**
    * dataType: int4
    * defaultValue: nextval('users_id_seq'::regclass)
    */
    id: z.number().int(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    name: z.string(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    email: z.string().nullable(),
    /**
    * dataType: varchar
    * defaultValue: 'active'::character varying
    */
    status: z.string().nullable(),
    /**
    * dataType: jsonb
    * defaultValue: 
    */
    profile: z.any().nullable(),
    /**
    * dataType: timestamptz
    * defaultValue: now()
    */
    created_at: z.date().nullable(),
    /**
    * dataType: _text
    * defaultValue: 
    */
    roles: z.array(z.enum(USER_ROLES)).nullable(),
    /**
    * dataType: _timestamp
    * defaultValue: 
    */
    dates: z.array(z.date()).nullable(),
}).transform(data => ({
    id: data.id,
    name: data.name,
    email: data.email ?? undefined,
    status: data.status ?? undefined,
    profile: data.profile ?? undefined,
    created_at: data.created_at ?? undefined,
    roles: data.roles ?? undefined,
    dates: data.dates ?? undefined,
}));

type TableReadRecord = z.output<typeof usersTableSchema>;
const TableWriteSchema = z.object({
    /**
    * dataType: varchar
    * defaultValue: 
    */
    name: z.string().max(100),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    email: z.string().max(255).nullish(),
    /**
    * dataType: varchar
    * defaultValue: 'active'::character varying
    */
    status: z.string().max(20).nullish(),
    /**
    * dataType: jsonb
    * defaultValue: 
    */
    profile: z.any().nullish(),
    /**
    * dataType: timestamptz
    * defaultValue: now()
    */
    created_at: z.date().nullish(),
    /**
    * dataType: _text
    * defaultValue: 
    */
    roles: z.array(z.enum(USER_ROLES)).nullish(),
    /**
    * dataType: _timestamp
    * defaultValue: 
    */
    dates: z.array(z.date()).nullish(),
});
export const usersTableInsertSchema = TableWriteSchema.transform(data => ({
    name: data.name,
    email: data.email,
    status: data.status,
    profile: (data.profile ? JSON.stringify(data.profile) : data.profile),
    created_at: data.created_at,
    roles: data.roles,
    dates: data.dates,
}));
export const usersTableUpdateSchema = TableWriteSchema.partial().transform(data => ({
    name: data.name,
    email: data.email,
    status: data.status,
    profile: (data.profile ? JSON.stringify(data.profile) : data.profile),
    created_at: data.created_at,
    roles: data.roles,
    dates: data.dates,
}));

type TableInsertRecord = z.input<typeof usersTableInsertSchema>;
export type UserRoles = (typeof USER_ROLES)[number];

/**
* Represents a database record from the "public.users" table.
*/
export interface userRecord {
    id: TableReadRecord['id'];
    name: TableReadRecord['name'];
    email: TableReadRecord['email'];
    status: TableReadRecord['status'];
    profile: TableReadRecord['profile'];
    created_at: TableReadRecord['created_at'];
    roles: TableReadRecord['roles'];
    dates: TableReadRecord['dates'];
}

/**
* Represents an insertable database record from the "public.users" table.
*/
export interface userInsertRecord {
    /**
    * @maxLen: 100
    */
    name: TableInsertRecord['name'];
    /**
    * @maxLen: 255
    */
    email?: TableInsertRecord['email'];
    /**
    * @maxLen: 20
    * @default: 'active'::character varying
    */
    status?: TableInsertRecord['status'];
    /**
    */
    profile?: TableInsertRecord['profile'];
    /**
    * @default: now()
    */
    created_at?: TableInsertRecord['created_at'];
    /**
    */
    roles?: TableInsertRecord['roles'];
    /**
    */
    dates?: TableInsertRecord['dates'];
}

/**
* Represents an updateable database record from the "public.users" table.
*/
export type userUpdateRecord = Partial<userInsertRecord>;
"
`;

exports[`casing options > generates schemas with passthrough casing > passthrough/types.ts 1`] = `
"// This file is auto-generated by zod-pg. Do not edit this file directly.

export type Table = 
    | 'users'
"
`;

exports[`casing options > generates schemas with snake_case field names > snake-case-fields/constants.ts 1`] = `
"// This file is auto-generated by zod-pg. Do not edit this file directly.

export const TABLE_USERS = 'users';
"
`;

exports[`casing options > generates schemas with snake_case field names > snake-case-fields/tables/index.ts 1`] = `
"// This file is auto-generated by zod-pg. Do not edit this file directly.

export * from './users';
"
`;

exports[`casing options > generates schemas with snake_case field names > snake-case-fields/tables/users.ts 1`] = `
"// This file is auto-generated by zod-pg. Do not edit this file directly.

import { z } from 'zod';
export const USER_ROLES = ['admin', 'editor', 'viewer'] as const;
export const UsersTableSchema = z.object({
    /**
    * dataType: int4
    * defaultValue: nextval('users_id_seq'::regclass)
    */
    id: z.number().int(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    name: z.string(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    email: z.string().nullable(),
    /**
    * dataType: varchar
    * defaultValue: 'active'::character varying
    */
    status: z.string().nullable(),
    /**
    * dataType: jsonb
    * defaultValue: 
    */
    profile: z.any().nullable(),
    /**
    * dataType: timestamptz
    * defaultValue: now()
    */
    created_at: z.date().nullable(),
    /**
    * dataType: _text
    * defaultValue: 
    */
    roles: z.array(z.enum(USER_ROLES)).nullable(),
    /**
    * dataType: _timestamp
    * defaultValue: 
    */
    dates: z.array(z.date()).nullable(),
}).transform(data => ({
    id: data.id,
    name: data.name,
    email: data.email ?? undefined,
    status: data.status ?? undefined,
    profile: data.profile ?? undefined,
    created_at: data.created_at ?? undefined,
    roles: data.roles ?? undefined,
    dates: data.dates ?? undefined,
}));

type TableReadRecord = z.output<typeof UsersTableSchema>;
const TableWriteSchema = z.object({
    /**
    * dataType: varchar
    * defaultValue: 
    */
    name: z.string().max(100),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    email: z.string().max(255).nullish(),
    /**
    * dataType: varchar
    * defaultValue: 'active'::character varying
    */
    status: z.string().max(20).nullish(),
    /**
    * dataType: jsonb
    * defaultValue: 
    */
    profile: z.any().nullish(),
    /**
    * dataType: timestamptz
    * defaultValue: now()
    */
    created_at: z.date().nullish(),
    /**
    * dataType: _text
    * defaultValue: 
    */
    roles: z.array(z.enum(USER_ROLES)).nullish(),
    /**
    * dataType: _timestamp
    * defaultValue: 
    */
    dates: z.array(z.date()).nullish(),
});
export const UsersTableInsertSchema = TableWriteSchema.transform(data => ({
    name: data.name,
    email: data.email,
    status: data.status,
    profile: (data.profile ? JSON.stringify(data.profile) : data.profile),
    created_at: data.created_at,
    roles: data.roles,
    dates: data.dates,
}));
export const UsersTableUpdateSchema = TableWriteSchema.partial().transform(data => ({
    name: data.name,
    email: data.email,
    status: data.status,
    profile: (data.profile ? JSON.stringify(data.profile) : data.profile),
    created_at: data.created_at,
    roles: data.roles,
    dates: data.dates,
}));

type TableInsertRecord = z.input<typeof UsersTableInsertSchema>;
export type UserRoles = (typeof USER_ROLES)[number];

/**
* Represents a database record from the "public.users" table.
*/
export interface UserRecord {
    id: TableReadRecord['id'];
    name: TableReadRecord['name'];
    email: TableReadRecord['email'];
    status: TableReadRecord['status'];
    profile: TableReadRecord['profile'];
    created_at: TableReadRecord['created_at'];
    roles: TableReadRecord['roles'];
    dates: TableReadRecord['dates'];
}

/**
* Represents an insertable database record from the "public.users" table.
*/
export interface UserInsertRecord {
    /**
    * @maxLen: 100
    */
    name: TableInsertRecord['name'];
    /**
    * @maxLen: 255
    */
    email?: TableInsertRecord['email'];
    /**
    * @maxLen: 20
    * @default: 'active'::character varying
    */
    status?: TableInsertRecord['status'];
    /**
    */
    profile?: TableInsertRecord['profile'];
    /**
    * @default: now()
    */
    created_at?: TableInsertRecord['created_at'];
    /**
    */
    roles?: TableInsertRecord['roles'];
    /**
    */
    dates?: TableInsertRecord['dates'];
}

/**
* Represents an updateable database record from the "public.users" table.
*/
export type UserUpdateRecord = Partial<UserInsertRecord>;
"
`;

exports[`casing options > generates schemas with snake_case field names > snake-case-fields/types.ts 1`] = `
"// This file is auto-generated by zod-pg. Do not edit this file directly.

export type Table = 
    | 'users'
"
`;
