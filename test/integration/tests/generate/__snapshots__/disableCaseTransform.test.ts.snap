// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`generates schemas without case transformations > constants.ts 1`] = `
"// This file is auto-generated by zod-pg. Do not edit this file directly.

export const TABLE_USERS = 'users';
"
`;

exports[`generates schemas without case transformations > tables/index.ts 1`] = `
"// This file is auto-generated by zod-pg. Do not edit this file directly.

export * from './users/index.js';
"
`;

exports[`generates schemas without case transformations > tables/users/index.ts 1`] = `
"// This file is auto-generated by zod-pg. Do not edit this file directly.

export * from './schema.js';
"
`;

exports[`generates schemas without case transformations > tables/users/schema.ts 1`] = `
"// This file is auto-generated by zod-pg. Do not edit this file directly.

import { z } from 'zod';

export const USER_ROLES = ['admin', 'editor', 'viewer'] as const;

/**
 * Read schema for the "public.users" table.
 * Validates raw rows read from the database.
 */
export const UsersTableSchema = z.object({
     /**
      * dataType: int4
      * defaultValue: nextval('users_id_seq'::regclass)
      */
    id: z.number().int(),
     /**
      * dataType: varchar
      */
    name: z.string(),
     /**
      * dataType: varchar
      */
    email: z.string().nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: varchar
      * defaultValue: 'active'::character varying
      */
    status: z.string().nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: jsonb
      */
    profile: z.any().nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: timestamptz
      * defaultValue: now()
      */
    created_at: z.coerce.date().nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: _text
      */
    roles: z.array(z.enum(USER_ROLES)).nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: _timestamp
      */
    dates: z.array(z.coerce.date()).nullish().transform((value) => value ?? undefined).optional(),
});

/**
 * Insert schema for the "public.users" table.
 */
export const UsersTableInsertSchema = z.object({
     /**
      * dataType: varchar
      */
    name: z.string().max(100),
     /**
      * dataType: varchar
      */
    email: z.string().max(255).nullish().optional(),
     /**
      * dataType: varchar
      * defaultValue: 'active'::character varying
      */
    status: z.string().max(20).nullish().optional(),
     /**
      * dataType: jsonb
      */
    profile: z.any().nullish().transform((value) => value ? JSON.stringify(value) : value).optional(),
     /**
      * dataType: timestamptz
      * defaultValue: now()
      */
    created_at: z.date().nullish().optional(),
     /**
      * dataType: _text
      */
    roles: z.array(z.enum(USER_ROLES)).nullish().optional(),
     /**
      * dataType: _timestamp
      */
    dates: z.array(z.date()).nullish().optional(),
});

/**
 * Update schema for the "public.users" table.
 */
export const UsersTableUpdateSchema = UsersTableInsertSchema.partial();

type TableInsertRecord = z.input<typeof UsersTableInsertSchema>;
type TableReadRecord = z.output<typeof UsersTableSchema>;

/**
 * Read record for the "public.users" table.
 */
export interface UserRecord {
    /**
    */
    id: TableReadRecord['id'];
    /**
    */
    name: TableReadRecord['name'];
    /**
    */
    email?: TableReadRecord['email'];
    /**
    */
    status?: TableReadRecord['status'];
    /**
    */
    profile?: TableReadRecord['profile'];
    /**
    */
    created_at?: TableReadRecord['created_at'];
    /**
    */
    roles?: TableReadRecord['roles'];
    /**
    */
    dates?: TableReadRecord['dates'];
}

/**
 * Insertable record for the "public.users" table.
 */
export interface UserInsertRecord {
    /**
    * @maxLen: 100
    */
    name: TableInsertRecord['name'];
    /**
    * @maxLen: 255
    */
    email?: TableInsertRecord['email'];
    /**
    * @maxLen: 20
    * @default: 'active'::character varying
    */
    status?: TableInsertRecord['status'];
    /**
    */
    profile?: TableInsertRecord['profile'];
    /**
    * @default: now()
    */
    created_at?: TableInsertRecord['created_at'];
    /**
    */
    roles?: TableInsertRecord['roles'];
    /**
    */
    dates?: TableInsertRecord['dates'];
}

/**
 * Updatable record for the "public.users" table.
 */
export type UserUpdateRecord = Partial<UserInsertRecord>;

export type UserRole = (typeof USER_ROLES)[number];
"
`;

exports[`generates schemas without case transformations > types.ts 1`] = `
"// This file is auto-generated by zod-pg. Do not edit this file directly.

export type Table = 
    | 'users'
"
`;
