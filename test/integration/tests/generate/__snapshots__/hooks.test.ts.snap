// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`hook options > applies both column and table hooks together > combined-hooks/constants.ts 1`] = `
"// This file is auto-generated by zod-pg. Do not edit this file directly.

export const TABLE_USERS = 'users';
"
`;

exports[`hook options > applies both column and table hooks together > combined-hooks/tables/index.ts 1`] = `
"// This file is auto-generated by zod-pg. Do not edit this file directly.

export * from './users';
"
`;

exports[`hook options > applies both column and table hooks together > combined-hooks/tables/users.ts 1`] = `
"// This file is auto-generated by zod-pg. Do not edit this file directly.

import { z } from 'zod';
export const USER_ROLES = ['admin', 'editor', 'viewer'] as const;

/**
 * Table: users (8 columns)
 */
export const UsersTableSchema = z.object({
    /**
    * dataType: int4
    * defaultValue: nextval('users_id_seq'::regclass)
    */
    id: z.number().int(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    name: z.string(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    email: z.string().nullable(),
    /**
    * dataType: varchar
    * defaultValue: 'active'::character varying
    */
    status: z.string().nullable(),
    /**
    * dataType: jsonb
    * defaultValue: 
    */
    profile: z.any().nullable(),
    /**
    * dataType: timestamptz
    * defaultValue: now()
    */
    created_at: z.date().nullable(),
    /**
    * dataType: _text
    * defaultValue: 
    */
    roles: z.array(z.enum(USER_ROLES)).nullable(),
    /**
    * dataType: _timestamp
    * defaultValue: 
    */
    dates: z.array(z.date()).nullable(),
}).transform(data => ({
    id: data.id,
    name: data.name,
    email: data.email ?? undefined,
    status: data.status ?? undefined,
    profile: data.profile ?? undefined,
    createdAt: data.created_at ?? undefined,
    roles: data.roles ?? undefined,
    dates: data.dates ?? undefined,
}));

type TableReadRecord = z.output<typeof UsersTableSchema>;

/**
 * Table: users (8 columns) - Insert schema
 */
const TableWriteSchema = z.object({
    /**
    * dataType: varchar
    * defaultValue: 
    */
    name: z.string().max(100).trim(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    email: z.string().max(255).nullish().trim(),
    /**
    * dataType: varchar
    * defaultValue: 'active'::character varying
    */
    status: z.string().max(20).nullish().trim(),
    /**
    * dataType: jsonb
    * defaultValue: 
    */
    profile: z.any().nullish(),
    /**
    * dataType: timestamptz
    * defaultValue: now()
    */
    createdAt: z.date().nullish(),
    /**
    * dataType: _text
    * defaultValue: 
    */
    roles: z.array(z.enum(USER_ROLES)).nullish().trim(),
    /**
    * dataType: _timestamp
    * defaultValue: 
    */
    dates: z.array(z.date()).nullish(),
});

/**
 * Table: users (8 columns) - Insert schema
 */
export const UsersTableInsertSchema = TableWriteSchema.transform(data => ({
    name: data.name,
    email: data.email,
    status: data.status,
    profile: (data.profile ? JSON.stringify(data.profile) : data.profile),
    created_at: data.createdAt,
    roles: data.roles,
    dates: data.dates,
}));

/**
 * Table: users (8 columns) - Update schema
 */
export const UsersTableUpdateSchema = TableWriteSchema.partial().transform(data => ({
    name: data.name,
    email: data.email,
    status: data.status,
    profile: (data.profile ? JSON.stringify(data.profile) : data.profile),
    created_at: data.createdAt,
    roles: data.roles,
    dates: data.dates,
}));

type TableInsertRecord = z.input<typeof UsersTableInsertSchema>;
export type UserRoles = (typeof USER_ROLES)[number];

/**
* Represents a database record from the "public.users" table.
*/
export interface UserRecord {
    id: TableReadRecord['id'];
    name: TableReadRecord['name'];
    email: TableReadRecord['email'];
    status: TableReadRecord['status'];
    profile: TableReadRecord['profile'];
    createdAt: TableReadRecord['createdAt'];
    roles: TableReadRecord['roles'];
    dates: TableReadRecord['dates'];
}

/**
* Represents an insertable database record from the "public.users" table.
*/
export interface UserInsertRecord {
    /**
    * @maxLen: 100
    */
    name: TableInsertRecord['name'];
    /**
    * @maxLen: 255
    */
    email?: TableInsertRecord['email'];
    /**
    * @maxLen: 20
    * @default: 'active'::character varying
    */
    status?: TableInsertRecord['status'];
    /**
    */
    profile?: TableInsertRecord['profile'];
    /**
    * @default: now()
    */
    createdAt?: TableInsertRecord['createdAt'];
    /**
    */
    roles?: TableInsertRecord['roles'];
    /**
    */
    dates?: TableInsertRecord['dates'];
}

/**
* Represents an updateable database record from the "public.users" table.
*/
export type UserUpdateRecord = Partial<UserInsertRecord>;
"
`;

exports[`hook options > applies both column and table hooks together > combined-hooks/types.ts 1`] = `
"// This file is auto-generated by zod-pg. Do not edit this file directly.

export type Table = 
    | 'users'
"
`;

exports[`hook options > applies onColumnModelCreated hook to modify column schemas > column-hook/constants.ts 1`] = `
"// This file is auto-generated by zod-pg. Do not edit this file directly.

export const TABLE_USERS = 'users';
"
`;

exports[`hook options > applies onColumnModelCreated hook to modify column schemas > column-hook/tables/index.ts 1`] = `
"// This file is auto-generated by zod-pg. Do not edit this file directly.

export * from './users';
"
`;

exports[`hook options > applies onColumnModelCreated hook to modify column schemas > column-hook/tables/users.ts 1`] = `
"// This file is auto-generated by zod-pg. Do not edit this file directly.

import { z } from 'zod';
export const USER_ROLES = ['admin', 'editor', 'viewer'] as const;
export const UsersTableSchema = z.object({
    /**
    * dataType: int4
    * defaultValue: nextval('users_id_seq'::regclass)
    */
    id: z.number().int(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    name: z.string(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    email: z.string().nullable().email(),
    /**
    * dataType: varchar
    * defaultValue: 'active'::character varying
    */
    status: z.string().nullable(),
    /**
    * dataType: jsonb
    * defaultValue: 
    */
    profile: z.any().nullable(),
    /**
    * dataType: timestamptz
    * defaultValue: now()
    */
    created_at: z.date().nullable(),
    /**
    * dataType: _text
    * defaultValue: 
    */
    roles: z.array(z.enum(USER_ROLES)).nullable(),
    /**
    * dataType: _timestamp
    * defaultValue: 
    */
    dates: z.array(z.date()).nullable(),
}).transform(data => ({
    id: data.id,
    name: data.name,
    email: data.email ?? undefined,
    status: data.status ?? undefined,
    profile: data.profile ?? undefined,
    createdAt: data.created_at ?? undefined,
    roles: data.roles ?? undefined,
    dates: data.dates ?? undefined,
}));

type TableReadRecord = z.output<typeof UsersTableSchema>;
const TableWriteSchema = z.object({
    /**
    * dataType: varchar
    * defaultValue: 
    */
    name: z.string().max(100),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    email: z.string().max(255).nullish().email(),
    /**
    * dataType: varchar
    * defaultValue: 'active'::character varying
    */
    status: z.string().max(20).nullish(),
    /**
    * dataType: jsonb
    * defaultValue: 
    */
    profile: z.any().nullish(),
    /**
    * dataType: timestamptz
    * defaultValue: now()
    */
    createdAt: z.date().nullish(),
    /**
    * dataType: _text
    * defaultValue: 
    */
    roles: z.array(z.enum(USER_ROLES)).nullish(),
    /**
    * dataType: _timestamp
    * defaultValue: 
    */
    dates: z.array(z.date()).nullish(),
});
export const UsersTableInsertSchema = TableWriteSchema.transform(data => ({
    name: data.name,
    email: data.email,
    status: data.status,
    profile: (data.profile ? JSON.stringify(data.profile) : data.profile),
    created_at: data.createdAt,
    roles: data.roles,
    dates: data.dates,
}));
export const UsersTableUpdateSchema = TableWriteSchema.partial().transform(data => ({
    name: data.name,
    email: data.email,
    status: data.status,
    profile: (data.profile ? JSON.stringify(data.profile) : data.profile),
    created_at: data.createdAt,
    roles: data.roles,
    dates: data.dates,
}));

type TableInsertRecord = z.input<typeof UsersTableInsertSchema>;
export type UserRoles = (typeof USER_ROLES)[number];

/**
* Represents a database record from the "public.users" table.
*/
export interface UserRecord {
    id: TableReadRecord['id'];
    name: TableReadRecord['name'];
    email: TableReadRecord['email'];
    status: TableReadRecord['status'];
    profile: TableReadRecord['profile'];
    createdAt: TableReadRecord['createdAt'];
    roles: TableReadRecord['roles'];
    dates: TableReadRecord['dates'];
}

/**
* Represents an insertable database record from the "public.users" table.
*/
export interface UserInsertRecord {
    /**
    * @maxLen: 100
    */
    name: TableInsertRecord['name'];
    /**
    * @maxLen: 255
    */
    email?: TableInsertRecord['email'];
    /**
    * @maxLen: 20
    * @default: 'active'::character varying
    */
    status?: TableInsertRecord['status'];
    /**
    */
    profile?: TableInsertRecord['profile'];
    /**
    * @default: now()
    */
    createdAt?: TableInsertRecord['createdAt'];
    /**
    */
    roles?: TableInsertRecord['roles'];
    /**
    */
    dates?: TableInsertRecord['dates'];
}

/**
* Represents an updateable database record from the "public.users" table.
*/
export type UserUpdateRecord = Partial<UserInsertRecord>;
"
`;

exports[`hook options > applies onColumnModelCreated hook to modify column schemas > column-hook/types.ts 1`] = `
"// This file is auto-generated by zod-pg. Do not edit this file directly.

export type Table = 
    | 'users'
"
`;

exports[`hook options > applies onTableModelCreated hook to modify table schemas > table-hook/constants.ts 1`] = `
"// This file is auto-generated by zod-pg. Do not edit this file directly.

export const TABLE_USERS = 'users';
"
`;

exports[`hook options > applies onTableModelCreated hook to modify table schemas > table-hook/tables/index.ts 1`] = `
"// This file is auto-generated by zod-pg. Do not edit this file directly.

export * from './users';
"
`;

exports[`hook options > applies onTableModelCreated hook to modify table schemas > table-hook/tables/users.ts 1`] = `
"// This file is auto-generated by zod-pg. Do not edit this file directly.

import { z } from 'zod';
export const USER_ROLES = ['admin', 'editor', 'viewer'] as const;

/**
 * Generated schema for users table
 */
export const UsersTableSchema = z.object({
    /**
    * dataType: int4
    * defaultValue: nextval('users_id_seq'::regclass)
    */
    id: z.number().int(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    name: z.string(),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    email: z.string().nullable(),
    /**
    * dataType: varchar
    * defaultValue: 'active'::character varying
    */
    status: z.string().nullable(),
    /**
    * dataType: jsonb
    * defaultValue: 
    */
    profile: z.any().nullable(),
    /**
    * dataType: timestamptz
    * defaultValue: now()
    */
    created_at: z.date().nullable(),
    /**
    * dataType: _text
    * defaultValue: 
    */
    roles: z.array(z.enum(USER_ROLES)).nullable(),
    /**
    * dataType: _timestamp
    * defaultValue: 
    */
    dates: z.array(z.date()).nullable(),
}).transform(data => ({
    id: data.id,
    name: data.name,
    email: data.email ?? undefined,
    status: data.status ?? undefined,
    profile: data.profile ?? undefined,
    createdAt: data.created_at ?? undefined,
    roles: data.roles ?? undefined,
    dates: data.dates ?? undefined,
}));

type TableReadRecord = z.output<typeof UsersTableSchema>;

/**
 * Generated schema for users table - Insert schema
 */
const TableWriteSchema = z.object({
    /**
    * dataType: varchar
    * defaultValue: 
    */
    name: z.string().max(100),
    /**
    * dataType: varchar
    * defaultValue: 
    */
    email: z.string().max(255).nullish(),
    /**
    * dataType: varchar
    * defaultValue: 'active'::character varying
    */
    status: z.string().max(20).nullish(),
    /**
    * dataType: jsonb
    * defaultValue: 
    */
    profile: z.any().nullish(),
    /**
    * dataType: timestamptz
    * defaultValue: now()
    */
    createdAt: z.date().nullish(),
    /**
    * dataType: _text
    * defaultValue: 
    */
    roles: z.array(z.enum(USER_ROLES)).nullish(),
    /**
    * dataType: _timestamp
    * defaultValue: 
    */
    dates: z.array(z.date()).nullish(),
});

/**
 * Generated schema for users table - Insert schema
 */
export const UsersTableInsertSchema = TableWriteSchema.transform(data => ({
    name: data.name,
    email: data.email,
    status: data.status,
    profile: (data.profile ? JSON.stringify(data.profile) : data.profile),
    created_at: data.createdAt,
    roles: data.roles,
    dates: data.dates,
}));

/**
 * Generated schema for users table - Update schema
 */
export const UsersTableUpdateSchema = TableWriteSchema.partial().transform(data => ({
    name: data.name,
    email: data.email,
    status: data.status,
    profile: (data.profile ? JSON.stringify(data.profile) : data.profile),
    created_at: data.createdAt,
    roles: data.roles,
    dates: data.dates,
}));

type TableInsertRecord = z.input<typeof UsersTableInsertSchema>;
export type UserRoles = (typeof USER_ROLES)[number];

/**
* Represents a database record from the "public.users" table.
*/
export interface UserRecord {
    id: TableReadRecord['id'];
    name: TableReadRecord['name'];
    email: TableReadRecord['email'];
    status: TableReadRecord['status'];
    profile: TableReadRecord['profile'];
    createdAt: TableReadRecord['createdAt'];
    roles: TableReadRecord['roles'];
    dates: TableReadRecord['dates'];
}

/**
* Represents an insertable database record from the "public.users" table.
*/
export interface UserInsertRecord {
    /**
    * @maxLen: 100
    */
    name: TableInsertRecord['name'];
    /**
    * @maxLen: 255
    */
    email?: TableInsertRecord['email'];
    /**
    * @maxLen: 20
    * @default: 'active'::character varying
    */
    status?: TableInsertRecord['status'];
    /**
    */
    profile?: TableInsertRecord['profile'];
    /**
    * @default: now()
    */
    createdAt?: TableInsertRecord['createdAt'];
    /**
    */
    roles?: TableInsertRecord['roles'];
    /**
    */
    dates?: TableInsertRecord['dates'];
}

/**
* Represents an updateable database record from the "public.users" table.
*/
export type UserUpdateRecord = Partial<UserInsertRecord>;
"
`;

exports[`hook options > applies onTableModelCreated hook to modify table schemas > table-hook/types.ts 1`] = `
"// This file is auto-generated by zod-pg. Do not edit this file directly.

export type Table = 
    | 'users'
"
`;
