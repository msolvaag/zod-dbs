// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`hook options > applies both column and table hooks together > combined-hooks/constants.ts 1`] = `
"// This file is auto-generated by zod-pg. Do not edit this file directly.

export const TABLE_USERS = 'users';
"
`;

exports[`hook options > applies both column and table hooks together > combined-hooks/tables/index.ts 1`] = `
"// This file is auto-generated by zod-pg. Do not edit this file directly.

export * from './users';
"
`;

exports[`hook options > applies both column and table hooks together > combined-hooks/tables/users/index.ts 1`] = `
"// This file is auto-generated by zod-pg. Do not edit this file directly.

export * from './schema';
"
`;

exports[`hook options > applies both column and table hooks together > combined-hooks/tables/users/schema.ts 1`] = `
"// This file is auto-generated by zod-pg. Do not edit this file directly.

import { z } from 'zod';

export const USER_ROLES = ['admin', 'editor', 'viewer'] as const;

/**
 * Base read schema for the "public.users" table.
 * Validates raw rows read from the database (no casing transforms applied yet).
 */
export const UsersTableBaseSchema = z.object({
     /**
      * dataType: int4
      * defaultValue: nextval('users_id_seq'::regclass)
      */
    id: z.number().int(),
     /**
      * dataType: varchar
      */
    name: z.string(),
     /**
      * dataType: varchar
      */
    email: z.string().nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: varchar
      * defaultValue: 'active'::character varying
      */
    status: z.string().nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: jsonb
      */
    profile: z.any().nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: timestamptz
      * defaultValue: now()
      */
    created_at: z.date().nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: _text
      */
    roles: z.array(z.enum(USER_ROLES)).nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: _timestamp
      */
    dates: z.array(z.date()).nullish().transform((value) => value ?? undefined).optional(),
});

/**
 * The base record type for the "public.users" table.
 * This type represents the raw database record without case transforms.
 */
export type UserBaseRecord = z.output<typeof UsersTableBaseSchema>;

/**
 * Read transform for the "public.users" table.
 * Maps raw database snake_case fields to camelCase properties.
 */
export const transformUserBaseRecord = (data: UserBaseRecord): {
    id: UserBaseRecord['id'],
    name: UserBaseRecord['name'],
    email?: UserBaseRecord['email'],
    status?: UserBaseRecord['status'],
    profile?: UserBaseRecord['profile'],
    createdAt?: UserBaseRecord['created_at'],
    roles?: UserBaseRecord['roles'],
    dates?: UserBaseRecord['dates'],
} => ({
    id: data.id,
    name: data.name,
    email: data.email,
    status: data.status,
    profile: data.profile,
    createdAt: data.created_at,
    roles: data.roles,
    dates: data.dates,
});

/**
 * Read schema for the "public.users" table (after casing transform).
 */
export const UsersTableSchema = UsersTableBaseSchema.transform(transformUserBaseRecord);

/**
 * Base insert/write schema for the "public.users" table (no casing transforms).
 */
export const UsersTableInsertBaseSchema = z.object({
     /**
      * dataType: varchar
      */
    name: z.string().max(100).trim(),
     /**
      * dataType: varchar
      */
    email: z.string().max(255).nullish().optional().trim(),
     /**
      * dataType: varchar
      * defaultValue: 'active'::character varying
      */
    status: z.string().max(20).nullish().optional().trim(),
     /**
      * dataType: jsonb
      */
    profile: z.any().nullish().transform((value) => value ? JSON.stringify(value) : value).optional(),
     /**
      * dataType: timestamptz
      * defaultValue: now()
      */
    createdAt: z.date().nullish().optional(),
     /**
      * dataType: _text
      */
    roles: z.array(z.enum(USER_ROLES)).nullish().optional().trim(),
     /**
      * dataType: _timestamp
      */
    dates: z.array(z.date()).nullish().optional(),
});

/**
 * The base record type for the "public.users" table.
 * This type represents an insertable database record before casing transformations are applied.
 */
export type UserInsertBaseRecord = z.output<typeof UsersTableInsertBaseSchema>;

/**
 * The base record type for the "public.users" table.
 * This type represents an updatable database record before casing transformations are applied.
 */
export type UserUpdateBaseRecord = Partial<UserInsertBaseRecord>;

/**
 * Insert transform for the "public.users" table.
 * Maps camelCase properties to raw database snake_case fields.
 */
export const transformUserInsertBaseRecord = (data: UserInsertBaseRecord): {
    name: UserInsertBaseRecord['name'],
    email?: UserInsertBaseRecord['email'],
    status?: UserInsertBaseRecord['status'],
    profile?: UserInsertBaseRecord['profile'],
    created_at?: UserInsertBaseRecord['createdAt'],
    roles?: UserInsertBaseRecord['roles'],
    dates?: UserInsertBaseRecord['dates'],
} => ({
    name: data.name,
    email: data.email,
    status: data.status,
    profile: data.profile,
    created_at: data.createdAt,
    roles: data.roles,
    dates: data.dates,
});

/**
 * Update transform for the "public.users" table.
 * Maps camelCase properties to raw database snake_case fields.
 */
export const transformUserUpdateBaseRecord = (data: UserUpdateBaseRecord): {
    name: UserUpdateBaseRecord['name'],
    email?: UserUpdateBaseRecord['email'],
    status?: UserUpdateBaseRecord['status'],
    profile?: UserUpdateBaseRecord['profile'],
    created_at?: UserUpdateBaseRecord['createdAt'],
    roles?: UserUpdateBaseRecord['roles'],
    dates?: UserUpdateBaseRecord['dates'],
} => ({
    name: data.name,
    email: data.email,
    status: data.status,
    profile: data.profile,
    created_at: data.createdAt,
    roles: data.roles,
    dates: data.dates,
});

/**
 * Insert schema for the "public.users" table (after casing transform).
 */
export const UsersTableInsertSchema = UsersTableInsertBaseSchema.transform(transformUserInsertBaseRecord);

/**
 * Update schema for the "public.users" table (after casing transform).
 */
export const UsersTableUpdateSchema = UsersTableInsertBaseSchema.partial().transform(transformUserUpdateBaseRecord);

type TableInsertRecord = z.input<typeof UsersTableInsertSchema>;
type TableReadRecord = z.output<typeof UsersTableSchema>;

/**
 * Read record (casing transformed) for the "public.users" table.
 */
export interface UserRecord {
    /**
    */
    id: TableReadRecord['id'];
    /**
    */
    name: TableReadRecord['name'];
    /**
    */
    email?: TableReadRecord['email'];
    /**
    */
    status?: TableReadRecord['status'];
    /**
    */
    profile?: TableReadRecord['profile'];
    /**
    */
    createdAt?: TableReadRecord['createdAt'];
    /**
    */
    roles?: TableReadRecord['roles'];
    /**
    */
    dates?: TableReadRecord['dates'];
}

/**
 * Insert record (casing transformed) for the "public.users" table.
 */
export interface UserInsertRecord {
    /**
    * @maxLen: 100
    */
    name: TableInsertRecord['name'];
    /**
    * @maxLen: 255
    */
    email?: TableInsertRecord['email'];
    /**
    * @maxLen: 20
    * @default: 'active'::character varying
    */
    status?: TableInsertRecord['status'];
    /**
    */
    profile?: TableInsertRecord['profile'];
    /**
    * @default: now()
    */
    createdAt?: TableInsertRecord['createdAt'];
    /**
    */
    roles?: TableInsertRecord['roles'];
    /**
    */
    dates?: TableInsertRecord['dates'];
}

/**
 * Updatable record (casing transformed) for the "public.users" table.
 */
export type UserUpdateRecord = Partial<UserInsertRecord>;

export type UserRole = (typeof USER_ROLES)[number];
"
`;

exports[`hook options > applies both column and table hooks together > combined-hooks/types.ts 1`] = `
"// This file is auto-generated by zod-pg. Do not edit this file directly.

export type Table = 
    | 'users'
"
`;

exports[`hook options > applies onColumnModelCreated hook to modify column schemas > column-hook/constants.ts 1`] = `
"// This file is auto-generated by zod-pg. Do not edit this file directly.

export const TABLE_USERS = 'users';
"
`;

exports[`hook options > applies onColumnModelCreated hook to modify column schemas > column-hook/tables/index.ts 1`] = `
"// This file is auto-generated by zod-pg. Do not edit this file directly.

export * from './users';
"
`;

exports[`hook options > applies onColumnModelCreated hook to modify column schemas > column-hook/tables/users/index.ts 1`] = `
"// This file is auto-generated by zod-pg. Do not edit this file directly.

export * from './schema';
"
`;

exports[`hook options > applies onColumnModelCreated hook to modify column schemas > column-hook/tables/users/schema.ts 1`] = `
"// This file is auto-generated by zod-pg. Do not edit this file directly.

import { z } from 'zod';

export const USER_ROLES = ['admin', 'editor', 'viewer'] as const;

/**
 * Base read schema for the "public.users" table.
 * Validates raw rows read from the database (no casing transforms applied yet).
 */
export const UsersTableBaseSchema = z.object({
     /**
      * dataType: int4
      * defaultValue: nextval('users_id_seq'::regclass)
      */
    id: z.number().int(),
     /**
      * dataType: varchar
      */
    name: z.string(),
     /**
      * dataType: varchar
      */
    email: z.string().nullish().transform((value) => value ?? undefined).optional().email(),
     /**
      * dataType: varchar
      * defaultValue: 'active'::character varying
      */
    status: z.string().nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: jsonb
      */
    profile: z.any().nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: timestamptz
      * defaultValue: now()
      */
    created_at: z.date().nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: _text
      */
    roles: z.array(z.enum(USER_ROLES)).nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: _timestamp
      */
    dates: z.array(z.date()).nullish().transform((value) => value ?? undefined).optional(),
});

/**
 * The base record type for the "public.users" table.
 * This type represents the raw database record without case transforms.
 */
export type UserBaseRecord = z.output<typeof UsersTableBaseSchema>;

/**
 * Read transform for the "public.users" table.
 * Maps raw database snake_case fields to camelCase properties.
 */
export const transformUserBaseRecord = (data: UserBaseRecord): {
    id: UserBaseRecord['id'],
    name: UserBaseRecord['name'],
    email?: UserBaseRecord['email'],
    status?: UserBaseRecord['status'],
    profile?: UserBaseRecord['profile'],
    createdAt?: UserBaseRecord['created_at'],
    roles?: UserBaseRecord['roles'],
    dates?: UserBaseRecord['dates'],
} => ({
    id: data.id,
    name: data.name,
    email: data.email,
    status: data.status,
    profile: data.profile,
    createdAt: data.created_at,
    roles: data.roles,
    dates: data.dates,
});

/**
 * Read schema for the "public.users" table (after casing transform).
 */
export const UsersTableSchema = UsersTableBaseSchema.transform(transformUserBaseRecord);

/**
 * Base insert/write schema for the "public.users" table (no casing transforms).
 */
export const UsersTableInsertBaseSchema = z.object({
     /**
      * dataType: varchar
      */
    name: z.string().max(100),
     /**
      * dataType: varchar
      */
    email: z.string().max(255).nullish().optional().email(),
     /**
      * dataType: varchar
      * defaultValue: 'active'::character varying
      */
    status: z.string().max(20).nullish().optional(),
     /**
      * dataType: jsonb
      */
    profile: z.any().nullish().transform((value) => value ? JSON.stringify(value) : value).optional(),
     /**
      * dataType: timestamptz
      * defaultValue: now()
      */
    createdAt: z.date().nullish().optional(),
     /**
      * dataType: _text
      */
    roles: z.array(z.enum(USER_ROLES)).nullish().optional(),
     /**
      * dataType: _timestamp
      */
    dates: z.array(z.date()).nullish().optional(),
});

/**
 * The base record type for the "public.users" table.
 * This type represents an insertable database record before casing transformations are applied.
 */
export type UserInsertBaseRecord = z.output<typeof UsersTableInsertBaseSchema>;

/**
 * The base record type for the "public.users" table.
 * This type represents an updatable database record before casing transformations are applied.
 */
export type UserUpdateBaseRecord = Partial<UserInsertBaseRecord>;

/**
 * Insert transform for the "public.users" table.
 * Maps camelCase properties to raw database snake_case fields.
 */
export const transformUserInsertBaseRecord = (data: UserInsertBaseRecord): {
    name: UserInsertBaseRecord['name'],
    email?: UserInsertBaseRecord['email'],
    status?: UserInsertBaseRecord['status'],
    profile?: UserInsertBaseRecord['profile'],
    created_at?: UserInsertBaseRecord['createdAt'],
    roles?: UserInsertBaseRecord['roles'],
    dates?: UserInsertBaseRecord['dates'],
} => ({
    name: data.name,
    email: data.email,
    status: data.status,
    profile: data.profile,
    created_at: data.createdAt,
    roles: data.roles,
    dates: data.dates,
});

/**
 * Update transform for the "public.users" table.
 * Maps camelCase properties to raw database snake_case fields.
 */
export const transformUserUpdateBaseRecord = (data: UserUpdateBaseRecord): {
    name: UserUpdateBaseRecord['name'],
    email?: UserUpdateBaseRecord['email'],
    status?: UserUpdateBaseRecord['status'],
    profile?: UserUpdateBaseRecord['profile'],
    created_at?: UserUpdateBaseRecord['createdAt'],
    roles?: UserUpdateBaseRecord['roles'],
    dates?: UserUpdateBaseRecord['dates'],
} => ({
    name: data.name,
    email: data.email,
    status: data.status,
    profile: data.profile,
    created_at: data.createdAt,
    roles: data.roles,
    dates: data.dates,
});

/**
 * Insert schema for the "public.users" table (after casing transform).
 */
export const UsersTableInsertSchema = UsersTableInsertBaseSchema.transform(transformUserInsertBaseRecord);

/**
 * Update schema for the "public.users" table (after casing transform).
 */
export const UsersTableUpdateSchema = UsersTableInsertBaseSchema.partial().transform(transformUserUpdateBaseRecord);

type TableInsertRecord = z.input<typeof UsersTableInsertSchema>;
type TableReadRecord = z.output<typeof UsersTableSchema>;

/**
 * Read record (casing transformed) for the "public.users" table.
 */
export interface UserRecord {
    /**
    */
    id: TableReadRecord['id'];
    /**
    */
    name: TableReadRecord['name'];
    /**
    */
    email?: TableReadRecord['email'];
    /**
    */
    status?: TableReadRecord['status'];
    /**
    */
    profile?: TableReadRecord['profile'];
    /**
    */
    createdAt?: TableReadRecord['createdAt'];
    /**
    */
    roles?: TableReadRecord['roles'];
    /**
    */
    dates?: TableReadRecord['dates'];
}

/**
 * Insert record (casing transformed) for the "public.users" table.
 */
export interface UserInsertRecord {
    /**
    * @maxLen: 100
    */
    name: TableInsertRecord['name'];
    /**
    * @maxLen: 255
    */
    email?: TableInsertRecord['email'];
    /**
    * @maxLen: 20
    * @default: 'active'::character varying
    */
    status?: TableInsertRecord['status'];
    /**
    */
    profile?: TableInsertRecord['profile'];
    /**
    * @default: now()
    */
    createdAt?: TableInsertRecord['createdAt'];
    /**
    */
    roles?: TableInsertRecord['roles'];
    /**
    */
    dates?: TableInsertRecord['dates'];
}

/**
 * Updatable record (casing transformed) for the "public.users" table.
 */
export type UserUpdateRecord = Partial<UserInsertRecord>;

export type UserRole = (typeof USER_ROLES)[number];
"
`;

exports[`hook options > applies onColumnModelCreated hook to modify column schemas > column-hook/types.ts 1`] = `
"// This file is auto-generated by zod-pg. Do not edit this file directly.

export type Table = 
    | 'users'
"
`;

exports[`hook options > applies onTableModelCreated hook to modify table schemas > table-hook/constants.ts 1`] = `
"// This file is auto-generated by zod-pg. Do not edit this file directly.

export const TABLE_USERS = 'users';
"
`;

exports[`hook options > applies onTableModelCreated hook to modify table schemas > table-hook/tables/index.ts 1`] = `
"// This file is auto-generated by zod-pg. Do not edit this file directly.

export * from './users';
"
`;

exports[`hook options > applies onTableModelCreated hook to modify table schemas > table-hook/tables/users/index.ts 1`] = `
"// This file is auto-generated by zod-pg. Do not edit this file directly.

export * from './schema';
"
`;

exports[`hook options > applies onTableModelCreated hook to modify table schemas > table-hook/tables/users/schema.ts 1`] = `
"// This file is auto-generated by zod-pg. Do not edit this file directly.

import { z } from 'zod';

export const USER_ROLES = ['admin', 'editor', 'viewer'] as const;

/**
 * Base read schema for the "public.users" table.
 * Validates raw rows read from the database (no casing transforms applied yet).
 */
export const UsersTableBaseSchema = z.object({
     /**
      * dataType: int4
      * defaultValue: nextval('users_id_seq'::regclass)
      */
    id: z.number().int(),
     /**
      * dataType: varchar
      */
    name: z.string(),
     /**
      * dataType: varchar
      */
    email: z.string().nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: varchar
      * defaultValue: 'active'::character varying
      */
    status: z.string().nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: jsonb
      */
    profile: z.any().nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: timestamptz
      * defaultValue: now()
      */
    created_at: z.date().nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: _text
      */
    roles: z.array(z.enum(USER_ROLES)).nullish().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: _timestamp
      */
    dates: z.array(z.date()).nullish().transform((value) => value ?? undefined).optional(),
});

/**
 * The base record type for the "public.users" table.
 * This type represents the raw database record without case transforms.
 */
export type UserBaseRecord = z.output<typeof UsersTableBaseSchema>;

/**
 * Read transform for the "public.users" table.
 * Maps raw database snake_case fields to camelCase properties.
 */
export const transformUserBaseRecord = (data: UserBaseRecord): {
    id: UserBaseRecord['id'],
    name: UserBaseRecord['name'],
    email?: UserBaseRecord['email'],
    status?: UserBaseRecord['status'],
    profile?: UserBaseRecord['profile'],
    createdAt?: UserBaseRecord['created_at'],
    roles?: UserBaseRecord['roles'],
    dates?: UserBaseRecord['dates'],
} => ({
    id: data.id,
    name: data.name,
    email: data.email,
    status: data.status,
    profile: data.profile,
    createdAt: data.created_at,
    roles: data.roles,
    dates: data.dates,
});

/**
 * Read schema for the "public.users" table (after casing transform).
 */
export const UsersTableSchema = UsersTableBaseSchema.transform(transformUserBaseRecord);

/**
 * Base insert/write schema for the "public.users" table (no casing transforms).
 */
export const UsersTableInsertBaseSchema = z.object({
     /**
      * dataType: varchar
      */
    name: z.string().max(100),
     /**
      * dataType: varchar
      */
    email: z.string().max(255).nullish().optional(),
     /**
      * dataType: varchar
      * defaultValue: 'active'::character varying
      */
    status: z.string().max(20).nullish().optional(),
     /**
      * dataType: jsonb
      */
    profile: z.any().nullish().transform((value) => value ? JSON.stringify(value) : value).optional(),
     /**
      * dataType: timestamptz
      * defaultValue: now()
      */
    createdAt: z.date().nullish().optional(),
     /**
      * dataType: _text
      */
    roles: z.array(z.enum(USER_ROLES)).nullish().optional(),
     /**
      * dataType: _timestamp
      */
    dates: z.array(z.date()).nullish().optional(),
});

/**
 * The base record type for the "public.users" table.
 * This type represents an insertable database record before casing transformations are applied.
 */
export type UserInsertBaseRecord = z.output<typeof UsersTableInsertBaseSchema>;

/**
 * The base record type for the "public.users" table.
 * This type represents an updatable database record before casing transformations are applied.
 */
export type UserUpdateBaseRecord = Partial<UserInsertBaseRecord>;

/**
 * Insert transform for the "public.users" table.
 * Maps camelCase properties to raw database snake_case fields.
 */
export const transformUserInsertBaseRecord = (data: UserInsertBaseRecord): {
    name: UserInsertBaseRecord['name'],
    email?: UserInsertBaseRecord['email'],
    status?: UserInsertBaseRecord['status'],
    profile?: UserInsertBaseRecord['profile'],
    created_at?: UserInsertBaseRecord['createdAt'],
    roles?: UserInsertBaseRecord['roles'],
    dates?: UserInsertBaseRecord['dates'],
} => ({
    name: data.name,
    email: data.email,
    status: data.status,
    profile: data.profile,
    created_at: data.createdAt,
    roles: data.roles,
    dates: data.dates,
});

/**
 * Update transform for the "public.users" table.
 * Maps camelCase properties to raw database snake_case fields.
 */
export const transformUserUpdateBaseRecord = (data: UserUpdateBaseRecord): {
    name: UserUpdateBaseRecord['name'],
    email?: UserUpdateBaseRecord['email'],
    status?: UserUpdateBaseRecord['status'],
    profile?: UserUpdateBaseRecord['profile'],
    created_at?: UserUpdateBaseRecord['createdAt'],
    roles?: UserUpdateBaseRecord['roles'],
    dates?: UserUpdateBaseRecord['dates'],
} => ({
    name: data.name,
    email: data.email,
    status: data.status,
    profile: data.profile,
    created_at: data.createdAt,
    roles: data.roles,
    dates: data.dates,
});

/**
 * Insert schema for the "public.users" table (after casing transform).
 */
export const UsersTableInsertSchema = UsersTableInsertBaseSchema.transform(transformUserInsertBaseRecord);

/**
 * Update schema for the "public.users" table (after casing transform).
 */
export const UsersTableUpdateSchema = UsersTableInsertBaseSchema.partial().transform(transformUserUpdateBaseRecord);

type TableInsertRecord = z.input<typeof UsersTableInsertSchema>;
type TableReadRecord = z.output<typeof UsersTableSchema>;

/**
 * Read record (casing transformed) for the "public.users" table.
 */
export interface UserRecord {
    /**
    */
    id: TableReadRecord['id'];
    /**
    */
    name: TableReadRecord['name'];
    /**
    */
    email?: TableReadRecord['email'];
    /**
    */
    status?: TableReadRecord['status'];
    /**
    */
    profile?: TableReadRecord['profile'];
    /**
    */
    createdAt?: TableReadRecord['createdAt'];
    /**
    */
    roles?: TableReadRecord['roles'];
    /**
    */
    dates?: TableReadRecord['dates'];
}

/**
 * Insert record (casing transformed) for the "public.users" table.
 */
export interface UserInsertRecord {
    /**
    * @maxLen: 100
    */
    name: TableInsertRecord['name'];
    /**
    * @maxLen: 255
    */
    email?: TableInsertRecord['email'];
    /**
    * @maxLen: 20
    * @default: 'active'::character varying
    */
    status?: TableInsertRecord['status'];
    /**
    */
    profile?: TableInsertRecord['profile'];
    /**
    * @default: now()
    */
    createdAt?: TableInsertRecord['createdAt'];
    /**
    */
    roles?: TableInsertRecord['roles'];
    /**
    */
    dates?: TableInsertRecord['dates'];
}

/**
 * Updatable record (casing transformed) for the "public.users" table.
 */
export type UserUpdateRecord = Partial<UserInsertRecord>;

export type UserRole = (typeof USER_ROLES)[number];
"
`;

exports[`hook options > applies onTableModelCreated hook to modify table schemas > table-hook/types.ts 1`] = `
"// This file is auto-generated by zod-pg. Do not edit this file directly.

export type Table = 
    | 'users'
"
`;
