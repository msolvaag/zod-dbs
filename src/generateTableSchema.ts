import { writeFileSync } from "fs";

import type { Client } from "pg";
import type { ColumnInfo } from "./types";

import { getEnumConstraints } from "./enumConstraints";
import {
  createInputSchemaFields,
  createOutputSchemaFields,
  getEnums,
} from "./generateFieldSchema";
import { pascalCase, singularPascalCase, sql } from "./utils";

export async function generateTableSchema({
  client,
  tableName,
  schemaName,
  outputDir,
  jsonSchemaImportLocation,
}: {
  client: Client;
  tableName: string;
  schemaName: string;
  outputDir: string;
  jsonSchemaImportLocation?: string;
}) {
  const [res, enumConstraints] = await Promise.all([
    client.query(
      sql`
    SELECT
      column_name as "name",
      data_type as "dataType",
      is_nullable as "isNullable",
      character_maximum_length as "maxLen",
      udt_name as "udtName"
    FROM information_schema.columns
    WHERE table_schema = $1
    AND table_name = $2
    ORDER BY ordinal_position
  `,
      [schemaName, tableName]
    ),
    getEnumConstraints({ client, schemaName, tableName }),
  ]);

  const columns = res.rows as ColumnInfo[];

  if (columns.length === 0) {
    console.error(`No columns found for table: ${tableName}`);
    process.exit(1);
  }

  const useJsonSchemaImports =
    !!jsonSchemaImportLocation &&
    columns.some((col) => col.dataType === "jsonb");

  const { enumLiterals, enumTypes } = getEnums(tableName, enumConstraints);

  const schema = `import { z } from 'zod';
${
  useJsonSchemaImports
    ? `import * as json from '${jsonSchemaImportLocation}';\n`
    : ""
}
// This file is auto-generated by zod-pg
// Do not edit this file directly.
${
  enumLiterals.length
    ? `
${enumLiterals.join("\n")}\n`
    : ""
}
export const ${pascalCase(tableName)}TableInsertSchema = z.object({
${createInputSchemaFields({
  columns,
  tableName,
  enumConstraints,
  useJsonSchemaImports,
})}
});

export const ${pascalCase(tableName)}TableSchema = z.object({
${createOutputSchemaFields({
  columns,
  tableName,
  enumConstraints,
  useJsonSchemaImports,
})}
});

export const ${pascalCase(tableName)}TableUpdateSchema = ${pascalCase(
    tableName
  )}TableInsertSchema.partial();

export type ${singularPascalCase(
    tableName
  )}Record = z.infer<typeof ${pascalCase(tableName)}TableSchema>;
export type ${singularPascalCase(
    tableName
  )}InsertRecord = z.input<typeof ${pascalCase(tableName)}TableInsertSchema>;
export type ${singularPascalCase(
    tableName
  )}UpdateRecord = z.input<typeof ${pascalCase(tableName)}TableUpdateSchema>;
${enumTypes.join("\n")}
`;

  const fileName = `${outputDir}/tables/${tableName}.ts`;
  writeFileSync(fileName, schema);
}
