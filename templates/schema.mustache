// This file is auto-generated by zod-pg. Do not edit this file directly.

import { z } from 'zod';
{{#hasJsonSchemaImports}}
import { {{#jsonSchemaImports}}{{name}}{{^last}}, {{/last}}{{/jsonSchemaImports}} } from '{{{jsonSchemaImportLocation}}}';
{{/hasJsonSchemaImports}}

{{#enums}}
export const {{constantName}} = [{{#values}}'{{value}}'{{^last}}, {{/last}}{{/values}}] as const;
{{/enums}}

/**
 * The base read schema for the "{{schemaName}}.{{tableName}}" table.
 * This schema is used to validate the data read from the database without any transformations.
 */
export const {{tableReadBaseSchemaName}} = z.object({
{{#readableColumns}}
    /**
    * dataType: {{dataType}}
    * defaultValue: {{{defaultValue}}}
    */
    {{name}}: {{{renderedReadType}}},
{{/readableColumns}}
});

/**
 * The base record type for the "{{schemaName}}.{{tableName}}" table.
 * This type represents the raw database record without any transformations.
 */
export type {{{tableReadBaseRecordName}}} = z.output<typeof {{tableReadBaseSchemaName}}>;

/**
* The read transform function for the "{{schemaName}}.{{tableName}}" table.
* Maps the raw database fields to expected property names. e.g snake_case to camelCase.
*/
export const {{tableReadTransformName}} = (data: {{{tableReadBaseRecordName}}}): {
{{#readableColumns}}
    {{propertyName}}{{#isOptional}}?{{/isOptional}}: {{{tableReadBaseRecordName}}}['{{name}}'],
{{/readableColumns}}
} => ({
{{#readableColumns}}
    {{propertyName}}: {{#renderedReadTransform}}data.{{name}}{{/renderedReadTransform}},
{{/readableColumns}}
});

/**
 * The read schema for the "{{schemaName}}.{{tableName}}" table.
 * This schema is used to validate the data read from the database with transformations.
 */
export const {{tableReadSchemaName}} = {{tableReadBaseSchemaName}}.transform({{tableReadTransformName}});

{{#isWritable}}
/**
 * The base write schema for the "{{schemaName}}.{{tableName}}" table.
 * This schema is used to validate the data before writing to the database without any transformations.
 */
export const {{tableWriteBaseSchemaName}} = z.object({
{{#writableColumns}}
    /**
    * dataType: {{dataType}}
    * defaultValue: {{{defaultValue}}}
    */
    {{propertyName}}: {{{renderedWriteType}}},
{{/writableColumns}}
});

/**
 * The base record type for the "{{schemaName}}.{{tableName}}" table.
 * This type represents an insertable database record before casing transformations are applied.
 */
export type {{{tableInsertBaseRecordName}}} = z.output<typeof {{tableWriteBaseSchemaName}}>;

/**
 * The base record type for the "{{schemaName}}.{{tableName}}" table.
 * This type represents an updatable database record before casing transformations are applied.
 */
export type {{{tableUpdateBaseRecordName}}} = Partial<{{{tableInsertBaseRecordName}}}>;

/**
 * The insert transform function for the "{{schemaName}}.{{tableName}}" table.
 * Maps the expected property names to raw database fields. e.g camelCase to snake_case.
 */
export const {{tableInsertTransformName}} = (data: {{{tableInsertBaseRecordName}}}): {
{{#writableColumns}}
    {{name}}{{#isOptional}}?{{/isOptional}}: {{{tableInsertBaseRecordName}}}['{{propertyName}}'],
{{/writableColumns}}
} => ({
{{#writableColumns}}
    {{name}}: {{#renderedWriteTransform}}data.{{propertyName}}{{/renderedWriteTransform}},
{{/writableColumns}}
});

/**
 * The update transform function for the "{{schemaName}}.{{tableName}}" table.
 * Maps the expected property names to raw database fields. e.g camelCase to snake_case.
 */
export const {{tableUpdateTransformName}} = (data: {{{tableUpdateBaseRecordName}}}): {
{{#writableColumns}}
    {{name}}{{#isOptional}}?{{/isOptional}}: {{{tableUpdateBaseRecordName}}}['{{propertyName}}'],
{{/writableColumns}}
} => ({
{{#writableColumns}}
    {{name}}: {{#renderedWriteTransform}}data.{{propertyName}}{{/renderedWriteTransform}},
{{/writableColumns}}
});

/**
 * The insert schema for the "{{schemaName}}.{{tableName}}" table.
 * This schema is used to validate and transform a record before inserting into the database.
 */
export const {{tableInsertSchemaName}} = {{tableWriteBaseSchemaName}}.transform({{tableInsertTransformName}});

/**
 * The update schema for the "{{schemaName}}.{{tableName}}" table.
 * This schema is used to validate and transform a record before updating the database.
 */
export const {{tableUpdateSchemaName}} = {{tableWriteBaseSchemaName}}.partial().transform({{tableUpdateTransformName}});

type TableInsertRecord = z.input<typeof {{tableInsertSchemaName}}>;
{{/isWritable}}
type TableReadRecord = z.output<typeof {{tableReadSchemaName}}>;
{{#enums}}
export type {{typeName}} = (typeof {{constantName}})[number];
{{/enums}}

/**
* Represents a database record from the "{{schemaName}}.{{tableName}}" {{type}}.
*/
export interface {{tableReadRecordName}} {
{{#readableColumns}}
    /**
    {{#description}}* {{{description}}}
    {{/description}}{{#isDeprecated}}* @deprecated {{isDeprecatedReason}}
    {{/isDeprecated}}*/
    {{propertyName}}{{#isOptional}}?{{/isOptional}}: TableReadRecord['{{propertyName}}'];
{{/readableColumns}}
}
{{#isWritable}}

/**
* Represents an insertable database record from the "{{schemaName}}.{{tableName}}" table.
*/
export interface {{tableInsertRecordName}} {
{{#writableColumns}}
    /**
    {{#description}}* {{{description}}}
    {{/description}}{{#maxLen}}* @maxLen: {{maxLen}}
    {{/maxLen}}{{#defaultValue}}* @default: {{{defaultValue}}}
    {{/defaultValue}}{{#isDeprecated}}* @deprecated {{isDeprecatedReason}}
    {{/isDeprecated}}*/
    {{propertyName}}{{#isOptional}}?{{/isOptional}}: TableInsertRecord['{{propertyName}}'];
{{/writableColumns}}
}

/**
* Represents an updateable database record from the "{{schemaName}}.{{tableName}}" table.
*/
export type {{tableUpdateRecordName}} = Partial<{{tableInsertRecordName}}>;
{{/isWritable}}